%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: mod7.dvi
%%Pages: 25
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSCommandLine: dvips mod7
%DVIPSParameters: dpi=600, compressed, comments removed
%DVIPSSource:  TeX output 1997.03.21:1159
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (mod7.dvi)
@start /Fa 47 123 df<B51280A46C1300110579911B>45 D<17E0EE01F0A2EE03E0A2
EE07C0160F1780EE1F00A2163EA25EA25E15015E4B5AA24B5AA24B5A151F93C7FC153EA2
5DA25DA24A5A14035D4A5AA24A5AA24AC8FCA2143E147E147C5CA2495AA2495A13075C49
5AA249C9FCA2133EA25B13FC5B485AA2485AA2485AA2485A121F90CAFC123EA25AA25AA2
5A5A2C4B7EB727>47 D<EC01801403A21407140FEC1F005C14FF5BEB1FFEEB7FBEEB7E7E
1320EB007CA214FCA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131FA291C7
FCA25BA2133EA2137EA2137C13FCB512FCA3193277B127>49 D<150E151FA2153F153EA3
157E157CA215FC15F8A2140115F0A2EC03E0A3EC07C0A2EC0F80A2EC1F00A2143EA25C14
7814F85C1301903803E0E0ECC1F0EB0781EB0F83EC03E0131E133CEB7C0701F813C0EA01
F0EA03E03807C00FD80F801380EA1FFC383FFFCF48EBFF82D8F00313FF3860003FC7EA1F
F8EC3F00143EA3147E147CA314FC5CA4146020417DB127>52 D<EC0FC0EC7FF0ECFFFC90
3803F07E903807C03E49487EEB1F00013E7F017E14805BA2485AA2485A151FA212075BA2
ED3F00A2485A5DA2000714FEA21401140300035CEBE0070001130E3900F03DF8EB7FF1EB
0FC190380003F0A24A5AA25D4A5A141F003891C7FC007E133E00FE137E5C48485A48485A
48485A38781F80D87FFFC8FCEA1FFCEA07E0213478B127>57 D<1370EA01FC1203A413F8
EA00E01300B0121C127F5AA45A12380E20779F18>I<161C163CA2167C16FCA215018215
03A2ED077E150F150E151CA21538A2157015F015E0EC01C0A2913803807F82EC0700A214
0E141E141C5CA25CA25C49B6FCA25B913880003F49C7EA1F80A2130E131E131C133C1338
5B13F05B12011203D80FF0EC3FC0D8FFFE903807FFFEA32F367BB539>65
D<0107B612C04915F017FC903A003F8000FE177FEF3F8092C7121FA24A15C0A2147EA214
FE18804A143FA20101ED7F00177E4A5C16010103EC03F04C5A4AEB1FC091B6C7FC495C91
39F0007F804AEB0FC0707E010F6E7E834A1301A2011F81A25CA2133F5F91C71203A2494A
5AA2017E4A5A4C5A01FE4A5A4CC7FC49EB01FE0001EC07FC007FB612F0B712C04BC8FC32
337BB236>I<DB1FF013C09238FFFC010203EBFF03913A0FF00F878091393F8003CF9139
FE0001EF4948EB00FFD903F01500D90FE080495A49488091C8123E137E13FE485A484815
3CA2485AA248481538A2485A94C7FC123F5BA3127F90CBFCA412FEA2EE03C0A25F127E16
0794C7FC5E160E007F151E6C5D5E6C6C147016F06C6C495A6C6CEB07C06C6C49C8FC6C6C
133E6CB413FC90387FFFF0011F13C0D903FEC9FC323775B437>I<0107B612C04915F017
FC903A003F8001FEEE007FEF1F8092C7EA0FC0EF07E05CEF03F0147E170102FE15F8A25C
A21301A25CA2130317035CA2130718F04A1407A2130F18E04A140F18C0011F151F18805C
EF3F00133F177E91C85AA2494A5A4C5A017E4A5A4C5A01FE4A5A047EC7FC49495A0001EC
0FF8007FB612E0B7C8FC15F835337BB23A>I<0107B712F05B18E0903A003F80001F1707
170392C7FC17015C18C0147EA214FEA24A130EA20101EC1E03041C13804A91C7FC163C13
035E9138F001F891B5FC5B5EECE0011500130F5E5C1707011F01015BEEC00E0280141E92
C7121C133F173C91C812381778495DA2017E14014C5A01FE14074C5A49141F00014AB45A
007FB7FCB8FC94C7FC34337CB234>I<0107B712E05B18C0903A003F80003F170F170792
C7FC17035C1880147EA214FEA25C161C0101EC3C07043813004A91C7FCA2010314781670
4A13F0150349B5FCA25EECE003130F6F5A14C0A2011F13035E1480A2013F90C9FCA291CA
FCA25BA2137EA213FEA25B1201387FFFFCB5FCA233337CB232>I<92391FE001809238FF
F8030207EBFE07913A1FF01F0F0091393F80079F9139FE0003DFD901F86DB4FCD907F05C
49481300495A4948147E49C8127C137E13FE485A48481578A2485AA248481570A2485A94
C7FC123F5BA3127F90CBFCA400FE91383FFFFCA25F9238003F8094C7FCA2007E5DA2167E
A2007F15FE7E5E6C6C1301A26C6C495A6D13076C6CEB0F786C6C133E3A00FF01FC309038
7FFFF0011F01C0C8FCD903FEC9FC313775B43B>I<010FB51280A216009038003FC05DA2
92C7FCA25CA2147EA214FEA25CA21301A25CA21303A25CA21307A25CA2130FA25CA2131F
A25CA2133FA291C8FCA25BA2137EA213FEA25B1201B512F8A25C21337BB21E>73
D<91381FFFFE5C16FC9138003F80A31600A25D157EA315FE5DA314015DA314035DA31407
5DA3140F5DA3141F5DA3143F92C7FCA2121C007E5B00FE137EA214FE485BEAF80100E05B
495A387007E038780FC06C48C8FCEA1FFCEA07F0273579B228>I<0107B590380FFFF05B
19E09026003FC0903803FE004B14F818E092C7485A4DC7FC4A141E177C027E5CEE01E002
FE495A4C5A4A011FC8FC163E010114785E4A485AED07C00103495A4B7EECF03F157F9039
07F1FFE0ECF3E79138E787F0ECEF0790380FFE0302FC7FECF80114E0D91FC07F15004A7F
A2013F147E167F91C77E835B161F017E81160F13FE835B000182267FFFF090B57EB55B95
C7FC3C337BB23B>I<0107B512C05BA29026003FC0C7FC5DA292C8FCA25CA2147EA214FE
A25CA21301A25CA21303A25CA21307A25CA2130FA25C17E0011F140117C05C1603013F15
80160791C7FCEE0F005B5E017E143EA201FE5CED01FC4913030001EC1FF8007FB6FCB7FC
5E2B337CB230>I<902607FFC0ED7FFC4917FF81D9003F4B1300611803023BED077CA202
7BED0EFC610273151C1838DAF1F01439F071F014E118E10101ED01C36102C1EC0383EF07
0301031607050E5BEC80F8171C0107ED380F6102001470A249EDE01FDC01C090C7FC130E
EE0380011E017C5C933807003E011C140EA2013C4A137E187C01385C5E017816FC6F485B
1370ED3FC001F0EC80016000011500D807F81503277FFF803E90B512C0B5EB3C01151C46
337BB245>I<902607FF8090383FFFC0496D5BA2D9001F913803F8004A6C6D5A6060EC3B
F0027B140360EC71F8A202F11407DAF0FC91C7FC14E0A20101017E5B170E14C081010315
1EEE801CEC801FA20107ECC03C030F1338140016E049010713781770010E14F01503011E
15F0705A011C1301A2013C14FD03005B133816FF0178147F5F0170143FA213F070C8FC12
01EA07F8267FFF807FB5140EA23A337BB239>I<ED1FE0913801FFFC913807E03F91391F
800FC091393E0003E002F8EB01F0495A4948EB00F8494814FC4948147C49C8127E133E01
7E153E49153F485AA2485A12075B120F5B121F177F5B123FA348C912FEA4EE01FC12FEEE
03F8A217F0160717E0160F007E16C0EE1F80A2EE3F006C157E5E5E6C6C495A000F4A5A6D
495A0007EC1F806C6C013EC7FCD801F813FC39007E07F090383FFF80D907FCC8FC303775
B43B>I<0107B612C04915F883903A003F8001FEEE003FEF1F8092C713C0170F5C18E014
7EA214FEEF1FC05CA201011680173F4A1500177E010315FE5F4AEB03F8EE07E00107EC3F
C091B6C7FC16F802E0C9FC130FA25CA2131FA25CA2133FA291CAFCA25BA2137EA213FEA2
5B1201387FFFF0B5FCA233337CB234>I<0107B512FE49ECFFC017F0903A003F8007F8EE
01FCEE007E92C7127F835C1880147EA214FEEF7F005CA2010115FE5F4A13015F01034A5A
EE0FC04A495A04FEC7FC49B512F016C09138E003E0ED01F8010F6D7E167C4A137EA2131F
A25CA2013F14FEA291C7FCA24913015E137EEF01C001FE150318805B00011607277FFFF0
001400B5ECFE0EEE7E1CC9EA1FF8EE07E032357BB238>82 D<913901FC018091380FFF03
023F13C791387E07EF903A01F801FF0049487E4A7F495A4948133E131F91C7FC5B013E14
3CA3137E1638A293C7FC137FA26D7E14E014FE90381FFFC06D13F86D7F01017F6D6C7E02
0F7F1400153F6F7E150FA4120EA2001E5D121CA2151F003C92C7FCA2003E143E5D127E00
7F5C6D485A9038C007E039F3F80FC000F0B5C8FC38E03FFC38C00FF029377AB42B>I<00
03B812C05A1880903AF800FC003F260FC001141F0180150F01005B001EEE07001403121C
003C4A5BA200380107140E127800705CA2020F141E00F0161CC74990C7FCA2141FA25DA2
143FA292C9FCA25CA2147EA214FEA25CA21301A25CA21303A25CA21307A25C497E001FB5
12F05AA2323374B237>I<B500C090383FFF80A3D807F8C73807F80049EC03E05F00034B
5A94C7FC5E160E5EA25E167816705E7F00014A5A15035E4BC8FCA2150E151E151C5D7F5D
000014F05D4A5AA24A5AA24AC9FC140EA26D5A137E5C147814705CA2EB7FC0A25C91CAFC
A2133EA2133C1338313570B239>86 D<EB03F0EB0FF890383E1C6090387C0FF0EBF807EA
01F0EA03E00007EB03E0EA0FC0A2381F800715C0EA3F00A2140F481480127EA2141F00FE
14005A1506EC3F07EC3E0F150E147E007C141EECFE1CEB01FCD83C03133C393E07BE3839
1F0E1E783907FC0FF03901F003C0202278A027>97 D<137EEA0FFE121F5B1200A35BA212
01A25BA21203A25BA21207A2EBC3E0EBCFF8380FDC3EEBF81F497E01E01380EA1FC01380
15C013005AA2123EA2007E131F1580127CA2143F00FC14005AA2147EA25CA2387801F85C
495A6C485A495A6C48C7FCEA0FFCEA03F01A3578B323>I<14FCEB07FF90381F07809038
3E03C0EBFC013801F8033803F0073807E00F13C0120F391F80070091C7FC48C8FCA35A12
7EA312FE5AA4007C14C0EC01E0A2EC03C06CEB0F80EC1F006C137C380F81F03803FFC0C6
48C7FC1B2278A023>I<ED0FC0EC03FFA21680EC001FA31600A25DA2153EA2157EA2157C
A215FCA2903803F0F8EB0FF8EB3E1DEB7C0F496C5AEA01F0EA03E000071303D80FC05BA2
381F8007A2D83F005BA2140F5A007E5CA2141F12FE4891C7FC1506EC3F075DEC3E0E147E
007C141EECFE1CEB01FCD83C03133C393E07BE38391F0E1E783907FC0FF03901F003C022
3578B327>I<EB03F8EB0FFEEB3E0F9038F807803801F003EA03E0EA07C0120FEA1F8014
07D83F0013005C007E133EEB03F8387FFFE04848C7FC00FCC8FCA45AA4EC0180EC03C0A2
007CEB0780EC1F00003C133E6C13F8380F03E03807FF80D801FCC7FC1A2277A023>I<15
1FED7FC0EDF0E0020113F0EC03E3A2EC07C316E0EDC1C091380FC0005DA4141F92C7FCA4
5C143E90381FFFFEA3D9007EC7FC147CA414FC5CA513015CA413035CA413075CA3130FA2
5CA3131F91C8FCA35B133E1238EA7E3CA2EAFE7812FC485AEA78E0EA3FC0000FC9FC2445
82B418>I<143FECFF80903803E1E6903807C0FF90380F807FEB1F00133E017E133F4913
3EA24848137EA24848137CA215FC12074913F8A21401A2D80FC013F0A21403120715E014
07140F141F3903E03FC00001137FEBF0FF38007FCF90381F0F801300141FA21500A25C14
3E1238007E137E5C00FE5B48485A387803E0387C0F80D81FFFC7FCEA07F820317CA023>
I<EB0FC0EA03FFA25CEA001FA391C8FCA25BA2133EA2137EA2137CA213FCA29038F83F80
ECFFE03901FBE0F09038FF80F8EC007849137C485A5B5BA2484813FC5D5BA2000F13015D
1380A2001F13035DEB0007EDC0C048ECC1E0020F13C0003E1481A2007E1483ED0380007C
1407160000FC140E151E48EB07F80070EB01F023357BB327>I<EB0180EB07E0A2130FEB
07C0EB038090C7FCABEA01F0EA03FCEA0F1E120E121C123C1238EA783E1270A2137EEAF0
7CEA60FCC65AA212015BA212035BA2000713C0EBC1E0000F13C01381A21383EB03801307
1400130E131EEA07F8EA01F013337AB118>I<133FEA07FF5A13FEEA007EA3137CA213FC
A213F8A21201A213F0A21203A213E0A21207A213C0A2120FA21380A2121FA21300A25AA2
123EA2127EA2127C1318EAFC1C133CEAF838A21378137012F013F0EAF8E01279EA3FC0EA
0F00103579B314>108 D<2703C003F8137F3C0FF00FFE01FFC03C1E783C1F07C1E03C1C
7CF00F8F01F03B3C3DE0079E0026383FC001FC7FD97F805B007001005B5E137ED8F0FC90
380FC00100E05FD860F8148012000001021F130360491400A200034A13076049013E130F
F081800007027EEC83C0051F138049017C1403A2000F02FC1407053E130049495CEF1E0E
001F01015D183C010049EB0FF0000E6D48EB03E03A227AA03F>I<3903C007F0390FF01F
FC391E787C1E391C7CF01F393C3DE00F26383FC01380EB7F8000781300EA707EA2D8F0FC
131F00E01500EA60F8120000015C153E5BA20003147E157C4913FCEDF8180007153C0201
133801C013F0A2000F1578EDE070018014F016E0001FECE1C015E390C7EAFF00000E143E
26227AA02B>I<14FCEB07FF90381F07C090383E03E09038FC01F0EA01F83903F000F848
5A5B120F484813FCA248C7FCA214014814F8127EA2140300FE14F05AA2EC07E0A2007CEB
0FC01580141FEC3F006C137E5C381F01F0380F83E03803FF80D800FCC7FC1E2278A027>
I<011E137C90387F81FF9039F3C387C09039E3EF03E03901E1FE01D9C1FC13F0EBC3F800
0313F0018314F814E0EA07871307000313C01200010F130316F01480A2011F130716E014
00A249EB0FC0A2013EEB1F80A2017EEB3F00017F133E5D5D9038FF81F09038FDC3E09038
F8FF80027EC7FC000190C8FCA25BA21203A25BA21207A25BB5FCA325307FA027>I<3903
C00FC0390FF03FF0391E78F078391C7DE03C393C3FC0FC00381380EB7F00007814F8D870
7E13701500EAF0FC12E0EA60F812001201A25BA21203A25BA21207A25BA2120FA25BA212
1FA290C8FC120E1E227AA020>114 D<EB03F0EB1FFCEB3C1EEB780FEBF007EA01E0140F
0003131F13C0A2EBE00414007FEBFF8014E06C13F06C13F8EB7FFC1307EB00FE147E143E
123800FC133CA3147C00F013784813F0EAF001387803E0383C0F80381FFE00EA03F81822
7AA01F>I<1303EB0F80A3131FA21400A25BA2133EA2137EA2137C387FFFF8A2B5FC3800
F800A21201A25BA21203A25BA21207A25BA2120FA25B1460001F13F014E01300130114C0
1303001E1380EB07005BEA0F1EEA07F8EA01E015307AAE19>I<EA01F0D803FC1307D80F
1E5B000E5C121C123C00385CD8783E133E1270A2017E137ED8F07C137CEA60FCC65A15FC
00015C5BA2140100035C13E0166002031370EDE0F0D807C014E0A20003EB07E116C09038
E00FC1EC1FC3000190383FE3809038F071E73A007FE0FF0090381F803C24227AA029>I<
01F01338D803FC13FCEA0F1E120E121C123C0038147CEA783E0070143CA2137ED8F07C13
38EA60FCC65A1578000114705BA215F0000314E05BA2EC01C0A2EBC003158014071500EB
E00EA26C6C5A3800F878EB7FE0EB1F801E227AA023>I<D801F01538D803FC010E13FCD8
0F1E131E000E143E121C123C0038027E137CD8783E137C0070163CA2017E13FCD8F07C49
1338EA60FCC65A0201147800014A137013F0A2020314F0000316E001E05BA2160117C001
C013C00207EB0380A29039E00FE0071700021F130E3A01F03DF01E3A00F878F83C90393F
F03FF090390FC00FC02E227AA033>I<13F0D803FC1307D80F1E130F000E141F121C123C
0038143FD8783E133E1270A2017E137ED8F07C137CEA60FCC65A15FC000114F85BA21401
000314F013E0A2140315E0EA07C0A20003130715C0EBE00F141F0001133F9038F07F8038
007FEFEB1F8FEB001F1500A25C003E133E007E137E147C5C007C5BEA7001495A38380780
D83C1FC7FCEA0FFCEA07F020317AA025>121 D<903807801C90381FE03C90383FF03801
7F13789038FFF8F03901F07CE0EBE01F3903C003C09038800780EC0F00C7121E141C143C
5C5C495AEB07C0495A011EC7FC5B5B4913704913F0000114E0485A38078001390FC003C0
381FF80790383E0F80393C1FFF00127838700FFE38F007F838E001E01E227CA01F>I
E /Fb 5 119 df<EB1F80EBFFE03803E07038078030EA1F00123E123C007C1360387807
C0B51280EBF80000F8C7FC5AA41408141800781370003813E0381E07C0380FFF00EA03F8
15177D951D>101 D<1338137CA2137813701300A7EA0780EA1FC0EA38E01230EA60F0EA
C1E0A3EA03C0A3EA0780A2EA0F0013041306EA1E0CA21318121CEA1E70EA0FE0EA07800F
237DA116>105 D<13F8EA0FF0A21200A2485AA4485AA43807801E147FEB81C3EB838738
0F060F495A1318EB700E4848C7FCA213FCEA1E7EEA3C0F80EB0781158039780F0300A214
02EB070600F0138CEB03F8386000F019247CA221>107 D<EA01F0EA1FE0A21201A2EA03
C0A4EA0780A4EA0F00A4121EA45AA45AA213401360EAF0C0A3EAF1801271EA3F00121E0C
247DA214>I<3807800E380FE01FEA38F012300060130F12C01407EAC1E000011306EA03
C0A33807800CA214081418A21430146014C0EA03C13801FF00EA007E18177D951F>118
D E /Fc 10 117 df<903803FF80013F13F090B512FC48EB03FE3907FC007F4848EB3F80
4848EB1FC05B003FEC0FE0127F5B16F012FF150790B6FCA301C0C8FCA4127F7F123F16F0
6C7E000F14016C6CEB03E0D803FEEB0FC03A01FF807F806C6CB51200011F13FC010313E0
24217EA029>101 D<EC3FE0903803FFF8010F13FC90383FF1FE90387FC3FFEBFF834813
03A2EA03FEEC01FEA2EC00781500A7B512FEA4D803FEC7FCB3A7387FFFF8A420347EB31B
>I<EA01FC12FFA4120F1207ADEC03FF020F13C0023F13F09138FC0FF89039FDE007FCEB
FFC04A6C7E1400A25BA25BB2B539E07FFFF0A42C347DB331>104
D<EA03F0487E487E487EA66C5A6C5A6C5AC8FCA8EA01FC12FFA4120F1207B3A5B512C0A4
12357DB418>I<EA01FC12FFA4120F1207B3B3A6B512E0A413347DB318>108
D<3901F803FF00FF010F13C0023F13F09138FC0FF89039F9E007FC380FFBC06CB4486C7E
1400A25BA25BB2B539E07FFFF0A42C217DA031>110 D<903803FF80011F13F090B512FE
48EB01FF3A07FC007FC0D80FF0EB1FE0001F15F049130F003F15F8491307007F15FCA300
FF15FEA8007F15FCA26D130F003F15F8001F15F06D131F6C6CEB3FE06C6CEB7FC03A01FF
01FF006CEBFFFE013F13F80103138027217EA02C>I<3901F81F8000FFEB7FF0ECFFF890
38F9E3FC9038FBC7FE380FFF876C1307A213FEEC03FCEC01F8EC0060491300B1B512F0A4
1F217EA024>114 D<9038FFE1C0000713FF5A383F803F387E000F14075A14037EA26C6C
C7FC13FCEBFFE06C13FC806CEBFF80000F14C06C14E0C6FC010F13F0EB007F140F00F013
0714037EA26C14E06C13076CEB0FC09038C01F8090B5120000F913FC38E03FE01C217DA0
23>I<133CA5137CA313FCA21201A212031207001FB51280B6FCA3D807FCC7FCB0EC03C0
A79038FE078012033901FF0F006C13FEEB3FFCEB0FF01A2F7EAE22>I
E /Fd 28 120 df<123C127E12FFA4127E123C08087A8715>58 D<123C127EB4FCA21380
A2127F123D1201A412031300A25A1206120E120C121C5A5A126009177A8715>I<171C17
7EEE01FEEE07FCEE1FF0EE7FC0923801FF00ED07FCED1FF0ED7FC04A48C7FCEC07FCEC1F
F0EC7FC04948C8FCEB07FCEB1FF0EB7FC04848C9FCEA07FCEA1FF0EA7FC048CAFCA2EA7F
C0EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01
FF9138007FC0ED1FF0ED07FCED01FF9238007FC0EE1FF0EE07FCEE01FEEE007E171C2F2E
7AA93C>I<1530157815F8A215F01401A215E01403A215C01407A21580140FA215005CA2
143EA2143C147CA2147814F8A25C1301A25C1303A25C1307A2495AA291C7FC5BA2131E13
3EA2133C137CA2137813F8A25B1201A25B1203A2485AA25B120FA290C8FC5AA2121E123E
A2123C127CA2127812F8A25A12601D4B7CB726>I<127012FCB4FCEA7FC0EA1FF0EA07FC
EA01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FCEC01FF9138007FC0ED
1FF0ED07FCED01FF9238007FC0EE1FF0EE07FCEE01FEA2EE07FCEE1FF0EE7FC0923801FF
00ED07FCED1FF0ED7FC04A48C7FCEC07FCEC1FF0EC7FC04948C8FCEB07FCEB1FF0EB7FC0
4848C9FCEA07FCEA1FF0EA7FC048CAFC12FC12702F2E7AA93C>I<010FB612F017FEEFFF
80903B003FC0003FE0EF0FF017074B14F81703027F15FCA292C7FCA25C18F84A140718F0
0101150F18E04AEC1FC0EF3F800103ED7F00EE01FE4AEB07F891B612E04915809139F800
1FF04AEB03FCEE00FE010F157FA24AEC3F80A2011F16C0A25CA2133F18804A147FA2017F
EDFF005F91C712014C5A494A5A4C5A49EC3FE00001913801FF80B748C7FC16F816C03633
7DB23A>66 D<010FB712FCA218F8903A003FC00007170018785D1838147F183092C8FCA2
5CA25C16060101020E1370040C13604A1500A20103141C5E5C16F849B5FCA25EECF00101
0F130016605CA2011F14E05E5CA2013F91C8FCA25CA2137FA291CAFCA25BA25B487EB6FC
A336337DB231>70 D<B500F0903801FFFCA3D803FEC8EA3F8049ED1E00171C5F00011630
177017605FA24C5A6D4AC7FC120016065EA25E16386D14305E6D14E05E4B5AA24BC8FCEC
8006A2013F5B5DA25D1570ECC0605DEB1FC15D02C3C9FCA214C614ECA2EB0FF8A25C5CA2
5C5C130791CAFC130636357CB22D>86 D<EB01F8EB07FE90381F071C90387C03FEEBF801
EA01F00003130048485B5B120F381F80015DEA3F00A21403485C127EA2140700FE5C5A16
40020F1360EDC0E016C0127CEC1FC1023F1380003CEB7F81003EEBEF833A1E01C7C30039
0F0787C73907FE03FE3900F800F823227EA029>97 D<133FEA1FFFA25B1200A35BA21201
A25BA21203A25BA21207A2EBE0F8EBE3FF390FEF07809038FC03C001F813E0EBF001D81F
E013F013C0138015F8123FA21300A248130315F0127EA2140700FE14E05AA2EC0FC0A2EC
1F80007C14005C147E003C137C003E5B381E01F0380F07C06CB4C7FCEA00FC1D357EB321
>I<147F903803FFC090380FC0F090383F0038137C4913F83801F0013803E0031207EA0F
C090388001F0001F90C7FC123F90C8FCA25A127EA45AA3127C150C151C15386C147015E0
6CEB03C0390F800F003807C07E3801FFF038007F801E227EA021>I<ED01F815FFA216F0
1507A316E0A2150FA216C0A2151FA21680A2153FA2D901F81300EB07FE90381F077F9038
7C03FF496C5AEA01F000031300485A495B120F381F8001A2D83F005BA214035A007E5CA2
140712FE485C1640020F136016E0EDC0C0127CEC1FC1023F1380003CEB7F81003EEBEF83
3A1E01C7C300390F0787C73907FE03FE3900F800F825357EB328>I<14FE903807FF8090
381F03C090387C01E03801F800485A485A485A485A1401D83F0013C01403007EEB0F80EC
FE00387FFFF8B5128000FCC8FCA45AA415186C1438007C147015E0003CEB01C0003EEB07
806CEB1E00380F80FC3803FFE0C690C7FC1D227DA024>I<EC1F80EC7FE0903901F071C0
903907C03FE090380F801F90381F000F5B137E017C14C013FC4848131FA248481480A215
3F1207491400A25DA249137EA215FEA25DA214013803E0034A5A3801F01F3800F83BEB3F
F390380FC3F0EB00031407A25DA2140F001C5C127F4A5A143F00FE91C7FC147E387801FC
383C03F0381FFFC0D803FEC8FC23317FA025>103 D<EB07E0EA03FFA25CEA001FA35CA3
133F91C8FCA35B137EA313FE9038FC0FE0EC3FF8ECF07E3901FFC03FEC001F5B49148012
035B5B153F000715005BA25D000F147E5B15FE5D121FEB8001EDF808161C003F01031318
010013F01638020713304814E0007E1570020313E0EDE1C000FE903801E38048903800FF
000038143C26357DB32C>I<EB01C0EB07E014F0130F14E01307EB038090C7FCAA13F0EA
03FCEA071EEA0E1F121C123800301380EB3F00127012605BEAE07EEA40FE12005B12015B
A212035B12071420EBE070000F136013C014E014C0EA1F80EA0F81EB8380EB8700EA078E
EA03FCEA00F014337EB11A>I<151C157E15FEA315FC15781500AA143FECFFC0903801C3
E0EB038390380701F0130EEB0C03131C1338133014071370012013E01300140FA215C0A2
141FA21580A2143FA21500A25CA2147EA214FEA25CA21301A25CA21303001C5B127F495A
A238FE0FC0495AD8783FC7FCEA707CEA3FF0EA0FC01F4281B11F>I<EB07E0EA03FFA25C
EA001FA35CA3133F91C8FCA35B137EA313FE49131FED7FC0EC01E0000190380383E09038
F8070F140E141C0003013813C0EBF0709138E00700D9F1C0C7FC3807F78001EEC8FC13FC
7F380FFFE0EBC7F8EBC1FEEBC07E001F7F1380ED8080ED81C0003FEC01801300A2150348
1500007EEB3E071506EC1F0E00FE5C48EB07F80038EB03E023357DB328>I<EB1F80EA07
FF5A1400C67EA3137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA212
1FA25BA2123FA290C7FCA25AA2127E1304EAFE0E130C12FCA2131C131812F81338EA7C70
1360EA3FE0EA0F8011357DB317>I<D801E013FE3A07F803FF803A0E3E0F07E0001C9038
3C03F039181F7001003813E026303FC07F12700060138014001503D8E07F5CEA407E1200
150701FE5C5B150F5E120149131FEE8080EE81C00003023F13804914011603037F130000
07147E495CED3E0E5E000FEC1E3849EB0FF0D80380EB03C02A227EA02E>110
D<147F903803FFC090380FC1F090383F00F8017C137C497F485A48487F1207485A5B001F
1580123F90C7FCED3F005A127EA25D157E5A15FE5D007C5C14014A5A5D6C495A4A5A6C49
C7FC380F807E3807C1F83801FFE06C6CC8FC21227EA025>I<011F131F90397FC07FE090
39E3E1E0F09039C3E380783A01C1F7007CD981FE133CD983FC133E00035BEB03F0163FEA
0707120600025B1200010F147F167E5CA2011F14FE16FC5CA2013FEB01F8A291380003F0
16E0491307ED0FC002801380ED1F009038FFC03E9038FEE0F89038FC7FE0EC1F80000190
C8FCA25BA21203A25BA21207A25BB57EA3283083A027>I<3903E003E0390FF81FF8391C
7C3C1C0018EB703E39383EE0FE38303FC0EB7F800070EB00FCEA607E157000E01400EAC0
FEEA40FC1200A212015BA312035BA312075BA3120F5BA3121F5B0007C8FC1F227EA023>
114 D<EB01FCEB0FFF90383E03C090387800E04913603901E001E014030003130713C013
E0EC03806DC7FC13FF14F014FC6C7F6C7F6D1380130F9038007FC0141F140F007E130700
FE1480A3EC0F005A00C0131E6C5B00705B383C01F0380FFFC0D803FEC7FC1B227CA024>
I<EB0380EB0FC0A3131FA21480A2133FA21400A25BA2137E387FFFFEA2B5FC3800FC00A2
1201A25BA21203A25BA21207A25BA2120FA25B1408001F131C14181380143814701460EB
00E0EB01C0380F8380EB8700EA07FEEA01F817307FAE1C>I<13F8D803FEEB01C0D8070F
EB03E0000EEB8007121C001813C00038140FEA301F0070018013C01260013F131F00E013
0000401580C65A017E133F13FE491400A25D120149137E1602EDFE0716064913FCA2160E
0201130C9039F803F81C1618000090380F7C38D97C1C137090393FF81FE0903907E00780
28227EA02C>I<01F0130ED803FC131FD8071EEB3F80EA0E1F121C0038EB801F0030140F
013F130700701300006014035BD8E07E14001240EA00FE495B000114065BA2150E000314
0C5B151C15181538491330157015606D13E04A5A0001495A6D48C7FC3800FC1EEB3FF8EB
07E021227EA025>I<01F01507D803FC903903800F80D8071E903907C01FC0D80E1F130F
121C00380180140F0030021F1307013FEC8003007013000060160149133FD8E07E168000
401500EA00FE494913030001170049137EA203FE5B00031606495B170E170CA24B131C49
15186D15384A6C5B17600001010314E03B00F8077E01C0903A7C0E3F078090273FFC0FFE
C7FC903907F001F832227EA037>I E /Fe 10 107 df<007FB712FCB812FEA26C16FC2F
047A943C>0 D<91383FFFF849B512FC1307011F14F8D93FE0C7FC01FFC8FCEA01FCEA03
F0485A485A5B48C9FC5A123E5AA21278A212F8A25AB712F816FCA216F800F0C9FC7EA212
78A2127CA27E123F7E6C7E7F6C7E6C7EEA01FC6CB4FCEB3FE06DB512F8010714FC1301D9
003F13F8262E7AA933>50 D<007FB61280B712C0A27EC81203B3A2003FB6FC5AA27EC812
03B3A2007FB6FCB7FCA26C158022347CB32B>57 D<EC0180EC03C0A21407EB0FE790383F
FF80EBF83F3801E00FEA03C0D8078013C0390F001FE0A24814F0001E133E003E14F8143C
A248EB7C7CA2147814F8A200FCEBF07EA21301A214E01303A214C0A21307A21480A2130F
A214005BA2131EA2D87C3E137CA2133C137C007E14FCD83E7813F8A213F8001E14F0381F
F001000F14E01403D807E013C00003EB0780EC0F00EBF83EEBFFFC3807CFE001C0C7FC5B
A26CC8FC1F407DB926>59 D<D80F8015E0D83FF0EC01F8486CEC03FC486C15FEEA1FFED8
03FFEC07FF7E6C7F017FEC007F013F151F6E140F131F17076E1406130FA2170C1307171C
6E1418173817301770010315E01601EE03C017801607EE0F005E163E5E5E4B5A15034B5A
4B5A4B5A4BC7FCECE0FEECE1FCECE3F8903807E7F0ECFFE05D5D92C8FC14FC5C5C495A14
8091C9FC130E130830377EB22F>86 D<EC07E0143FECFE00EB03F8495A495A5C131F5CB3
A5133F91C7FC137E5BEA03F8EA7FE048C8FCEA7FE0EA03F8C67E137E7F80131FB3A58013
0F806D7E6D7EEB00FEEC3FE014071B4B7BB726>102 D<12FCEAFFC0EA07F0EA01FC6C7E
137F7F80131FB3A580130F6D7E6D7EEB01FC9038007FC0EC1FE0EC7FC0903801FC00EB03
F0495A495A131F5CB3A5133F91C7FC5B13FE485AEA07F0EAFFC000FCC8FC1B4B7BB726>
I<EB0180EB03C01307A21480130FA2EB1F00A2131E133EA25BA2137813F8A2485AA25B12
03A2485AA25B120FA248C7FCA2121E123EA25AA2127812F8A41278127CA27EA2121E121F
A26C7EA212077FA26C7EA212017FA26C7EA21378137CA27FA2131E131FA2EB0F80A21307
14C0A21303EB0180124A79B71E>I<126012F07EA21278127CA27EA2121E121FA26C7EA2
12077FA26C7EA212017FA26C7EA21378137CA27FA2131E131FA2EB0F80A2130714C0A414
80130FA2EB1F00A2131E133EA25BA2137813F8A2485AA25B1203A2485AA25B120FA248C7
FCA2121E123EA25AA2127812F8A25A1260124A7CB71E>I<126012F0B3B3B3B31260044B
78B715>I E /Ff 6 53 df<1438B2B712FEA3C70038C7FCB227277C9F2F>43
D<13FF000313C0380781E0380F00F0001E137848133CA248131EA400F8131FAD0078131E
A2007C133E003C133CA26C13786C13F0380781E03803FFC0C6130018227DA01E>48
D<13E01201120712FF12F91201B3A7487EB512C0A212217AA01E>I<EA01FC3807FF8038
1C0FC0383003E0386001F0EB00F812F86C13FCA2147C1278003013FCC7FC14F8A2EB01F0
EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA0380380600185A5A383FFFF85AB5
12F0A216217CA01E>I<13FF000313C0380F03E0381C00F014F8003E13FC147CA2001E13
FC120CC712F8A2EB01F0EB03E0EB0FC03801FF00A2380003E0EB00F01478147C143E143F
1230127812FCA2143E48137E0060137C003813F8381E03F0380FFFC00001130018227DA0
1E>I<14E01301A213031307A2130D131D13391331136113E113C1EA01811203EA070112
06120C121C12181230127012E0B6FCA2380001E0A6EB03F0EB3FFFA218227DA11E>I
E /Fg 1 1 df<B812C0A32A037A9137>0 D E /Fh 17 122 df<123C127EB4FCA21380A2
127F123D1201A312031300A25A1206120E5A5A5A126009157A8714>59
D<013FB512FEEEFFC0903A00FE0007F0EE01F84AEB007E8301018118804A140F18C00103
150718E05CA21307A25CA2130FA24A140FA2131F18C04A141FA2013F1680173F91C81300
A249157EA2017E5D5F01FE14014C5A494A5A4C5A00014BC7FC163E4914FCED03F00003EC
1FC0B7C8FC15F8332D7CAC3A>68 D<000FB8FCA23B1FC003F8003F0100151F001C4A130E
123C003801071406123000704A130EA20060010F140C12E0485CA2141FC715005DA2143F
A292C8FCA25CA2147EA214FEA25CA21301A25CA21303A25CA21307A25C130F131F001FB5
12F0A2302D7FAC29>84 D<90260FFFFCEB7FFFA29026007FC0EB0FF06E48148018006E6C
131E1718020F5C6F5B02075C6F485A020349C7FCEDF8065E6E6C5A5E6E6C5A5EED7F8093
C8FC6F7EA26F7E153F156FEDCFE0EC018791380307F0EC0703020E7F141C4A6C7E14704A
6C7E495A4948137F49C7FC010E6E7E5B496E7E5BD801F081D807F8143FD8FFFE0103B5FC
A2382D7EAC3A>88 D<EB07E0EB1FF890387C1CE0EBF80D3801F00F3803E007EA07C0120F
D81F8013C0A2EA3F00140F481480127EA2141F00FE14005AA2EC3F02EC3E06A25AEC7E0E
007CEBFE0C14FC0101131C393E07BE18391F0E1E38390FFC0FF03903F003C01F1F7D9D25
>97 D<EB01F8EB0FFE90383E0780EB7C01D801F813C03803F0073807E00FEA0FC0018013
80121F48C8FCA25A127EA312FE5AA51560007C14E0EC01C0EC03806CEB0F00001E131C38
0F81F83807FFE0C648C7FC1B1F7D9D1F>99 D<EB03F8EB0FFE90383E0780EBF803D801F0
13C03803E001EA07C0000F1303D81F8013801407393F000F00141E387F01FCEBFFF091C7
FC007EC8FC12FE5AA4127C156015E0EC01C06CEB0380EC0F006C131C380F81F83803FFE0
C648C7FC1B1F7D9D21>101 D<157C4AB4FC913807C380EC0F87150FEC1F1FA391383E0E
0092C7FCA3147E147CA414FC90383FFFF8A2D900F8C7FCA313015CA413035CA413075CA5
130F5CA4131F91C8FCA4133EA3EA383C12FC5BA25B12F0EAE1E0EA7FC0001FC9FC213D7C
AE22>I<1307EB0F80EB1FC0A2EB0F80EB070090C7FCA9EA01E0EA07F8EA0E3CEA1C3E12
3812301270EA607EEAE07C12C013FC485A120012015B12035BA21207EBC04014C0120F13
801381381F01801303EB0700EA0F06131EEA07F8EA01F0122E7EAC18>105
D<15E0EC01F01403A3EC01C091C7FCA9147CEB03FE9038078F80EB0E07131C013813C013
30EB700F0160138013E013C0EB801F13001500A25CA2143EA2147EA2147CA214FCA25CA2
1301A25CA21303A25CA2130700385BEAFC0F5C49C7FCEAF83EEAF0F8EA7FF0EA1F801C3B
81AC1D>I<131FEA03FFA2EA003FA2133EA2137EA2137CA213FCA25BA2120115F89038F0
03FCEC0F0E0003EB1C1EEC387EEBE07014E03807E1C09038E3803849C7FC13CEEA0FDC13
F8A2EBFF80381F9FE0EB83F0EB01F81300481404150C123EA2007E141C1518007CEBF038
ECF83000FC1470EC78E048EB3FC00070EB0F801F2F7DAD25>I<137CEA0FFCA21200A213
F8A21201A213F0A21203A213E0A21207A213C0A2120FA21380A2121FA21300A25AA2123E
A2127EA2127CA2EAFC08131812F8A21338133012F01370EAF860EA78E0EA3FC0EA0F000E
2F7DAD15>I<3907C007E0391FE03FF83918F8783E393879E01E39307B801F38707F0012
6013FEEAE0FC12C05B00815C0001143E5BA20003147E157C5B15FC0007ECF8081618EBC0
0115F0000F1538913803E0300180147016E0001F010113C015E390C7EAFF00000E143E25
1F7E9D2B>110 D<90387C01F89038FE07FE3901CF8E0F3A03879C0780D907B813C00007
13F000069038E003E0EB0FC0000E1380120CA2D8081F130712001400A249130F16C0133E
A2017EEB1F80A2017C14005D01FC133E5D15FC6D485A3901FF03E09038FB87C0D9F1FFC7
FCEBF0FC000390C8FCA25BA21207A25BA2120FA2EAFFFCA2232B829D24>112
D<3807C01F390FF07FC0391CF8E0E0383879C138307B8738707F07EA607E13FC00E0EB03
804848C7FCA2128112015BA21203A25BA21207A25BA2120FA25BA2121FA290C8FC120E1B
1F7E9D20>114 D<EB07E0EB3FF8EB781EEBF0063801E0073803C00F141FA20007131E14
0CEBE00013F8EBFF806C13E06C13F06C13F8EB3FFC13011300147C0078133C12FCA2147C
48137800E013F814F0386001E0387807C0381FFF00EA07F8181F7C9D21>I<EA01E0D807
F8130ED80E3C131FD81C3E133F0038143E12301270D8607E137ED8E07C137C12C013FC48
4813FC000014F812015B1401000314F013E0A21403000714E013C0A2140715C00003130F
EBE01F143F3901F07F8038007FEFEB1F8FEB001F1500A2003E133EA2007E5B5C387C01F0
387003E0383007C0383C0F80D80FFEC7FCEA03F0202C7E9D23>121
D E /Fi 40 122 df<EDFFF8020F13FF027F8049B612E001079038C01FF090390FFE0007
D91FF8497ED93FE0131F4948497E13FF5C5A91C7FCA2705A705AEE03C093C8FCA6EE03FC
B8FCA50001903880001F160FB3AB007FD9FE03B512F0A534407EBF3A>12
D<EC01FE913807FF80021F7F027F7F9138FFC3F0491301D903FE7FECFC000107804A137C
130FA2131FA316FC5E15015E6E485A15074B5A4B5A6D6C48CAFC037E91383FFFFE5D6E5A
5D6D5B4B9138007C004B15FC6D6D4A5A616D6D1403496D4A5A010F5F496D140F496C6C4A
5A017E94C7FC496C6C5C00036E147E48486C6D5B000F6D5D001FEDC00148486C6D485A6E
6D485A007F03F85B6EEBFC0F00FF6D6D485A037F49C8FC92383FFF7E6F5B6D6D5B6F4914
7C6F7F6C6C6D7F6F6D14F86C6C499038FF80016C6C010FECE0036CD9C07F9138F81FF06C
90B500E390B512E06C038015C0C69126FE001F1480013F01F80103EBFE00010701809038
003FF047417CBF51>38 D<EA0FC0EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0
EA0FC00E0E798D1D>46 D<140F143F5C495A130F48B5FCB6FCA313F7EAFE071200B3B3A8
B712F0A5243C78BB34>49 D<903803FF80013F13F890B512FE00036E7E4881260FF80F7F
261FC0037F4848C67F486C6D7E6D6D7E487E6D6D7EA26F1380A46C5A6C5A6C5A0007C7FC
C8FC4B1300A25E153F5E4B5AA24B5A5E4A5B4A5B4A48C7FC5D4A5AEC1FE04A5A4A5A9139
FF000F80EB01FC495A4948EB1F00495AEB1F8049C7FC017E5C5B48B7FC485D5A5A5A5A5A
B7FC5EA4293C7BBB34>I<903801FFE0010F13FE013F6D7E90B612E04801817F3A03FC00
7FF8D807F06D7E82D80FFC131F6D80121F7FA56C5A5E6C48133FD801F05CC8FC4B5A5E4B
5A4A5B020F5B902607FFFEC7FC15F815FEEDFFC0D9000113F06E6C7E6F7E6F7E6F7E1780
A26F13C0A217E0EA0FC0487E487E487E487EA317C0A25D491580127F49491300D83FC049
5A6C6C495A3A0FFE01FFF86CB65A6C5DC61580013F49C7FC010313E02B3D7CBB34>I<ED
01F815031507A2150F151F153FA2157F15FF5C5CA25C5CEC1FBFEC3F3F143E147C14FCEB
01F814F0EB03E01307EB0FC0EB1F801400133E137E5B485A5B485A1207485A5B48C7FC5A
127E5AB812F8A5C8387FF800AA49B612F8A52D3C7DBB34>I<121F7F13F890B712F0A45A
17E017C0178017005E5E5A007EC7EA01F84B5A007C4A5A4B5A4B5A93C7FC485C157E5DC7
485A4A5AA24A5A140F5D141F143F5D147FA214FF92C8FC5BA25BA3495AA3130FA5131FAA
6D5A6D5A6D5A2C3F7ABD34>55 D<EA0FC0EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0
EA1FE0EA0FC0C7FCACEA0FC0EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA0F
C00E2879A71D>58 D<922607FFC0130E92B500FC131E020702FF133E023FEDC07E91B7EA
E1FE01039138803FFB499039F80003FF4901C01300013F90C8127F4948151FD9FFF8150F
48491507485B4A1503481701485B18004890CAFC197E5A5B193E127FA349170012FFAC12
7F7F193EA2123FA27F6C187E197C6C7F19FC6C6D16F86C6D150119F06C6D15036C6DED07
E0D97FFEED0FC06D6CED3F80010F01C0ECFF006D01F8EB03FE6D9039FF801FFC010091B5
5A023F15E002071580020002FCC7FC030713C03F407ABE4C>67 D<B812F8EFFF8018F018
FC18FF26003FFCC76C13C005077F05017F716C7E727E727E727E721380A27213C0A27213
E0A21AF084A21AF8A41AFCA5197FA319FFA51AF8A41AF0A2601AE0A24E13C0A24E13804E
1300604E5A4E5A4D485A050713E0057F5BBA5A4EC7FC18F818C005F8C8FC463E7DBD50>
I<B912FEA48426003FFEC77E170F1703170084A284F01F80A3180FA2EE07C0A2F007C0A4
040F90C7FCA2161F163F16FF91B6FCA54AC6FC163F161F160FA21607A693C9FCACB712E0
A53A3D7DBC42>70 D<922607FFC0130E92B500FC131E020702FF133E023FEDC07E91B7EA
E1FE01039138803FFB499039F80003FF4901C01300013F90C8127F4948151FD9FFF8150F
48491507485B4A1503481701485B18004890CAFC197E5A5B193E127FA34994C7FC12FFAB
0407B612FC127F7FA3003F92C7383FFE00A27F7EA26C7FA26C7F6C7FA26C7F6C7FD97FFE
157F6D6C7E010F01E014FF6D01F813036D9038FF801F010091B512F3023F15C00207ED80
3E02009138FE000E030701E090C7FC46407ABE52>I<B7D8803FB612E0A526003FFEC800
0FEB8000B3A491B9FCA54AC8120FB3A7B7D8803FB612E0A54B3E7DBD52>I<B712E0A526
003FFEC9FCB3AD183EA4187E187CA418FCA21701A2EF03F8A21707170F171F177FEE01FF
160FB9FC18F0A4373E7DBD3F>76 D<B6051FB512C06F5EA26F5EA2D8003F97C7FC6F16F7
A26E6CED01E7A26E6CED03C7A36E6CED0787A26E6CED0F07A26E6C151EA36E6D143CA26E
6D1478A26E6D14F0A26F6CEB01E0A36F6CEB03C0A26F6CEB0780A26F6CEB0F00A36F6C13
1EA26F6D5AA26F6D5AA26F6D5AA393387FF1E0A293383FFBC0A270B45AA37090C7FCA270
5AA2705AB600C0031FB612C0A2705AA2705A5A3E7CBD63>I<ED3FFF0203B512F0021F14
FE027F6E7E902701FFF80713E00107D9C00013F84990C7EA3FFCD93FFCEC0FFF49486E7F
49486E7F48496E7F4A80488448496F7EA24890C96C7E4884A249161F003F84A348487013
80A400FF19C0AD007F19806D5EA3003F1900A26D5E6C60A26C6D4B5AA26C6D4B5A6C6D4A
5BA26C6D4A5B6C6D4A5B6D6C4A5B6DB4023F90C7FC6D01C0EBFFFE0107D9F80713F80101
90B612E06D5E021F4AC8FC020314F0DA003F90C9FC42407ABE4F>79
D<B812F017FF18C018F018FC26003FFCC77FEF1FFF7113807113C07113E0A27113F0A319
F8A819F0A34D13E019C05F4D1380053F1300EFFFFE91B712F860188005FCC7FC4ACAFCB3
A4B77EA53D3E7DBD47>I<B87E17FCEFFF8018F08428003FFC000113FE9338003FFF050F
7F717F717FA2858385A761A25F61614D5B4D90C8FCEF3FFE4CB45A91B712F018C04DC9FC
717E9126FC000F7F040113F0707F717EA2717EA2717EA685A6F207C019C0A271140F07E0
1380B76DEBF01F719038FC3F007190B5FC716C5B061F13F8CB000113E04A3F7DBD4E>82
D<B76C90B61280A526003FFEC9003EC7FCB3B3A4197E011F177C80A26D17FC616D6D1401
4E5A6D6D4A5A6D6D140F6D01F8EC3FC0DA7FFEECFF8091273FFFC00F90C8FC020F90B512
FC02035D020015E0031F1480030101F8C9FC493F7DBD50>85 D<903807FFC0013F13F848
B6FC48812607FE037F260FF8007F6DEB3FF0486C806F7EA36F7EA26C5A6C5AEA01E0C8FC
153F91B5FC130F137F3901FFFE0F4813E0000F1380381FFE00485A5B485A12FF5BA4151F
7F007F143F6D90387BFF806C6C01FB13FE391FFF07F36CEBFFE100031480C6EC003FD91F
F890C7FC2F2B7DA933>97 D<13FFB5FCA512077EAFEDFFE0020713FC021FEBFF80027F80
DAFF8113F09139FC003FF802F06D7E4A6D7E4A13074A80701380A218C082A318E0AA18C0
A25E1880A218005E6E5C6E495A6E495A02FCEB7FF0903AFCFF01FFE0496CB55AD9F01F91
C7FCD9E00713FCC7000113C033407DBE3A>I<EC7FF00107B5FC011F14C0017F14E09039
FFF01FF0489038800FF848EB001F4848EB3FFC120F485AA2485AA2007FEC1FF849EB0FF0
ED03C000FF91C7FCAB127F7FA3003F153E7F001F157E6C6C147C6C6C14FC91388001F86C
9038C003F0C69038F81FE06DB512C0011F14800107EBFE009038007FF0272B7DA92E>I<
EE07F8ED07FFA5ED003F161FAFEC7FF0903807FFFE011FEBFF9F017F14DF9039FFF01FFF
48EBC00348EB00014848EB007F485A001F153F5B123FA2127F5BA212FFAA127FA37F123F
A26C6C147F120F6D14FF6C6C01037F6C6D48EBFFE06CEBF03F6C6CB512BF6D143F010713
FC010001E0EBE00033407DBE3A>I<ECFFF0010713FE011F6D7E017F809039FFE07FE048
9038801FF048496C7E48486D7E48486D7E121F491301003F81A2485A6F1380A212FFA290
B7FCA401F0C9FCA5127FA27F123FEE0F806C7E161F6C6C15006C6C5C6C6D137E6C9038E0
01FC6C9038F80FF8013FB55A6D14C0010391C7FC9038007FF8292B7DA930>I<903A03FF
8007F0013F9038F83FF8499038FCFFFC48B712FE48018313F93A07FC007FC34848EB3FE1
001FEDF1FC4990381FF0F81700003F81A7001F5DA26D133F000F5D6C6C495A3A03FF83FF
8091B5C7FC4814FC01BF5BD80F03138090CAFCA2487EA27F13F06CB6FC16F016FC6C15FF
17806C16C06C16E01207001F16F0393FE000034848EB003F49EC1FF800FF150F90C81207
A56C6CEC0FF06D141F003F16E001F0147FD81FFC903801FFC02707FF800F13006C90B55A
C615F8013F14E0010101FCC7FC2F3D7DA834>103 D<13FFB5FCA512077EAFED1FF8EDFF
FE02036D7E4A80DA0FE07F91381F007F023C805C4A6D7E5CA25CA35CB3A4B5D8FE0FB512
E0A5333F7CBE3A>I<EA01F8487E487E487E481380A66C13006C5A6C5A6C5AC8FCA913FF
B5FCA512077EB3ABB512F8A515407CBF1D>I<EC0FC0EC1FE0EC3FF0EC7FF8ECFFFCA6EC
7FF8EC3FF0EC1FE0EC0FC091C7FCA9EC03FCEB07FFA5EB001F140FB3B3A2EA1F80EA3FC0
EA7FE0EAFFF0EC1FF8A3EC3FF015E0397FE07FC0393FC1FF806CB512006C5B6C13F8C613
801E5386BF20>I<13FFB5FCA512077EB3B3AFB512FCA5163F7CBE1D>108
D<01FFD91FF8ECFFC0B590B5010713F80203DAC01F13FE4A6E487FDA0FE09026F07F077F
91261F003FEBF8010007013EDAF9F0806C0178ECFBC04A6DB4486C7FA24A92C7FC4A5CA3
4A5CB3A4B5D8FE07B5D8F03FEBFF80A551297CA858>I<01FFEB1FF8B5EBFFFE02036D7E
4A80DA0FE07F91381F007F0007013C806C5B4A6D7E5CA25CA35CB3A4B5D8FE0FB512E0A5
33297CA83A>I<EC7FF0903803FFFE011FEBFFC0017F14F09039FFE03FF8489038800FFC
3A03FE0003FE48486D7E000F168048486D13C0A2003F16E049147F007F16F0A400FF16F8
AA007F16F0A46C6CECFFE0A2001F16C06C6C491380A26C6C4913003A03FF800FFE6C9038
E03FFC6C6CB512F0011F14C0010791C7FC9038007FF02D2B7DA934>I<01FFEBFFE0B500
0713FC021FEBFF80027F80DAFF8113F09139FC007FF8000301F06D7E4A6D7E4A130F4A6D
7E1880A27013C0A38218E0AA4C13C0A318805E18005E6E5C6E495A6E495A02FCEBFFF0DA
FF035B92B55A029F91C7FC028713FC028113C00280C9FCACB512FEA5333B7DA83A>I<39
01FE01FE00FF903807FF804A13E04A13F0EC3F1F91387C3FF8000713F8000313F0EBFFE0
A29138C01FF0ED0FE091388007C092C7FCA391C8FCB3A2B6FCA525297DA82B>114
D<90383FFC1E48B512BE000714FE5A381FF00F383F800148C7FC007E147EA200FE143EA2
7E7F6D90C7FC13F8EBFFE06C13FF15C06C14F06C806C806C806C80C61580131F13000207
13C014000078147F00F8143F151F7EA27E16806C143F6D140001E013FF9038F803FE90B5
5A15F0D8F87F13C026E00FFEC7FC222B7DA929>I<EB07C0A5130FA4131FA3133F137FA2
13FF5A1207001FEBFFFEB6FCA40001EBC000B3151FA96CEBE03EA2017F137EECF8FC9038
3FFFF86D13F0010713E001001380203B7EB929>I<D9FF80EB0FF8B5EB0FFFA50007EC00
7F6C153FB3A5167FA316FF6C5C4B7F6C903AC007DFFFE09138F01F9F6DB5121F6D13FE01
0F13F8010101E0EBE000332A7CA83A>I<B500FC90383FFFC0A5000101C0903803E0006E
1307A26C5E6E130F017F5D6E131F013F92C7FC6E5B011F143E6E137E010F147C6E13FCA2
6D5C15816D5C15C36D5C15E76D5C15FF6E5BA36E90C8FCA26E5AA26E5AA26E5AA26E5AA2
32287EA737>I<B500FC90383FFFC0A5000101C0903803E0006E1307A26C5E6E130F017F
5D6E131F013F92C7FC6E5B011F143E6E137E010F147C6E13FCA26D5C15816D5C15C36D5C
15E76D5C15FF6E5BA36E90C8FCA26E5AA26E5AA26E5AA26E5AA35D14075D000E130FD83F
805B387FC01FD8FFE090C9FC5C143E147E5CEBC1F8387FC3F0387E0FE06CB45A6C5B6C48
CAFCEA03F8323B7EA737>121 D E /Fj 37 119 df<ED0FFF4AB512C0020F14F0027F80
903A01FFF803FC499038C000FE010FEB00034948497E49485B5C495A4C138001FF6E1300
5CA3705AEE01F893C8FCA74BB51280B9FCA5C69038E00003B3B0007FD9FFC1B6FCA53846
7EC53E>12 D<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F0F
788E1F>46 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003B3B3ADB712FCA526
4177C038>49 D<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC0313FE3A0FE000
7FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F17F881A46C5A6C
5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A4B5A4A90C7FC4A
5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F0495A495A49C8FC01
7C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<ECFFF0010713FF
011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D138013FE001F16C0
7FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F1380902607FFFEC7FC15
F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A217F8A3EA0FC0EA
3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81FF0491300D80FFE
EBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>I<0007150301E0
143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF001C1
B5FC01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C0497F6C
4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B007EC7
4813C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D013F14
80010F01FCC7FC010113C02D427BC038>53 D<121E121F13FC90B712FEA45A17FC17F817
F017E017C0A2481680007EC8EA3F00007C157E5E00785D15014B5A00F84A5A484A5A5E15
1FC848C7FC157E5DA24A5A14035D14074A5AA2141F5D143FA2147F5D14FFA25BA35B92C8
FCA35BA55BAA6D5A6D5A6D5A2F447AC238>55 D<DCFFF01470031F01FF14F04AB6EAE001
0207EDF803023FEDFE0791B539E001FF0F4949C7EA3F9F010701F0EC0FFF4901C0804990
C87E4948814948814948167F4849163F4849161F5A4A160F485B19074890CAFC19035A5B
A2007F1801A34994C7FC12FFAE127F7F1AF0A2123FA27F6C18011AE06C7F19036C6D17C0
6E16077E6C6DEE0F806C6DEE1F006D6C5E6D6C167E6D6C6C5D6D6D4A5A6D01F0EC07F001
0101FEEC1FE06D903AFFF001FF80023F90B6C7FC020715FC020115F0DA001F1480030001
F8C8FC44467AC451>67 D<B9FC18F018FE727E19E026003FFEC7001F13F805017F943800
3FFF060F7F727F727F727F84737E737EA2737EA2737EA21B80A2851BC0A51BE0AD1BC0A5
1B8061A21B006162193F624F5A19FF624E5B06075B4E5B063F90C7FC4DB45A050F13F8BA
5A19C04EC8FC18F095C9FC4B447CC356>I<BA1280A419C026003FFEC7121F1701EF007F
183F181F180F180719E01803A31801A3EE01E0F000F0A419001603A31607160F167F91B6
FCA59138FE007F160F16071603A31601A693C9FCAFB712F0A53C447CC346>70
D<B7D88003B612FEA526003FFEC9EBF800B3A791B9FCA54AC9FCB3AAB7D88003B612FEA5
4F447CC358>72 D<B712E0A5D8001F90C7FCB3B3B3A4B712E0A523447DC32A>I<B712F0
A526003FFECAFCB3B1F00780A4180F1900A460A360A2187EA218FE170117031707171F17
7FEE03FFB95AA539447CC343>76 D<B500FE067FB512806E95B6FCA26F5EA2D8003F50C7
FC013D6DEE03DFA2013C6DEE079FA26E6CEE0F1FA26E6C161EA26E6C163CA36E6C1678A2
6E6C16F0A26E6DEC01E0A26E6DEC03C0A36E6DEC0780A26F6CEC0F00A26F6C141EA26F6C
5CA36F6C5CA26F6C5CA26F6D485AA26F6D485AA26F6D485AA3706C48C7FCA293383FF81E
A2706C5AA2706C5AA3706C5AA2705BA2705BA2705BA2B6057FB6128071C7FCA2173E171C
61447CC36A>I<923807FFC092B512FE0207ECFFC0021F15F091267FFE0013FC902601FF
F0EB1FFF01070180010313C04990C76C7FD91FFC6E6C7E49486F7E49486F7E01FF834849
6F7E48496F1380A248496F13C0A24890C96C13E0A24819F04982003F19F8A3007F19FC49
177FA400FF19FEAD007F19FC6D17FFA3003F19F8A26D5E6C19F0A26E5D6C19E0A26C6D4B
13C06C19806E5D6C6D4B13006C6D4B5A6D6C4B5A6D6C4B5A6D6C4A5B6D01C001075B6D01
F0011F5B010101FE90B5C7FC6D90B65A023F15F8020715C002004AC8FC030713C047467A
C454>79 D<B9FC18F018FE727E19E0D8001F90C7000F7F05017F716C7E727E727E721380
A21AC084A21AE0A91AC0A24E1380A21A00604E5A4E5A4D485A050F5B92B712C096C7FC18
FC18C092CBFCB3A7B712E0A543447DC34D>I<B812F8EFFFC018F818FE727ED8001F90C7
003F13E005037F05007F727E727E727EA28684A286A762A24E90C7FCA24E5A61187F9438
01FFF005075B053F138092B7C8FC18F818E018F892C77FEF3FFF050F7F717F717FA2717F
A2717FA785A61B0F85A2187F73131F72141EB700E06DEB803E72EBE0FC72EBFFF8060114
F0726C13E0CC0007138050457DC354>82 D<DAFFE0131C010701FE133C013F9038FF807C
90B6EAE0FC4815F9489038801FFF3907FC00014848EB007F4848143F4848140F49140700
7F15035B1601160012FF177CA27FA26D153C7F7F6D92C7FC6C7EEBFFE014FE6CEBFFF015
FF6C15E016FC6C816C6F7E6C826C826C6C81011F810107811300020F80140003077FED00
7F82040F1380828212F082A282A27EA218007EA26C5D6C5E6D14036D5D6D140701F84A5A
01FFEC3FF002F8EBFFE0486CB65AD8FC1F92C7FCD8F80714FC48C614F048010713803146
7AC43E>I<903801FFE0011F13FE017F6D7E48B612E03A03FE007FF84848EB1FFC6D6D7E
486C6D7EA26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6FC1307013F13F19038
FFFC01000313E0000F1380381FFE00485A5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D8
3FFE013EEBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007D90FFCC9FC322F7DAD
36>97 D<EB7FC0B5FCA512037EB1ED0FF892B57E02C314E002CF14F89139DFC03FFC9139
FF000FFE02FCEB03FF4A6D13804A15C04A6D13E05CEF7FF0A218F8173FA318FCAC18F8A2
177F18F0A3EFFFE06E15C06E5B6E491380027C491300496C495A903AFC1FC07FFC496CB5
12F0D9F00314C049C691C7FCC8EA1FF036467DC43E>I<EC3FFC49B512C0010F14F0013F
14FC90397FF003FE9039FFC001FF0003495A48494813805B120F485AA2485A6F1300007F
6E5AED00784991C7FCA212FFAC6C7EA3123F6DEC03C0A26C6C1407000F16806D140F6C6D
EB1F006C6D133E6C01F05B3A007FFC03F86DB55A010F14C0010391C7FC9038003FF82A2F
7CAD32>I<EE03FEED07FFA5ED001F160FB1EC3FE0903803FFFC010FEBFF8F013F14CF90
39FFF807FF48EBC00148903880007F4890C7123F4848141F49140F121F485AA3127F5BA2
12FFAC127FA37F123FA26C6C141FA26C6C143F0007157F6C6C91B5FC6CD9C00314FC6C90
38F01FEF6DB5128F011FEBFE0F010713F89026007FC0EBF80036467CC43E>I<EC3FF801
03B57E010F14E0013F8090397FF83FF89039FFC007FC48496C7E48496C7E48486D138048
5A001FED7FC05B003FED3FE0A2127F5B17F0161F12FFA290B7FCA401F0C9FCA5127FA27F
A2123F17F06C7E16016C6C15E06C6C14036C6DEB07C06C6DEB0F806C01F0EB3F0090397F
FE01FE011FB55A010714F0010114C09026001FFEC7FC2C2F7DAD33>I<EDFF80020F13E0
027F13F049B512F849EB8FFC90390FFE0FFE90381FFC1F14F8133FEB7FF0A2ED0FFCEBFF
E0ED03F0ED00C01600ABB612F8A5C601E0C7FCB3B0007FEBFFE0A527467DC522>I<DAFF
E0137E010F9039FE03FF80013FEBFF8F90B812C048D9C07F133F489038001FF84848EB0F
FC4848903907FE1F80001F9238FF0F00496D90C7FCA2003F82A8001F93C7FCA26D5B000F
5D6C6C495A6C6C495A6C9038C07FF04890B55A1680D8078F49C8FC018013E0000F90CAFC
A47F7F7F90B612C016FC6CEDFF8017E06C826C16FC7E000382000F82D81FF0C77ED83FC0
14074848020113808248C9FC177FA46D15FF007F17006D5C6C6C4A5A6C6C4A5AD80FFEEC
3FF83B07FFC001FFF0000190B612C06C6C92C7FC010F14F8D9007F90C8FC32427DAC38>
I<EB7FC0B5FCA512037EB1ED07FE92383FFF8092B512E002C114F89139C7F03FFC9138CF
801F9139DF000FFE14DE14FC4A6D7E5CA25CA35CB3A7B60083B512FEA537457CC43E>I<
137C48B4FC4813804813C0A24813E0A56C13C0A26C13806C1300EA007C90C7FCAAEB7FC0
EA7FFFA512037EB3AFB6FCA518467CC520>I<EC03E0EC0FF8EC1FFCEC3FFEA2EC7FFFA5
EC3FFEA2EC1FFCEC0FF8EC03E091C7FCAAEC01FF0103B5FCA5EB000F80B3B3A7EA1F80EA
3FC0EA7FE0EAFFF0EC0FFEA215FC141F01E013F8007FEB3FF0393FC0FFE06CB512806C14
00000313FCC613C0205A86C522>I<EB7FC0B5FCA512037EB3B3B3A3B61280A519457CC4
20>108 D<90277F8007FEEC0FFCB590263FFFC090387FFF8092B5D8F001B512E002816E
4880913D87F01FFC0FE03FF8913D8FC00FFE1F801FFC0003D99F009026FF3E007F6C019E
6D013C130F02BC5D02F86D496D7EA24A5D4A5DA34A5DB3A7B60081B60003B512FEA5572D
7CAC5E>I<90397F8007FEB590383FFF8092B512E0028114F8913987F03FFC91388F801F
000390399F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E
>I<EC1FFC49B512C0010714F0011F14FC90397FF80FFF9026FFC0017F48496C7F4848C7
EA3FE000078248486E7E49140F001F82A2003F82491407007F82A400FF1780AA007F1700
A46C6C4A5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90
C7FC6DB55A010F14F8010114C09026001FFCC8FC312F7DAD38>I<90387F807FB53881FF
E0028313F0028F13F8ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED0FFC9138E007
F8ED01E092C7FCA35CB3A5B612E0A5272D7DAC2E>114 D<90391FFC038090B512870003
14FF120F381FF003383FC00049133F48C7121F127E00FE140FA215077EA27F01E090C7FC
13FE387FFFF014FF6C14C015F06C14FC6C800003806C15806C7E010F14C0EB003F020313
E0140000F0143FA26C141F150FA27EA26C15C06C141FA26DEB3F8001E0EB7F009038F803
FE90B55A00FC5CD8F03F13E026E007FEC7FC232F7CAD2C>I<EB01E0A51303A41307A213
0FA2131FA2133F137F13FF1203000F90B51280B7FCA4C601E0C7FCB3A3ED01E0A9150302
F013C0137F150790393FF80F8090391FFC1F006DB5FC6D13FC01015B9038003FE023407E
BE2C>I<D97FC049B4FCB50103B5FCA50003EC000F6C81B3A85EA25EA25E7E6E49138001
7FD901F713FE9138F807E76DB512C7010F1407010313FE9026007FF0EBFC00372E7CAC3E
>I<B6903803FFFCA5000101E09038003E006C163C80017F5D8017F8013F5D6E1301011F
5D6E1303010F5D6E13076D5DED800F6D92C7FC15C05E6DEBE01E163E6D143CEDF07C027F
1378EDF8F8023F5B15FD021F5B15FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA21578362C
7EAB3B>I E /Fk 50 123 df<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A798919>
58 D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380120313
005A120E5A1218123812300B1C798919>I<1806181F187FEF01FFEF07FCEF1FF0EF7FC0
933801FF00EE07FCEE3FF0EEFFC0030390C7FCED0FFCED3FE0EDFF80DA03FEC8FCEC0FF8
EC7FE0903801FF80D907FEC9FCEB1FF8EB7FC04848CAFCEA07FCEA1FF0EA7FC048CBFCA2
EA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF8EB07FE903801FF809038007FE0EC0FF8EC
03FE913800FF80ED3FE0ED0FFCED03FF030013C0EE3FF0EE07FCEE01FF9338007FC0EF1F
F0EF07FCEF01FFEF007F181F1806383679B147>I<ED0180ED03C01507A21680150FA216
005DA2151E153EA2153C157CA2157815F8A25D1401A25D1403A25D1407A25D140FA24AC7
FCA2141E143EA2143C147CA2147814F8A25C1301A25C1303A25C1307A25C130FA291C8FC
5BA2131E133EA25BA2137813F8A25B1201A25B1203A25B1207A25B120FA290C9FC5AA212
1E123EA2123C127CA2127812F8A25A1260225B7BC32D>I<126012F812FE6C7EEA3FE0EA
0FF8EA03FEC66C7EEB3FE0EB0FFCEB03FF010013C0EC3FF0EC07FCEC01FF9138007FC0ED
1FF0ED07FE923801FF809238007FE0EE1FF8EE03FE933800FF80EF3FE0EF0FF8EF03FEEF
00FFA2EF03FEEF0FF8EF3FE0EFFF80933803FE00EE1FF8EE7FE0923801FF80DB07FEC7FC
ED1FF0ED7FC04A48C8FCEC07FCEC3FF0ECFFC0010390C9FCEB0FFCEB3FE0EBFF80D803FE
CAFCEA0FF8EA3FE0EAFF8048CBFC12F81260383679B147>I<17075F84171FA2173F177F
A217FFA25E5EA24C6C7EA2EE0E3F161E161C1638A21670A216E0ED01C084ED0380171FED
07005D150E5DA25D157815705D844A5A170F4A5A4AC7FC92B6FC5CA2021CC7120F143C14
384A81A24A140713015C495AA249C8FC5B130E131E4982137C13FED807FFED1FFEB500F0
0107B512FCA219F83E417DC044>65 D<49B712F818FF19E090260001FEC7EA3FF0F007F8
4B6E7E727E850203815D1A80A20207167F4B15FFA3020F17004B5C611803021F5E4B4A5A
180FF01FE0023F4B5A4B4A5ADD01FEC7FCEF07F8027FEC7FE092B6C8FC18E092C7EA07F8
4AEC01FE4A6E7E727E727E13014A82181FA213034A82A301075F4A153FA261010F167F4A
5E18FF4D90C7FC011F5E4A14034D5A013FED1FF04D5A4AECFFC0017F020790C8FCB812FC
17F094C9FC413E7DBD45>I<DC1FF81307923801FFFE030F9038FF800E923A7FF007E01E
4A48C7EAF03EDA03FCEC787EDA0FF0EC3CFCDA3FC0141F4A48140F4AC8FC4948ED07F8EB
07F849481503131F4A16F049481501495A13FF4890C913E05B1203485A19C0485AA2485A
95C7FC123F5BA2127F5BA312FF5BA590CCFC183CA21838A21878187018F06C6C5E17014D
5A003F5F6D15074DC7FC001F161E6C6C5D6D5D6C6C5D00034B5AD801FEEC07C06C6C4AC8
FCD97FC0137E90391FF803F80107B512E0010114809026001FF8C9FC40427BBF41>I<49
B712F818FF19C0D9000190C7EA3FF0F00FF84BEC03FCF000FE197F0203EE3F805DF11FC0
A20207EE0FE05D1AF0A2020F16075DA21AF8141F5DA2190F143F5DA21AF0147F4B151FA3
02FF17E092C9123FA21AC049177F5C1A8019FF010318005C4E5A61010716034A5E4E5A18
0F010F4C5A4A5E4E5A4EC7FC011F16FE4A4A5AEF07F8013FED0FE0EF3FC04A49B4C8FC01
7FEC0FFCB812F017C004FCC9FC453E7DBD4B>I<49B9FCA3D9000190C7120718004B157F
193F191E14035DA314075D191CA2140F5D17074D133C021F020E13384B1500A2171E023F
141C4B133C177C17FC027FEB03F892B5FCA39139FF8003F0ED00011600A2495D5CA21601
01035D5CA293C9FC13075CA3130F5CA3131F5CA2133FA25C497EB612F8A3403E7DBD3A>
70 D<DC3FF0130E923803FFFE031F9038FF801C923A7FF00FC03C913B01FF0001E07CDA
07FC903800F0FCDA0FF0EC79F8DA3FC0143F4A48141F4AC8120FD903FC16F0495A494815
07495A013F17E04A1503495A49C9FC4818C05B1203485A1980485AA2485A95C7FC123F5B
A2127F5BA312FF5BA3043FB512E0A290C8FC9339001FF800170F60A2171FA260A26C6C15
3FA2606C7E177F121F6D5E6C6C15FF00075D6C6C5C6C6CDA07BFC7FC6CB4EC1F1FD97FC0
EB7E0F90391FF803F80107B5EAE00601010280C8FC9026001FF8C9FC3F427BBF48>I<49
B6D8C03FB512F81BF01780D900010180C7383FF00093C85B4B5EA2197F14034B5EA219FF
14074B93C7FCA260140F4B5DA21803141F4B5DA21807143F4B5DA2180F4AB7FC61A20380
C7121F14FF92C85BA2183F5B4A5EA2187F13034A5EA218FF13074A93C8FCA25F130F4A5D
A21703131F4A5DA2013F1507A24A5D496C4A7EB6D8E01FB512FCA2614D3E7DBD4C>I<49
B612C05BA2D90001EB800093C7FC5DA314035DA314075DA3140F5DA3141F5DA3143F5DA3
147F5DA314FF92C8FCA35B5CA313035CA313075CA3130F5CA3131F5CA2133FA25CEBFFE0
B612E0A32A3E7DBD28>I<49B612F0A3D900010180C7FC93C8FC5DA314035DA314075DA3
140F5DA3141F5DA3143F5DA3147F5DA314FF92C9FCA35B5C180C181E0103161C5C183C18
3813074A1578187018F0130F4AEC01E0A21703011FED07C04A140F171F013FED3F8017FF
4A1303017F021F1300B9FCA25F373E7DBD3E>76 D<49B56C93383FFFF05113E098B5FCD9
0001F1E000704B5B03DF933803BF80A2F2077F1403039F040E90C7FC1A1CDB8FE05E0207
5F030F4C5AA21AE1020FEE01C1020E606F6CEC03811A83021EEE0703021C040E5BA2F11C
07023C16380238606F6C1470F1E00F14780270DB01C05BA2953803801F02F0ED07004A6C
6C5E180E4E133F130102C04B5C601A7F01036D6C5B4A95C8FC4D5A4D485B130791C749C7
5A170E047F1401495D010E4B5CA24D1303131E011C4B5C5F013C023F1407017C5D01FE92
C75BD803FF4D7EB500FC013E011FB512F8163C041C5E5C3E7DBD58>I<49B56C49B512F8
1BF0A290C76D9039000FFE004AEE03F0705D735A03DF150302037F038F5E821907913807
87FC030793C7FC1503705C140F91260E01FF140EA26F151E021E80021C017F141C83193C
023C6D7E02381638161F711378147802706D6C1370A2040714F002F0804A01035C831801
0101EC01FF4A5E82188313034A91387FC380A2EF3FC7010716E791C8001F90C8FC18F718
FF4981010E5E1707A2131E011C6F5AA2013C1501137C01FE6F5AEA03FFB512FC18781870
4D3E7DBD49>I<EE3FF00303B5FC92391FC03FC092397E0007E0DA01F8EB01F8DA07E06D
7E4A48147E023FC87E027EED1F804A16C0D903F8150F494816E0495A4948ED07F0A24948
16F849C9FC5B48481603A2484817FCA2485A000F17075B121FA25B123F19F84848160FA4
4848EE1FF0A3F03FE0A390CAEA7FC0A2F0FF80A219004D5A1703604D5A6C7E4D5A4D5A00
3F5F4D5A6C6C4BC7FC17FE6C6C4A5A4C5A6C6CEC07E06C6CEC1FC06C6C4A5A6C6C02FEC8
FC90393F8003F890390FE01FE00103B5C9FC9038007FF03E427BBF45>I<49B712F018FF
19C0D9000190C76C7EF00FF84BEC03FC1801020382727E5DA214071A805DA2140F4E1300
5DA2021F5E18034B5D1807023F5E4E5A4B4A5A4E5A027F4B5A06FEC7FC4BEB03FCEF3FF0
91B712C005FCC8FC92CBFCA25BA25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2
133FA25C497EB612E0A3413E7DBD3A>I<49B77E18F818FFD90001D900017F9438003FE0
4BEC0FF0727E727E14034B6E7EA30207825DA3020F4B5A5DA24E5A141F4B4A5A614E5A02
3F4B5A4B4A5A06FEC7FCEF03FC027FEC0FF04BEBFF8092B500FCC8FC5F9139FF8001FE92
C7EA7F80EF1FC084496F7E4A1407A28413035CA2170F13075C60171F130F5CA3011F033F
5B4AEE038018E0013F17071A004A021F5B496C160EB600E090380FF01E05075B716C5ACB
EAFFE0F03F8041407DBD45>82 D<DB07FC131C92383FFF8092B5EAE038913A03F803F078
913A0FE000F8F8DA1F80133D4AC7EA1FF0027E140F5C494814074A15E0130349481403A2
010F16C05CA3011F1680A38094C7FC808014FE90380FFFC015FC6DEBFFC016F86D14FE6D
806D81023F800207801400030F7F1500163F707E160F1607A2160312075A5F120EA2001E
15075FA24C5A123E003F4B5AA26D4AC7FC007F157E6D5C6D495AD87DF0495AD8F8FCEB0F
E090393F803F8027F01FFFFEC8FCD8E00713F839C0007FC036427BBF38>I<48B912FCA2
5A913A0003FE000F01F84A1301D807E0EE00F8491307491778000F5D90C7FC001E140FA2
001C4B1470123C0038141FA200785D1270033F15F000F018E0485DC81600157FA25EA215
FFA293C9FCA25CA25DA21403A25DA21407A25DA2140FA25DA2141FA25DA2143FA25DA214
7FA214FF497F001FB612FCA25E3E3D7FBC35>I<007FB500F090387FFFFE19FC5D26007F
E0C7000313804A913800FC004A5D187001FF16F0A291C95AA2481601605BA20003160360
5BA20007160795C7FC5BA2000F5E170E5BA2001F161E171C5BA2003F163C17385BA2007F
1678A2491570A200FF16F0A290C95AA216015F5A16035F16074CC8FC160E161E5E007F5D
5E6C4A5A6D495A6C6C495A6C6C011FC9FC6C6C137E3903FC03F8C6B512E0013F1380D907
FCCAFC3F407ABD3E>I<B6017FB5D88007B51280A24A1A0000030180010101E0C7EA7FF0
49C80180EC1FC0000194C85B99C7FC1B1E1B1C63A2634C7F634C150163DC077F4A5A160F
6D020E4BC8FC161C6C190E1638620470153C04F0153804E05DED01C062DB03807F4F5A92
2607003F130362030E4BC9FC151EDA801C150E5D017F5F5D614B1578028116704B5DEC83
80F0C1C00287C713E1F0E380028EEC1FE796CAFC029C15EE14BC02F815FC5C013F5E5C60
5C604A5D91C8FC60133E95CBFC013C81170E59407BBD56>87 D<027FB5D88007B512C091
B6FCA2020101F8C7EBF8009126007FE0EC7F804C92C7FC033F157C701478616F6C495A4E
5A6F6C495A4EC8FC180E6F6C5B606F6C5B6017016F6C485A4D5A6F018FC9FC179E17BCEE
7FF85F705AA3707EA283163F167FEEF7FCED01E7EEC3FEED0383ED070392380E01FF151E
4B6C7F5D5D4A486D7E4A5A4A486D7E92C7FC140E4A6E7E5C4A6E7E14F0495A49486E7E13
07D91F806E7ED97FC014072603FFE0EC1FFF007F01FC49B512FEB55CA24A3E7EBD4B>I<
EC1F80ECFFE0903903F0707090390FC039F890381F801D90383F000F017E5C5B00011407
485A48485CA2485A001F140F5E485AA2151F007F5D5BA2153F00FF92C7FC90C7FCA25D92
387E03805AA215FEEDFC07007E0101140014035E6C0107130E140E3A1F801C7C1C000F13
783A07C1F03E383A01FFC01FF03A007F0007C029297DA730>97 D<EB1FC0EA0FFF5CA2EA
003FA291C8FCA25BA2137EA213FEA25BA21201A25BA21203A25BEC3F800007EBFFE09038
F3C1F849C67E01FE137E4848133E49133F5B491480001F141F5B5BED3FC0123FA290C7FC
A248147F1680127EA215FF00FE15005AA24A5AA25D1403485C1407007C5C4A5A5D003C49
5A003E49C7FC001E137E6C13F8380783F03803FFC0C648C8FC22407CBE27>I<EC07F0EC
7FFE903801FC0F903907E0038090390FC001C0D93F8013E090387F000701FE131F485A48
5A16C0485A000F15804990C7FC121F485AA3127F5BA312FF90C9FCA6007E1560007F15E0
1501ED03C06CEC07806DEB0F00001F141E6C6C137C3907E001F03901F01FC06CB5C7FCEB
1FF023297DA727>I<EE07F0ED03FF17E0A2ED000FA217C0A2161FA21780A2163FA21700
A25EA2167EA216FEA25EEC1F80ECFFE1903803F07190390FC039F890381F801D90383F00
0F137E495C00011407485A485A5E485A001F140FA248485CA2151F127F495CA2153F12FF
90C790C7FCA25DEE038048147EA215FE1607007ED901FC130014035E6C0107130E140E3A
1F801C7C1C000F13783A07C1F03E383A01FFC01FF03A007F0007C02C407DBE2F>I<EC1F
E0ECFFFC903803F01E90380FC00F90393F800780D97E0013C0491303EA03F81207491307
48481480121F49130F003FEC1F00153E397F8001FCEC1FF0B6128002F8C7FC90C9FCA45A
A616C01501007E1403ED07806CEC0F00151E6C5C6C6C13F83907C003E03903E03F802600
FFFEC7FCEB3FE022297CA72A>I<163EEEFFC0923803E1E0923807C0F0ED0F811687ED1F
8F160F153FA217E092387E038093C7FCA45DA514015DA30103B512FCA390260003F0C7FC
A314075DA4140F5DA5141F5DA4143F92C8FCA45C147EA414FE5CA413015CA4495AA35CEA
1E07127F5C12FF495AA200FE90C9FCEAF81EEA703EEA7878EA1FF0EA07C02C537CBF2D>
I<EC01F8EC0FFE91383F07879139FC03DF80903801F801903903F000FFEB0FE04948EB7F
005C133F49C7FC49147E5B000115FEA248485CA215011207495CA21503120F495CA21507
A25E5B0007140FA24B5A6D133F0003147F000114FF6D485B0000EB03DF90387E0F3FEB1F
FCD907F090C7FC90C7FC5DA2157EA215FEA25D001C1301007F5C4813035D4A5A4A5A4849
5A00F8017EC8FC387E01FC381FFFE0000390C9FC293B7FA72B>I<EB01FC13FF5CA21303
A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C9FC15FE90397F07FFC091381F03
E090397E3801F09138F000F8EBFFE04A7F5C91C7FC485AA25BA2484813015E5BA2000714
035E5B1507120F5E49130F5E121F031F1370491480A2003F023F13F0EE00E090C7FC1601
48023E13C01603007E1680EE070000FE5DED1F1E48EC0FF80038EC03E02C407CBE34>I<
143C14FEA21301A314FCEB00701400AD137E3801FF803803C7C0EA0703000F13E0120E12
1C13071238A2EA780F007013C0A2EAF01F14801200133F14005B137EA213FE5BA212015B
0003130E13F0A20007131EEBE01CA2143CEBC0381478147014E013C13803E3C03801FF00
EA007C173E7EBC1F>I<ED01C0ED07F0A2150FA316E0ED038092C7FCADEC03E0EC0FF8EC
3C3EEC701EECE01FEB01C001031480EB0780140049133F010E1400131E131C013C5BA290
C7127EA215FEA25DA21401A25DA21403A25DA21407A25DA2140FA25DA2141FA25DA2143F
A292C7FCA25C147EA2001C13FE007F5BEAFF015C495A495A48485A38F81F80D8783EC8FC
EA3FF8EA0FE0245081BC25>I<EB01FC13FF5CA21303A25CA21307A25CA2130FA25CA213
1FA25CA2133FA291C9FC16FC49EB03FE92380F0780017EEB3C0FED703F01FE13E0913801
C07F9038FC0380EC07000001010E14004A131C494890C7FC5C00035BEBF9C0495A01FFC9
FC5A14F0EBE3FE9038E07F80000FEB1FC06E7EEBC00781001F1303160E1380A2003F151E
0207131C010013E0A2485DA2007E01031378167000FE01015B15F1489038007F80003802
3EC7FC29407CBE2F>I<EB07F0EA03FF14E0A2EA000FA214C0A2131FA21480A2133FA214
00A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25B
A2123FA290C7FCA25AEB0380127EA212FE130700FC1300A25B130EA2EA7C1C133CEA3E38
EA1FF0EA07C014407DBE1B>I<D801F0D90FF0EB03F8D807FCD93FFEEB1FFFD80F1FD9F0
1F90387C0F80000E903C03C00F80E007C0271E0F87009039C3C003E0001C018E903807C7
80003C01DCDAEF007F003801F814EE4A14FCD8781F5D00705B4A5CA200F0494948130701
3F60000090C75BA2041F140F4960017E5D191F043F5D13FE4992C7123F97C7FC5E000195
387F01C049027E147EA204FEECFE03000306FC1380495C1A07030103F81300000761494A
150E620303163C000FF07C78494AEC3FE0D80380D900E0EC0F804A297EA750>I<D801F0
EB0FF0D807FCEB3FFED80F1FEBF01F000E903903C00F80271E0F87007F001C018E130700
3C01DC80003813F85CEA781F00705B5CA200F049130F013F5D000090C7FCA2161F495D13
7E163F94C7FC13FE495C167EA200019238FE03804914FCA203011307000303F813005B5F
EEF00E0007161E49151C5F1778000F6E6C5A49EC7FC0D80380021FC7FC31297EA737>I<
EC07F8EC7FFE903901FC0F80903907E007E090390FC003F090393F8001F8EB7F0001FEEB
00FC485A484814FEA2485A120F5B001F15FF485AA2ED01FE127F5BA2150300FF15FC90C7
FCA2ED07F8A2ED0FF0A2007E15E0007FEC1FC0ED3F80A26CEC7F006C6C13FC4A5A6C6C48
5A3907E00FC02601F03FC7FC3800FFFCEB1FE028297DA72C>I<D907C013FE903A0FF003
FF80903A1C7C0F07E0903A383C1C03F0903A783E7801F80170EBF0009026F03FE013FC01
E05B4B13FE0001017F147E01C090C7FC147E17FF000313FEA2C75AA201015C17FE5CA201
03140317FC5CA20107EC07F8A24A14F0160F010F15E0161F17C0EE3F80011F15006E137E
5E9138B801F890393FBC03E091389E0FC0DA07FFC7FCEC01F849C9FCA2137EA213FEA25B
A21201A25BA21203A2B512E0A3303A84A72E>I<91381F800C9138FFE01C903903F0707C
90390FC0387890391F801CF890383F000F137E4914F000011407485A485A16E0485A121F
150F484814C0A3007F141F491480A300FF143F90C71300A35D48147EA315FE007E495A14
03A26C13074A5A381F801D000F13793807C1F33901FFC3F038007F03130014075DA3140F
5DA3141F5DA2143F147F90381FFFFE5BA2263A7DA729>I<D801F0EB3F80D807FCEBFFE0
3A0F1F03C0F0000E90380F00F8391E0F9E03001C13BC003CEBF807003813F0A226781FE0
13F000709038C001C092C7FC5C12F0133F000090C8FCA35B137EA313FE5BA312015BA312
035BA312075BA3120F5BEA038025297EA729>I<EC1FC0ECFFF8903803E03C903807800E
90381E0007168049130F49131F153FA201F81400A2151C6D90C7FC7FEBFFE014FE90387F
FFC06D7F6D13F86D7F13039038001FFE14031400157E000C143E123F487EA248C7123CA2
5D12FC00F05C0070495A0078495A6C495A260F803EC7FC3803FFF838007FC021297CA72B
>I<147014FC1301A25CA21303A25CA21307A25CA2130FA25CA2007FB512F0B6FC15E039
001F8000133FA291C7FCA25BA2137EA213FEA25BA21201A25BA21203A25BA21207EC01C0
13E01403000F1480A2EBC0071500140E141E5C000713385C3803E1E03801FF80D8003EC7
FC1C3A7EB821>I<137C48B4EC03802603C7C0EB0FC0EA0703000F7F000E151F121C0107
15801238163FEA780F0070491400A2D8F01F5C5C0000157E133F91C712FEA2495C137E15
0113FE495CA215030001161C4914F0A21507173CEEE038150F031F1378000016706D133F
017C017313F0017E01E313E0903A3F03C1F1C0903A0FFF007F80D901FCEB1F002E297EA7
34>I<017E147848B4EB01FC2603C7C013FED807031303000F13E0120E121C0107130100
381400167ED8780F143E00705B161EEAF01F4A131C1200133F91C7123C16385B137E1678
01FE14705B16F016E0120149EB01C0A2ED0380A2ED0700A20000140E5D6D133C017C5B6D
5B90381F03C0903807FF80D901FCC7FC27297EA72C>I<017CEE038048B40207EB0FE026
03C7C090391F801FF0EA0703000F7F000E153F001C16000107160F003817074C1303D878
0F027E130100705B1800D8F01F14FE4A4914E01200133FDA000114014C14C05B137E0303
140301FE4A14805BA2F0070000011407494A5B180EA260A2030F5C12006D011F5C017C49
6C5B017E0139495A6D903870F80390281F81E07C0FC7FC903A07FFC01FFE010090380007
F03C297EA741>I<D901F8133FD907FEEBFFE0903A1E0F83C0F0903A3807C780F8903970
03CF0301E013FED801C0EBFC071203018013F8D8070015F0EE01C0000E4AC7FCA2001E13
07A2C75BA2140F5DA3141F5DA3143F92380001C0A34A1303001E1680003F017E1307267F
80FE14005ED8FF81141ED901DF131CD8FE035C3A7C078F80F03A3C0F07C1E03A1FFC03FF
802707F0007EC7FC2D297EA734>I<137C48B4EC03802603C7C0EB0FC0EA0703000F7F00
0E151F001C168013071238163FD8780F150000705BA2D8F01F5C4A137E1200133F91C712
FE5E5B137E150113FE495CA2150300015D5BA215075EA2150F151F00005D6D133F017C13
7F017E13FF90393F03DF8090380FFF1FEB01FC90C7123F93C7FCA25DD80380137ED80FE0
13FE001F5C4A5AA24848485A4A5A6CC6485A001C495A001E49C8FC000E137C380781F038
03FFC0C648C9FC2A3B7EA72D>I<02F8130ED903FE131ED90FFF131C49EB803C49EBC078
4914F090397E07F1E09038F800FF49EB1FC049EB07800001EC0F006C48131E90C75A5D5D
4A5A4A5A4A5A4AC7FC143E14785C495A495A495A49C8FC011E14E05B5B4913014848EB03
C0485AD807F8EB078048B4131F3A1F87E07F00391E03FFFE486C5B00785CD870005B00F0
EB7FC048011FC7FC27297DA72A>I E /Fl 20 107 df<007FB812FEBAFCA26C17FE3804
799847>0 D<EB03C0A2805CA600F0140F00FC143F00FE147F00FF14FF393FC3C3FC390F
E187F03903F18FC03900FDBF00EB3FFCEB0FF0EB03C0EB0FF0EB3FFCEBFDBF3903F18FC0
390FE187F0393FC3C3FC39FF03C0FF00FE147F00FC143F00F0140F00001400A6805CA220
277AA92D>3 D<EB0FFCEB3FFF90B512C0000314F04880488048804880A2481580A3B712
C0AA6C1580A36C1500A26C5C6C5C6C5C6C5CC614C0013F90C7FCEB0FFC22227BA72D>15
D<180E183F18FFEF03FEEF0FF8EF3FE0EFFF80933803FE00EE1FF8EE7FE0923801FF80DB
07FEC7FCED1FF0ED7FC04A48C8FCEC07FCEC3FF0ECFFC0010390C9FCEB0FFCEB3FE0EBFF
80D803FECAFCEA0FF8EA3FE0EAFF8048CBFC6C7EEA7FE0EA0FF8EA03FEC66C7EEB3FE0EB
0FFCEB03FF010013C0EC3FF0EC07FCEC01FF9138007FC0ED1FF0ED07FE923801FF809238
007FE0EE1FF8EE03FE933800FF80EF3FE0EF0FF8EF03FEEF00FF183F180E1800AE007FB8
12FEBAFCA26C17FE384779B947>20 D<127012FCB4FCEA7FC0EA1FF0EA07FCEA01FF3800
7FC0EB1FF8EB07FE903801FF809038007FE0EC0FF8EC03FE913800FF80ED3FE0ED0FFCED
03FF030013C0EE3FF0EE07FCEE01FF9338007FC0EF1FF0EF07FCEF01FFEF007FEF01FFEF
07FEEF1FF0EF7FC0933801FF00EE07FCEE3FF0EEFFC0030390C7FCED0FFCED3FE0EDFF80
DA03FEC8FCEC0FF8EC7FE0903801FF80D907FEC9FCEB1FF8EB7FC04848CAFCEA07FCEA1F
F0EA7FC048CBFC12FC1270CCFCAE007FB812FEBAFCA26C17FE384779B947>I<0203B512
F8023F14FC91B6FC010315F8D90FFEC8FCEB1FE0EB7F8001FEC9FCEA01F8485A485A485A
5B48CAFCA2123EA25AA21278A212F8A25AA2B812F817FCA217F800F0CAFCA27EA21278A2
127CA27EA27EA26C7E7F6C7E6C7E6C7EEA00FEEB7F80EB1FE0EB0FFE0103B612F8010015
FC143F020314F82E3679B13D>50 D<0060EE018000F0EE03C06C1607A200781780007C16
0FA2003C1700003E5EA26C163EA26C163C6D157CA2000716786D15F8A26C6C4A5AA20001
5E6D140390B7FC6C5EA3017CC7EA0F80A2013C92C7FC013E5CA2011E141E011F143EA26D
6C5BA2010714786E13F8A26D6C485AA201015CECF003A201005CECF807A291387C0F80A2
023C90C8FCEC3E1FA2EC1E1EEC1F3EA2EC0FFCA26E5AA36E5AA36E5A6E5A324180BE33>
56 D<007FB612FEB8FCA27EC9120FB3A7001FB7FC127FA3C9120FB3A8007FB7FCB8FCA2
6C15FE283F7BBE33>I<4E7EF007C0180F181F183F187FA218FFA25FA25F18BF1707183F
170F170E171E171C173C17381778177017F017E01601EE03C0A2EE0780A2EE0F005E161E
5EA25E16F85E4B5A854B5A15075E4BC7121F5D151E033FB6FC5DA292B7FC4A82DA03E0C7
121FA24A5A4A48140F0010131F003091C87F143E00785B007C13FC26FE01F86F7E38FF87
F0D9FFE0171CF1FE7C4A923803FFF86C4917E091C914C06C487013006C48EE00FCD80FF0
94C7FCEA03C046477EC149>65 D<4AB512FC023FECFFE049B712FC0107EEFF80011F8390
277FE1FC0114F02601FC01D9000F7FD803F003017FD807C09238003FFE260F80036F7ED8
1F001607487113804883007E4A6E13C012FE48187F00F019E000C00107163FC7FC5D191F
A3140F5DA21AC0A24A5AA2F13F80A24A5A1A0061197E4AC9FC61A2027E4B5A02FE5E1803
4A4B5A01015F4E5A4A4BC7FC0103163E604A5D0107ED03F04AEC07C0EF1F80010F037EC8
FC4A495A011FEC0FF04AEB7FC0DB0FFFC9FC49B512FC90B612E04892CAFC4814F84891CB
FC433E7EBD46>68 D<EEFFE0030713FC033F13FE92B6FC1403913807F00F91381F800102
3EC7FC5C4A14FE1301494814FC17F84948EB01F017C0010F91C7FCA2131FA380A280806D
B4FC15C06D13F86DEBFFC07F6D6C5B021F90C7FCEC7FFC4948C8FCEB03F0EB0FC049C9FC
133E5B5B485A1203485A5B120F485AA2123F90CAFC5AEE01C0160748ED0F80EE1F005E6D
147E167C6D5C6D495A6C6C495A01FCEB0FC0273FFF807FC7FC6CEBFFFE6C14F86C14C000
0191C8FC38003FF830427EBF30>I<EEFFF0030F13FE037F7F4AB61280140791381FF007
4AC7FC02FC147FD901F01500495A4948147E495A49C85A133E017E4A5A5B494A5A00015E
48484A5A4C5A4848021EC7FC93C8FC120F5B121FA25B123FA348C91208177C5F16014815
03A24C5AA3160F5F161F7F163F4C5A7F007F15FF6D495B5D6C6C5B6DD90FBFC7FCD81FFE
EB3F7F9038FF80FC6C9038FFF87E6CECE0FE6CEC80FCC6EBFE0090383FF00190C75B1503
5E5E15074B5AA24B5A000792C8FCD81FC0133ED83FF05B48B4485AB65A6C14C0001F5C00
0701FCC9FC38007FE0314B7CBF36>71 D<173F933803FFC0040F7F043F7F93B5FC4B80ED
03E092380FC03F92381F801FED3F004B130F15FE4A5A604A485C020715804B91C7FC020F
91C8FC5D141FA24A5AA34A5AA34ACAFCA3495AA313035CA3495AA3130F5CA3131F5CA25C
133FA2495AF0078091C9121F01FEEE3F0018FF2601FFFE5D48D9FFE0130103FE5C489139
FFE003F804FE5B4892B55AD81F811680263F001F92C7FC007E010114FC00F8D9001F13F0
00E00201138039427DBF3F>76 D<EE0FFE93387FFFC00303B512F8030F14FC033F14FE4B
C6FCDA01F8EB1FFFDA03E013034A487F4A5A4AC8FC4A15FE5C027E15FC02FE15F8EF01F0
18C0010192C7FC80A3816D7F8181EC7FFC6EB4FC6E13C06E13F06E13FC020113FF6E6C7F
031F13E003077F03017F6F6C7E707E160F707E8201786E1380EA01F8D807F080EA0FC048
48157F123F90C9FC481700A2177E5A5F7F4C5A6D5D6D4A5A6C6C4A5A6D4A5AD83FFE023F
C7FC6C6C6C13FC6C9038F00FF86C90B512E06C1580C64AC8FC013F13F0010790C9FC3842
7EBF37>83 D<D80FC0ED01E0D81FF0ED03F8D87FFC4B7E6D82B5FC000F6D4A7E00037FC6
18806D7E013F15006D6C153F181F010F160F8001071607A219006D7E60180EA20101161E
181C6E153C183818786013004D5A17036017074D5A4DC7FC5F173E5F17FC4C5A4C5A4C5A
4C5A161F4C5A4CC8FC16FE4A485A4B5A4B5A0101EB1FE04B5A4B5A4BC9FCECFDFEECFFFC
5D15E05D5D4990CAFC5C14F85C5C148091CBFC39427EBD38>86 D<153FEC03FFEC0FE0EC
3F80EC7E00495A5C495AA2495AB3AA130F5C131F495A91C7FC13FEEA03F8EA7FE048C8FC
EA7FE0EA03F8EA00FE133F806D7E130F801307B3AA6D7EA26D7E80EB007EEC3F80EC0FE0
EC03FFEC003F205B7AC32D>102 D<12FCEAFFC0EA07F0EA01FCEA007E6D7E131F6D7EA2
6D7EB3AA801303806D7E1300147FEC1FC0EC07FEEC00FFEC07FEEC1FC0EC7F0014FC1301
495A5C13075CB3AA495AA2495A133F017EC7FC485AEA07F0EAFFC000FCC8FC205B7AC32D
>I<146014F01301A214E01303A214C01307A2EB0F80A214005BA2131E133EA25BA21378
13F8A25B1201A25B1203A2485AA25B120FA290C7FC5AA2123EA2123C127CA2127812F8A4
1278127CA2123C123EA27EA27E7FA212077FA26C7EA212017FA212007FA21378137CA27F
A2131E131FA27F1480A2EB07C0A2130314E0A2130114F0A213001460145A77C323>I<12
6012F07EA21278127CA2123C123EA27EA27E7FA212077FA26C7EA212017FA212007FA213
78137CA27FA2131E131FA27F1480A2EB07C0A2130314E0A2130114F0A414E01303A214C0
1307A2EB0F80A214005BA2131E133EA25BA2137813F8A25B1201A25B1203A2485AA25B12
0FA290C7FC5AA2123EA2123C127CA2127812F8A25A1260145A7BC323>I<126012F0B3B3
B3B3B11260045B76C319>I E /Fm 5 52 df<EC0380B3A4B812FCA3C7D80380C7FCB3A4
2E2F7CA737>43 D<EB3FC0EBFFF03803E07C48487E48487E497E001EEB0780A2003E14C0
A248EB03E0A500FC14F0B0007C14E0A3007E1307003E14C0A36CEB0F806C14006D5A3807
C03E3803F0FC3800FFF0EB3FC01C2D7DAB23>48 D<130C133C137CEA03FC12FFEAFC7C12
00B3B113FE387FFFFEA2172C7AAB23>I<EB7F803801FFF0380780FC380E003F48EB1F80
48EB0FC05A0060EB07E012F000FC14F07E1403A3007C1307C7FCA215E0140F15C0141F15
80EC3F00147E147C5C495A495A495A495A011EC7FC5B5B4913305B485A4848136048C7FC
000E14E0001FB5FC5A4814C0B6FCA21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E00
7E487FEC1F80003F14C0A2EB800F1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0
EBFFC014F0EB00FC143FEC1F8015C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8
006014C00070131F6C1480001EEB3F00380780FC3801FFF038007FC01C2D7DAB23>I
E /Fn 35 123 df<387FFFFEA3B5FCA21705799521>45 D<171C173C177CA217FCA21601
1603A21607A24C7EA2161DA216391679167116E1A2ED01C1A2ED038115071601150EA203
1C7FA24B7EA25D15F05D4A5AA24A5AA24AC7FC5C140E5C021FB6FC4A81A20270C7127FA2
5C13015C495AA249C8FCA2130E131E131C133C5B01F882487ED807FEEC01FFB500E0017F
EBFF80A25C39417BC044>65 D<49B712C018F818FE903B0003FE0003FF9438007F804BEC
1FC0F00FE0F007F014074BEC03F8F001FCA2140F4BEC00FEA3141F4B15FFA3143F5DA302
7F5D5DA219FE14FF92C81203A34917FC4A1507A219F813034A150F19F0A20107EE1FE05C
F03FC0A2010FEE7F804A16006060011F4B5A4A4A5A4D5AA2013F4B5A4AEC3FC04DC7FC01
7F15FEEE03FC4AEB0FF001FFEC7FE0B8128004FCC8FC16E0403E7BBD45>68
D<49B812F8A390260003FEC7121F18074B14031801F000F014075DA3140F5D19E0A2141F
4B1338A2EF7801023F027013C04B91C7FCA217F0027F5CED80011603160F91B65AA3ED00
1F49EC07805CA3010392C8FC5CF003804C13070107020E14005C93C75A180E010F161E4A
151C183CA2011F5E5C60A2013F15014A4A5A1707017F150F4D5A4A147F01FF913807FF80
B9FCA295C7FC3D3E7BBD3E>I<49B812F0A390260003FEC7123F180F4B1403A2F001E014
075DA3140F5D19C0A2141F5D1770EFF003023F02E013804B91C7FCA21601027F5CED8003
A2160702FFEB1F8092B5FCA349D9003FC8FC4A7F82A20103140E5CA2161E0107141C5CA2
93C9FC130F5CA3131F5CA3133F5CA2137FA25C497EB612E0A33C3E7BBD3B>I<DCFF8013
E0030713F0033F9038FC01C09239FFC03E03913A03FC000F07DA0FF0EB078F4A48903803
DF80DA7F80EB01FF4AC8FC495A4948ED7F00495A495A4948814948153E495A13FF91C9FC
4848163C12035B1207491638120FA2485A95C7FC485AA3127F5BA312FF5BA34BB512FE90
C7FCA292C71380A295C7FCA25EA25FA216037E6D5DA2003F15077F001F5E6D140F6C6C14
1F0007153F6C6CEC7BF0D801FE14F16C6CEB03E090393FE01F806DB5EA0060010701F890
C8FC9038007FC03B4273BF46>I<49B648B6FC495DA2D9000390C7000313004B5D4B5DA2
180714074B5DA2180F140F4B5DA2181F141F4B5DA2183F143F4B5DA2187F147F4B5DA218
FF91B8FC96C7FCA292C712015B4A5DA2170313034A5DA2170713074A5DA2170F130F4A5D
A2171F131F4A5DA2173F133F4A5DA2017F157FA24A5D496C4A7EB66CB67EA3483E7BBD44
>I<49B612C0A25FD9000390C8FC5D5DA314075DA3140F5DA3141F5DA3143F5DA3147F5D
A314FF92C9FCA35B5CA313035C18C0EF01E0010716C05C17031880130F4A140718005F13
1F4A141EA2173E013F5D4A14FC1601017F4A5A16074A131F01FFECFFF0B8FCA25F333E7B
BD39>76 D<49B5933807FFFC496062D90003F0FC00505ADBBF805E1A771AEF1407033F92
3801CFE0A2F1039F020FEE071F020E606F6C140E1A3F021E161C021C04385BA2F1707F14
3C023804E090C7FCF001C0629126780FE0495A02705FF00700F00E0114F002E0031C5BA2
F03803010116704A6C6C5D18E019070103ED01C00280DA03805BA2943807000F13070200
020E5C5FDB03F8141F495D010E4B5CA24D133F131E011CDAF9C05CEEFB80197F013C6DB4
C7FC013895C8FC5E01784A5C13F8486C4A5CD807FE4C7EB500F04948B512FE16E0150056
3E7BBD52>I<49B77E18F018FC903B0003FE0003FEEF00FF4BEC7F80F03FC00207151F19
E05DA2020F16F0A25DA2141FF03FE05DA2023F16C0187F4B1580A2027FEDFF00604B495A
4D5A02FF4A5A4D5A92C7EA3FC04CB4C7FC4990B512FC17E04ACAFCA21303A25CA21307A2
5CA2130FA25CA2131FA25CA2133FA25CA2137FA25C497EB67EA33C3E7BBD3E>80
D<49B612FCEFFF8018F0903B0003FE000FF8EF03FE4BEB00FF8419800207ED3FC05DA219
E0140F5DA3021FED7FC05DA2F0FF80143F4B15004D5A60027F4A5A4B495A4D5AEF3F8002
FF02FEC7FC92380007F892B512E01780499038000FE04A6D7E707E707E0103814A130083
A213075CA25E130F5C5F1603131F5CA3013F020714404A16E05F017F160119C04A010313
03496C1680B6D8800113079438FE0F009338007E1ECAEA3FFCEF07F03B407BBD42>82
D<92390FF001C0ED7FFE4AB5EA0380913907F80FC791390FC003EF91391F8001FF4AC713
00027E805C495A4948143EA2495AA2010F153C5CA3011F1538A38094C7FC80A214FC6DB4
FC15F015FE6DEBFFC06D14F06D14FC6D80143F020F7F020180EC001F150303007F167F16
3FA2161FA212075A5F120EA2001E153F94C7FCA2163E003E157E167C003F15FC4B5A486C
5C4B5A6D495AD87DE0EB1F80D8F8F849C8FC017F13FE39F03FFFF8D8E00F13E048C690C9
FC32427ABF33>I<147E49B47E903907C1C38090391F80EFC090383F00FF017E137F4914
804848133F485AA248481400120F5B001F5C157E485AA215FE007F5C90C7FCA21401485C
5AA21403EDF0385AA21407EDE078020F1370127C021F13F0007E013F13E0003E137FECF3
E1261F01E313C03A0F8781E3803A03FF00FF00D800FC133E252977A72E>97
D<EB1FC0EA0FFF5CA2EA003FA291C7FCA25BA2137EA213FEA25BA21201A25BA21203A25B
147E3907F1FF809038F783E09038EF01F013FE390FF800F8A24913FC49137C485A157E5B
15FE123FA290C7FCA248130115FC127EA2140300FE14F85AA2EC07F0A215E048130F15C0
141F15800078EB3F00127C147E003C5B383E01F8381E03E06C485A6CB4C7FCEA01F81F40
76BE2A>I<EC1FE0ECFFF8903803F03E903807C00F90381F8007D93F001380017E131F49
137F485A485A000715005B000F147E484890C7FCA2485AA3127F90C9FCA35A5AA6481403
007E5C5D151E003E5C5D6C5CEC03E0390F800F802603E07EC7FC3801FFF838003FC02129
77A72A>I<EE3F80ED1FFF1700A2ED007FA2167EA216FEA25EA21501A25EA21503A25EA2
1507A25E147E903801FF8F903807C1CF90391F80EFC090383F00FF017E137F5B48486D5A
485AA2485A000F92C7FC5B001F5CA24848137EA215FE127F90C75AA214015A485CA21403
16384814F0A21407167891380FE070127C021F13F0007E013F5B003E137FECF3E1261F01
E35B3A0F8781E3802703FF00FFC7FCD800FC133E294077BE2E>I<EC3F80903801FFE090
3807E0F890381F803CEB3E0001FC131E485A485A12074848133E49133C121F4848137C15
F8EC03F0397F000FE0ECFF80B5EAFC0014C048C8FCA45AA61506150E151E007C143C1578
6C14F0EC01E06CEB07C0390F801F003807C0FC3801FFF038007F801F2976A72A>I<167C
4BB4FC923807C78092380F83C0ED1F87161FED3F3FA2157EA21780EE0E004BC7FCA41401
5DA414035DA30103B512F8A390260007E0C7FCA3140F5DA5141F5DA4143F92C8FCA45C14
7EA414FE5CA413015CA4495AA4495AA4495A121E127F5C12FF49C9FCA2EAFE1EEAF83C12
70EA7878EA3FE0EA0F802A5383BF1C>I<EC03F0EC0FFC91383E0E1C9138FC077E903901
F003FE1303903807E001D90FC013FCEB1F80A2EB3F004914F8137E01FE1303A2484814F0
A2150712034914E0A2150F12074914C0A2151FA216805B153F1203ED7F006D5BA200015B
0000495A9038F80F7E90387C1EFEEB1FF8903807E0FC90C7FC1401A25DA21403A25D001C
1307007F5C48130F5D4A5A4AC7FC48137E00F85B387C03F0381FFFC0D803FEC8FC273B7C
A72A>I<EB01FC13FF5CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C8
FCEC03F890387F0FFE91383E0F80D97E7813C0ECE007D9FFC013E014801400A2485A5BA2
5B0003140F16C05BA20007141F16805BA2000F143F16005B5D001F147EEDFE074913FCA2
003F0101130FEDF80E1300161E48ECF01CA2007E1538A200FE1570020013E048EC7FC000
38EC1F0028407ABE2E>I<1478EB01FCA21303A314F8EB00E01400AD137C48B4FC38038F
80EA0707000E13C0121E121CEA3C0F1238A2EA781F00701380A2EAF03F140012005B137E
13FE5BA212015BA212035B1438120713E0000F1378EBC070A214F0EB80E0A2EB81C01383
148038078700EA03FEEA00F8163E79BC1C>I<EB01FC13FF5CA21303A25CA21307A25CA2
130FA25CA2131FA25CA2133FA291C8FCED03E049EB0FF8ED3C3C017EEB707CEDE1FC9038
FE01C1EC03839038FC0703140E0001011C13F891383800E0494813001460000313E0EBF9
C0EBF78001FEC8FC1207EBFFE0EBE7F8EBE0FE000F137F6E7EEBC01F6E7E121F16701380
A2003F15F0021F13E001001380A248148116C0007EEB0F83168000FE14879138078F0048
EB03FE0038EB00F826407ABE2A>107 D<EB07F0EA03FF14E0A2EA000FA214C0A2131FA2
1480A2133FA21400A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120F
A25BA2121FA25BA2123FA290C7FCA25A1307127EA2EAFE0F130E12FCA2131E131CA2EA7C
381378EA3C70EA1FE0EA0780144079BE17>I<D801F0EB3F803A07FC01FFE03A0F3E07C1
F83A0E1F0F00FC001E011C137C001C49137E003C13F012385C38783FC012705C91C7FC00
F015FE495CEA007EA2150101FE5C5BA2150300015D5B15075E0003020F13704914C0A203
1F13F00007ED80E05B1681EE01C0120F49EC0380A2EE0700001FEC0F0E49EB07FC0007C7
EA01F02C2979A733>110 D<EC1FC0ECFFF8903803F07C90380FC01FEB1F8090393F000F
80017E14C0491307484814E0485A12075B000F15F0485AA2485AA2ED0FE0127F90C7FCA2
151F4815C05AA2ED3F80A2ED7F00A248147E007C5C007E13015D4A5A003E495A6C495A4A
5A260F803EC7FC3807C0FC3801FFF038003F80242977A72E>I<903903E001F890390FF8
07FE903A1E7C1E0F80903A1C3E3C07C0013C137801389038E003E0EB783F017001C013F0
ED80019038F07F0001E015F8147E1603000113FEA2C75AA20101140717F05CA20103140F
17E05CA20107EC1FC0A24A1480163F010F15005E167E5E131F4B5A6E485A4B5A90393FB8
0F80DA9C1FC7FCEC0FFCEC03E049C9FCA2137EA213FEA25BA21201A25BA21203A2387FFF
E0B5FCA22D3A80A72E>I<027E1360903901FF81E0903807C1C390391F80E7C090383F00
F7017E137F5B4848EB3F80485AA2485A000F15005B121F5D4848137EA3007F14FE90C75A
A3481301485CA31403485CA314074A5A127C141F007E133F003E495A14FF381F01EF380F
879F3903FF1F80EA00FC1300143F92C7FCA35C147EA314FE5CA21301130390B512F05AA2
233A77A72A>I<D801F013FC3A07FC07FF803A0F3E0F03C0260E1F1C13E0001EEB380F00
1C1370003CEBE01F123814C0D8783F14C00070903880070092C7FC91C8FC12F05BEA007E
A313FE5BA312015BA312035BA312075BA3120F5BA3121F5B0007C9FC232979A726>I<EC
7F80903801FFE0903807C0F890381F003C013E131C013C131E017C133E49137E15FEA200
0114FCA215706D13007FEBFFC014FC6C13FF15806D13C06D13E0010F13F01300140F1407
1403120C123F387F80011403D8FF0013E0A300FCEB07C000F0EB0F8012700078EB1F006C
133C381F01F83807FFE0C690C7FC1F297AA725>I<EB01C0EB03F01307A25CA2130FA25C
A2131FA25CA2133FA291C7FCA2007FB51280B6FC1500D8007EC7FC13FEA25BA21201A25B
A21203A25BA21207A25BA2120FA25BA2121F141C1380A2003F133C1438EB0078147014F0
5C495AEA1F03495A6C48C7FCEA07FCEA01F0193A78B81E>I<137C48B4141C26038F8013
7EEA0707000E7F001E15FE121CD83C0F5C12381501EA781F007001805BA2D8F03F130314
0000005D5B017E1307A201FE5C5B150F1201495CA2151F0003EDC1C0491481A2153F1683
EE0380A2ED7F07000102FF13005C01F8EBDF0F00009038079F0E90397C0F0F1C90391FFC
07F8903907F001F02A2979A731>I<017CEB01C048B4EB07F038038F80EA0707000E01C0
13F8121E001C1403EA3C0F0038EC01F0A2D8781F130000705BA2EAF03F91C712E012005B
017E130116C013FE5B1503000115805BA2ED07001203495B150EA25DA25D157800011470
6D5B0000495A6D485AD97E0FC7FCEB1FFEEB03F0252979A72A>I<017C167048B4913870
01FC3A038F8001F8EA0707000E01C015FE001E1403001CEDF000EA3C0F0038177C1507D8
781F4A133C00701380A2D8F03F130F020049133812005B017E011F14784C137013FE5B03
3F14F0000192C712E05BA2170100034A14C049137E17031880A2EF070015FE170E000101
01141E01F86D131C0000D9039F5BD9FC076D5A903A3E0F07C1E0903A1FFC03FFC0902703
F0007FC7FC372979A73C>I<137C48B4143826038F8013FCEA0707000E7F001E1401001C
15F8EA3C0F12381503D8781F14F000701380A2D8F03F1307020013E012005B017E130F16
C013FE5B151F1201491480A2153F000315005BA25D157EA315FE5D00011301EBF8030000
130790387C1FF8EB3FF9EB07E1EB00035DA21407000E5CEA3F80007F495AA24A5AD8FF00
90C7FC143E007C137E00705B387801F0383803E0381E0FC06CB4C8FCEA03F8263B79A72C
>121 D<D901F01370D907FC13F0010F14E090381FFE0190393FFF03C049EB838090387C
0FCF9039F803FF009038F0007E49133C000114386C48137890C75A4A5A4A5A4A5A4AC7FC
141E5C5C5C495A495A495A49C8FC131E4913075B5B48485B4848131E485A01F05BD80FFE
137C391F1F81F8383E0FFFD83C075B486C5B00705CD8F00190C7FC38E0007C24297BA725
>I E /Fo 43 122 df<922601FFFC903801FFE0033F9026FF801F13F84AB6D8E07F13FE
020F03F9B6FC023FD9C00FB500C0138091277FFC0003D9FE0113C0902601FFE049495A49
4949494813E04990C714F049484A13E0495A19C0495A7413C0017F17804A6E6E13807191
38007E007192C7FCAEBCFCA526007FF8C7000301C0C8FCB3B3A7007FB5D8F803B612F0A5
53547DD34E>11 D<157815FC14031407141F14FF130F0007B5FCB6FCA2147F13F0EAF800
C7FCB3B3B3A6007FB712FEA52F4E76CD43>49 D<EC3FFE0103B512E0010F14FC013F14FF
90B712C048D9C07F7F2703FE000F13F8D807F801037FD80FE06D7F48486D7F48488001F0
1680486C6E13C07F486C6E13E07FA27013F0A56C5AA26C5AEA0FF0EA03C0C914E05EA218
C05E1880A24C13005F4C5A4B5B5F4B5B5F4B5B4B90C7FC4B5A5E4B5AED7FE04B5A4A5B4A
48C8FC4A5A5D4A48EB01F04A5AEC3F804AC7FC02FEEC03E0495A495A495A495AD91F8014
0749C8FC013E150F017FB7FC90B812C05A5A5A5A5A5A5AB9FC1880A4344E79CD43>I<91
380FFFC091B512FC0107ECFF80011F15E090263FF8077F9026FF800113FC4848C76C7ED8
03F86E7E491680D807FC8048B416C080486D15E0A4805CA36C17C06C5B6C90C75AD801FC
1680C9FC4C13005FA24C5A4B5B4B5B4B13C04B5BDBFFFEC7FC91B512F816E016FCEEFF80
DA000713E0030113F89238007FFE707E7013807013C018E07013F0A218F8A27013FCA218
FEA2EA03E0EA0FF8487E487E487EB57EA318FCA25E18F891C7FC6C17F0495C6C4816E001
F04A13C06C484A1380D80FF84A13006CB44A5A6CD9F0075BC690B612F06D5D011F158001
0302FCC7FCD9001F1380374F7ACD43>I<177C17FEA2160116031607160FA2161F163F16
7FA216FF5D5DA25D5DED1FBFED3F3F153E157C15FCEC01F815F0EC03E01407EC0FC01580
EC1F005C147E147C5C1301495A495A5C495A131F49C7FC133E5B13FC485A5B485A120748
5A485A90C8FC123E127E5ABA12C0A5C96C48C7FCAF020FB712C0A53A4F7CCE43>I<D803
80150ED807E0157E01FEEC03FED9FFF0137F91B65A5F5F5F5F5F94C7FC5E5E16F016C093
C8FC15F801E190C9FC01E0CAFCABEC0FFF027F13F001E3B512FE01E76E7E9026FFF8077F
DAC0017F49C713F8496E7E49143F4981496E7E6C481680C9FC18C08218E0A418F0A3EA0F
E0487E487E487E487EA418E0A35B6C484A13C05B491680003EC85A003F17006C6C4A5A6D
5D6C6C4A5AD807F8495BD803FE01075B2701FFC03F5B6C90B65A013F4AC7FC6D14F80103
14C09026007FF8C8FC344F79CD43>I<ED0FFF92B512E0020780021F14FC91397FFE03FE
903A01FFF0007F4901C0EB3F804990C7121F4948EC7FC0494814FF49484913E049485B01
FF5C485BA2485B5AA2486F13C04A6D1380486F1300177E94C7FC5AA291CAFC5AA2150891
3801FFF8020713FFB54814C04A14F04AC66C7E023C6D7E4A6D7E4A6D7E7013804A15C0A2
4A15E07013F05C18F8A491C714FCA37EA67EA46C17F880A27E18F06C5D18E06C6D15C07E
6E4913806C6D15006D6C495A6D6CEB7FFC6DB448485A6D90B55A010315C0010092C7FC02
3F13FC020713C0364F7ACD43>I<121F7F7FEBFF8091B81280A45A1900606060A2606060
485F0180C86CC7FC007EC95A4C5A007C4B5A5F4C5A160F4C5A484B5A4C5A94C8FC16FEC8
12014B5A5E4B5A150F4B5AA24B5AA24B5A15FFA24A90C9FCA25C5D1407A2140FA25D141F
A2143FA4147F5DA314FFA55BAC6D5BA2EC3FC06E5A395279D043>I<913807FFC0027F13
FC0103B67E010F15E090261FFC0113F8903A3FE0003FFCD97F80EB0FFE49C76C7E484880
48486E1380000717C04980120F18E0177FA2121F7FA27F7F6E14FF02E015C014F802FE49
13806C7FDBC00313009238F007FE6C02F85B9238FE1FF86C9138FFBFF06CEDFFE017806C
4BC7FC6D806D81010F15E06D81010115FC010781011F81491680EBFFE748018115C048D9
007F14E04848011F14F048487F48481303030014F8484880161F4848020713FC16018248
48157F173FA2171FA2170FA218F8A27F007F17F06D151FA26C6CED3FE0001F17C06D157F
6C6CEDFF806C6C6C010313006C01E0EB0FFE6C01FCEBFFFC6C6CB612F06D5D010F158001
0102FCC7FCD9000F13C0364F7ACD43>I<171F4D7E4D7EA24D7EA34C7FA24C7FA34C7FA3
4C7FA24C7FA34C8083047F80167E8304FE804C7E03018116F8830303814C7E03078116E0
83030F814C7E031F81168083033F8293C77E4B82157E8403FE824B800201835D84020383
4B800207835D844AB87EA24A83A3DA3F80C88092C97E4A84A2027E8202FE844A82010185
A24A820103854A82010785A24A82010F855C011F717FEBFFFCB600F8020FB712E0A55B54
7BD366>65 D<BA12C019FEF1FFC01AF01AFCD8000701F0C7000313FFDE007F7F737F070F
7F737F878587858785A287A84F5BA263616361634F5B4F5B077F90C7FC4E485A060713F8
92B812E097C8FC861AF003F0C7000313FE9539003FFF80070F13E0737F07017F87737F74
7E1C807413C0A27413E0A31CF0A386A362A31CE0A2621CC0A250138097B5FC1C004F5B19
074F5B073F13F04EB55ABC128098C7FC1AF81AC007F8C8FC54527CD160>I<932601FFFC
EC01C0047FD9FFC013030307B600F81307033F03FE131F92B8EA803F0203DAE003EBC07F
020F01FCC7383FF0FF023F01E0EC0FF94A01800203B5FC494848C9FC4901F88249498249
49824949824949824990CA7E494883A2484983485B1B7F485B481A3FA24849181FA3485B
1B0FA25AA298C7FC5CA2B5FCAE7EA280A2F307C07EA36C7FA21B0F6C6D1980A26C1A1F6C
7F1C006C6D606C6D187EA26D6C606D6D4C5A6D6D16036D6D4C5A6D6D4C5A6D01FC4C5A6D
6DEE7F806D6C6C6C4BC7FC6E01E0EC07FE020F01FEEC1FF80203903AFFE001FFF0020091
B612C0033F93C8FC030715FCDB007F14E0040101FCC9FC525479D261>I<BC1280A5D800
0701F8C7000114C0F0001F19071901851A7F1A3F1A1FA2F20FE0A21A07A31A03A318F81B
F01A01A497C7FC1701A317031707170F177F92B6FCA59238F8007F170F170717031701A3
17001B3EA31B7CA395C8FCA21BFCA21BF8A21A01A31A031BF01A071A0FA21A1F1A3FF27F
E0F101FF1907191F0603B5FCBCFCA21BC0A34F517CD058>69 D<B812C0A5D8000701F8C7
FCB3B3B3B2B812C0A52A527CD132>73 D<B812F8A5D8000701F8CAFCB3B3A91A7CA41AFC
1AF8A51901A31903A219071AF0190FA2191F193F197F19FF180360183F4DB5FCBB12E0A5
46527CD151>76 D<B600FC073FB512FE6F61A26F96B6FCA2D80007F5C00070EF01EFA202
EF6DEF03CFA202E76DEF078FA202E36DEF0F0FA202E16D171EA302E06D173CA26F6C1778
A26F6C17F0A26F6DED01E0A26F6DED03C0A36F6DED0780A26F6DED0F00A26F6D151EA26F
6D5DA3706C5DA2706C5DA2706D495AA2706D495AA2706D495AA3706D49C7FCA2706D131E
A2706D5BA2716C5BA3716C5BA271EB81E0A271EBC3C0A271EBE780A27101FFC8FCA3715B
A2715BA2725AA2725AA2D93FFC6F5AB74DB712FEA2725AA2725A77527CD180>I<93380F
FFC00303B6FC031F15E092B712FC0203D9FC0013FF020F01C0010F13C0023F90C7000313
F0DA7FFC02007F494848ED7FFE4901E0ED1FFF49496F7F49496F7F4990C96C7F49854948
707F4948707FA24849717E48864A83481B804A83481BC0A2481BE04A83A2481BF0A34849
7113F8A5B51AFCAF6C1BF86E5FA46C1BF0A26E5F6C1BE0A36C6D4D13C0A26C6D4D1380A2
6C1B006C6D4D5A6E5E6C626D6C4C5B6D6D4B5B6D6D4B5B6D6D4B5B6D6D4B5B6D6D4B90C7
FC6D6D4B5A6D01FF02035B023F01E0011F13F0020F01FC90B512C0020390B7C8FC020016
FC031F15E0030392C9FCDB001F13E0565479D265>79 D<BAFC19F819FF1AE086D8000701
F0C7001F13FC060113FF726C13807313C0070F13E01BF0857313F81BFCA27313FEA41BFF
A81BFEA31BFC61A21BF84F13F04F13E0614F13C04F13004E485A061F5B92B812F01AC04F
C7FC19E003F8CBFCB3AEB812C0A550527CD15C>I<B912F0F0FF8019F819FF1AC0D80007
01F0C714F0060F7F060113FE727F737F737F85737F87A2737FA387A863A2616363A24F5B
4F5B4F90C8FC4F5A06035B060F13F095B512C092B8C9FC19F819E019F89226F0000313FE
9439007FFF80727F727F727F727F727F8684A28684A787A71D1C75133EA38575137E7315
7C7513FC731401B86C6D9038F803F807039038FE07F07390B512E0736C14C0080F1400CE
EA7FFC5F537CD164>82 D<91260FFF80130791B500F85B010702FF5B011FEDC03F49EDF0
7F9026FFFC006D5A4801E0EB0FFD4801800101B5FC4848C87E48488149150F001F824981
123F4981007F82A28412FF84A27FA26D82A27F7F6D93C7FC14C06C13F014FF15F86CECFF
8016FC6CEDFFC017F06C16FC6C16FF6C17C06C836C836D826D82010F821303010082021F
16801400030F15C0ED007F040714E01600173F050F13F08383A200788200F882A3187FA2
7EA219E07EA26CEFFFC0A27F6D4B13806D17006D5D01FC4B5A01FF4B5A02C04A5A02F8EC
7FF0903B1FFFC003FFE0486C90B65AD8FC0393C7FC48C66C14FC48010F14F048D9007F90
C8FC3C5479D24B>I<B700FC017FB600FE91B612F0A5D8003F01C0C8001F01E0C9EBF800
6F71EE0FC06D7161876F1C1F6D7196C7FC6F8373606D1E3E6F836D7160876F1CFC6D666F
4B801F016D66704A806E525A88704A17076E059F5F70021F80080F160F6E6570023F806E
DC3E074CC8FC8870027E5F6EDC7C03163E7002FC804F6C167E6E1C7C700101814F6C16FC
6E745B70010317016E4C6D5D060716C00580496D14036F63DDC00F16E04F6D14076F07F0
5BDDE01F170F6F92C76C5D1DF8DDF03E6E141F6F98C9FCDDF87E16FC067C6E5C6FF1FE3E
DDFCFC177E6F4A6E147C1DFFDDFFF06E14FC6F62A24E816F62A270496F5BA24E817061A2
95C97E7061A270487090CAFCA37048705AA24D1601040360A27048705A84537DD18B>87
D<EC7FFF0107B512F0013F14FE90B77E48D9E00F7F2703FE000113F0486C6D7F6EEB3FFC
48826E131F83707FA36C496D7FA26C90C7FC6C5AC9FCA6037FB5FC020FB6FC91B7FC0107
1487013FEBF0074913803901FFFC004813F0485B485B485B4890C7FC5A5BA2485AA45EA2
6D5C007F151D163D6C6C02797F6C6D01F113F86C9026C003E1EBFFE06C9026F81FC014F0
6C90B5487EC6ED001F011F01FC010713E0010101E090C8FC3C387CB641>97
D<EB3FF0B5FCA51203C6FCB3A4923801FFE0030F13FE033FEBFFC092B612F002F301017F
913AF7F8003FFEDAFFE0EB0FFF03806D7F92C76C7F4A6E7F4A824A6E7FA2727EA285A285
84A31A80AC1A00A44E5AA36118FF616E4A5BA26E4A5B6E4A5B6F495BDACFC04990C7FCDA
87F0EB7FFC913A03FE03FFF849C6B612E0496D148049011F01FCC8FC90C7000313C04154
7BD24B>I<913801FFF8021FEBFF8091B612F0010315FC010F9038C00FFE903A1FFE0001
FFD97FFC491380D9FFF05B4817C048495B5C5A485BA2486F138091C7FC486F1300705A48
92C8FC5BA312FFAD127F7FA27EA2EF03E06C7F17076C6D15C07E6E140F6CEE1F806C6DEC
3F006C6D147ED97FFE5C6D6CEB03F8010F9038E01FF0010390B55A01001580023F49C7FC
020113E033387CB63C>I<4DB47E0407B5FCA5EE001F1707B3A4913801FFE0021F13FC91
B6FC010315C7010F9038E03FE74990380007F7D97FFC0101B5FC49487F4849143F484980
485B83485B5A91C8FC5AA3485AA412FFAC127FA36C7EA37EA26C7F5F6C6D5C7E6C6D5C6C
6D49B5FC6D6C4914E0D93FFED90FEFEBFF80903A0FFFC07FCF6D90B5128F0101ECFE0FD9
003F13F8020301C049C7FC41547CD24B>I<913803FFC0023F13FC49B6FC010715C04901
817F903A3FFC007FF849486D7E49486D7E4849130F48496D7E48178048497F18C0488191
C7FC4817E0A248815B18F0A212FFA490B8FCA318E049CAFCA6127FA27F7EA218E06CEE01
F06E14037E6C6DEC07E0A26C6DEC0FC06C6D141F6C6DEC3F806D6CECFF00D91FFEEB03FE
903A0FFFC03FF8010390B55A010015C0021F49C7FC020113F034387CB63D>I<ED3FFC02
03B5FC020F14C0023F14E09139FFF81FF0499038C03FF849EB807F49903800FFFC495A49
5AA2495AA2EE7FF8495AEE3FF0EE0FC093C7FCAEB712E0A526007FF8C8FCB3B3A7007FB5
12FEA52E547CD329>I<DA3FFF14FF0103B5D8F00713C0010FDAFC1F13E0013FECFF7F90
267FFC0F9038FF9FF09026FFE001EBF83F48496C13E0484990387FF01F4890C7D83FF813
E0489338FC0FC0F0078048486E6CC7FCA2003F82A9001F5EA26C6C4A5AA26C5E6C6D495A
6C6D495A6C6D485BDAFC0F5B4890B6C8FCD803EF14FC01C314F02607C03F90C9FC91CBFC
A2120FA37FA213F813FE90B7FC6C16F817FF18C06C836C836C836D828448B9FC12074848
C700031480D81FF8EC003F4848150748486F13C083485A83A56D5D007F18806D5D003F18
006C6C4B5AD80FFEED1FFC6C6C6CEC7FF86C01E049485A6C01FE011F5B6C6CB71280010F
03FCC7FC010115E0D9000F01FCC8FC3C4F7CB543>I<EB3FF0B5FCA51203C6FCB3A4EE1F
FC93B512C0030314F0030F8092391FE07FFC92393F001FFE037C8003F07FDAF1E081ECF3
C0DAF7807F8502FFC7FC5CA25CA45CB3ACB6D8F807B612C0A542537BD24B>I<137F497E
000313E0487FA2487FA76C5BA26C5BC613806DC7FC90C8FCADEB3FF0B5FCA512017EB3B3
A6B612E0A51B547BD325>I<157FEDFF80020313E04A13F0A24A13F8A76E13F0A26E13E0
02001380ED7F0092C7FCADED1FF891B5FCA51401EC007FB3B3B1EA0780EA1FE0487E487E
486C13FF16F0A216E05C16C04A13806C4848130049485A003F495A000FB512F06C5C0001
148026001FFCC7FC256C87D329>I<EB3FF0B5FCA51203C6FCB3A54CB512F8A59339003F
FE00EF1FF0EF3FC04D5A4DC7FCEE03FEEE07F84C5A4C5AEE7FC04CC8FC4B5A4B5AED0FF8
ED1FE04B7E4B7EECF1FF02F37F02F77F91B6FC83159F030F7F02FE80DAF8077F4A7E6F7F
6F7F83707E82707F84707F707F82707F84707F177F717E4D13C0B6D8F003B6FCA540537C
D247>I<EB3FF0B5FCA512017EB3B3B3B1B612F0A51C537BD225>I<D93FF0D91FFCEDFFE0
B591B500C0010713FE030302F0011F6D7E030F6E017F8092271FE07FFCD9FF037F922A3F
001FFE01F8007F0003027C9126FF03E080C602F06DD90780137FDAF1E0038FC77FDAF3C0
159EDAF7806D01BC143F07FC8102FFC75C4A5EA24A5EA44A5EB3ACB6D8F807B6D8C03FB5
12FEA567367BB570>I<D93FF0EB1FFCB591B512C0030314F0030F8092391FE07FFC9239
3F001FFE0003027C80C602F07FDAF1E081ECF3C0DAF7807F8502FFC7FC5CA25CA45CB3AC
B6D8F807B612C0A542367BB54B>I<913801FFE0021F13FE91B612C0010315F0010F9038
807FFC903A1FFC000FFED97FF86D6C7E49486D7F48496D7F48496D7F4A147F48834890C8
6C7EA24883A248486F7EA3007F1880A400FF18C0AC007F1880A3003F18006D5DA26C5FA2
6C5F6E147F6C5F6C6D4A5A6C6D495B6C6D495B6D6C495BD93FFE011F90C7FC903A0FFF80
7FFC6D90B55A010015C0023F91C8FC020113E03A387CB643>I<903A3FF001FFE0B5010F
13FE033FEBFFC092B612F002F301017F913AF7F8007FFE0003D9FFE0EB1FFFC602806D7F
92C76C7F4A824A6E7F4A6E7FA2717FA285187F85A4721380AC1A0060A36118FFA2615F61
6E4A5BA26E4A5B6E4A5B6F495B6F4990C7FC03F0EBFFFC9126FBFE075B02F8B612E06F14
80031F01FCC8FC030313C092CBFCB1B612F8A5414D7BB54B>I<90397FE003FEB590380F
FF80033F13E04B13F09238FE1FF89139E1F83FFC0003D9E3E013FEC6ECC07FECE78014EF
150014EE02FEEB3FFC5CEE1FF8EE0FF04A90C7FCA55CB3AAB612FCA52F367CB537>114
D<903903FFF00F013FEBFE1F90B7FC120348EB003FD80FF81307D81FE0130148487F4980
127F90C87EA24881A27FA27F01F091C7FC13FCEBFFC06C13FF15F86C14FF16C06C15F06C
816C816C81C681013F1580010F15C01300020714E0EC003F030713F015010078EC007F00
F8153F161F7E160FA27E17E07E6D141F17C07F6DEC3F8001F8EC7F0001FEEB01FE9039FF
C00FFC6DB55AD8FC1F14E0D8F807148048C601F8C7FC2C387CB635>I<143EA6147EA414
FEA21301A313031307A2130F131F133F13FF5A000F90B6FCB8FCA426003FFEC8FCB3A9EE
07C0AB011FEC0F8080A26DEC1F0015806DEBC03E6DEBF0FC6DEBFFF86D6C5B021F5B0203
13802A4D7ECB34>I<D93FF8913801FFC0B50207B5FCA50003ED001FC61607B3AE5FA35F
A2017F5D173B177B6D6C14F3DC01E313F06D6CD907C3EBFFC0903A0FFFC03F836D90B512
03010114FE6D6C13F8020701E091C7FC42377BB54B>I<B600F00107B5FCA5000101F8C8
EA7FE06C6DED3F00A2017F163E6E157E013F167C6E15FC6D5E6F13016D5E8117036D5E6F
13076D5E6F130F6D5E6F131F6D93C7FC815F6E6C133E177E023F147C6F13FC6E5C16816E
5C16C3A26EEBE3E016E76E5C16FF6E5CA26E91C8FCA26F5AA36F5AA26F5AA26F5AA26F5A
6F5A40367DB447>I<B600F00107B5FCA5C601F8C8EA7FE06EED3F00A26D6C153E187E01
3F167C6E15FC6D5E6F13016D5E6F13036D5E8117076D6D5C170F6D6D5C171F6D93C7FC6F
5B027F143E6F137E023F147C6F13FCA26E6D5A16816EEBC1F016C36E5C16E76E5C16FF6E
5CA26E91C8FCA36F5AA26F5AA26F5AA26F5AA26F5AA35E150F5E151F93C9FC5DD81FC013
3E486C137E486C137C486C13FC5D14015D14034A5A6C48485A49485A263FC07FCAFCEB81
FE6CB45A6C13F000035BC690CBFC404D7DB447>121 D E /Fp 81
124 df<4AB4EB0FE0021F9038E03FFC913A7F00F8FC1ED901FC90383FF03FD907F09039
7FE07F80494801FF13FF4948485BD93F805C137F0200ED7F00EF003E01FE6D91C7FC82AD
B97EA3C648C76CC8FCB3AE486C4A7E007FD9FC3FEBFF80A339407FBF35>11
D<4AB4FC021F13C091387F01F0903901FC0078D907F0131C4948133E494813FF49485A13
7F1400A213FE6F5A163893C7FCAA167FB8FCA33900FE00018182B3AC486CECFF80007FD9
FC3F13FEA32F407FBF33>I<4AB47E021F13F791387F00FFEB01F8903807F001EB0FE0EB
1FC0EB3F80137F14008101FE80AEB8FCA3C648C77EB3AE486CECFF80007FD9FC3F13FEA3
2F407FBF33>I<4AB4ECFF80021FD9C00F13E0913B7F01F03F80F8903C01F80078FE003C
D907F0D93FF8130E49484948131F49484948EB7F804948484913FF137F02005CA201FE92
C7FC6FED7F0070141C96C7FCAAF13F80BBFCA3C648C76CC7FC197F193FB3AC486C4A6CEB
7FC0007FD9FC3FD9FE1FB5FCA348407FBF4C>I<001E130F397F803FC000FF137F01C013
E0A201E013F0A3007F133F391E600F3000001300A401E01370491360A3000114E04913C0
0003130101001380481303000EEB070048130E0018130C0038131C003013181C1C7DBE2D
>34 D<013F4C7ED9FFC04B7E2601E0E015072607C070150F48486C4B5A023E4BC7FC4848
6C5D48D90FC0EB01FE003ED90EF0EB07FCDA0F3F133E007E903A070FFFF8F8007C0200EB
C1F0EE000300FC6D6C495A604D5A171F95C8FC173E177E177C5F16015F007C4948485A16
07007E5E003E49495A020E131F003F93C9FC6C49133E260F803C137E0238137C6C6C485B
3901E0E0016CB448485AD93F0049133F90C74848EBFFC0030F903801E0E093398007C070
4B4848487E4B153C033E90381F001C4B497F03FC133E4B150F4A48017E7F0203147C5D4A
4801FCEB0380140F5D4AC7FC5C143E5C14FC5C495A13034948027CEB07005C4948147E01
1F033E5B91C8140E013E153F017E6F5B017C92380F803C4917380001706C5A49923801E0
E0496FB45A6C48043FC7FC41497BC34C>37 D<EC0FC0EC3FF0ECF878903801F01CEB03E0
49487E130FEC800F011F7FA2EB3F00A5EC800EA25DA25DA25D6D6C5AECC1C0A2ECC38002
E7C7387FFFFCEB0FEE14FC4A020713C06D48913801FE006E5DEF00F06D7E4D5A496C5D01
0F1503D91DFF4A5A013893C7FC496C6C5B01E0150E48486C6C131E00036E131C2607801F
143C000F6E5B001F6D6C1370263F000714F06F485A48D903FE5B913801FF03486D495A04
87C8FCED7FCFED3FFE6F4814386D6D5AA2007F6E6C14786D6D6C14704B6C14F06C6C496C
6C13E0001F91393E3FC0016C6C903AFC1FF003C03D07FC07F007FC1F800001B5D8C001B5
12006C6C90C7EA7FFCD90FF8EC0FF03E437CC047>I<121EEA7F8012FF13C0A213E0A312
7FEA1E601200A413E013C0A312011380120313005A120E5A1218123812300B1C79BE19>
I<1430147014E0EB01C0EB03801307EB0F00131E133E133C5B13F85B12015B1203A2485A
A2120F5BA2121F90C7FCA25AA3123E127EA6127C12FCB2127C127EA6123E123FA37EA27F
120FA27F1207A26C7EA212017F12007F13787F133E131E7FEB07801303EB01C0EB00E014
701430145A77C323>I<12C07E12707E7E121E7E6C7E7F12036C7E7F12007F1378137CA2
7FA2133F7FA21480130FA214C0A3130714E0A6130314F0B214E01307A614C0130FA31480
A2131F1400A25B133EA25BA2137813F85B12015B485A12075B48C7FC121E121C5A5A5A5A
145A7BC323>I<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A3120113
80120313005A120E5A1218123812300B1C798919>44 D<B512FEA617067F961E>I<121E
EA7F80A2EAFFC0A4EA7F80A2EA1E000A0A798919>I<ED0180ED03C01507A21680150FA2
16005DA2151E153EA2153C157CA2157815F8A25D1401A25D1403A25D1407A25D140FA24A
C7FCA2141E143EA2143C147CA2147814F8A25C1301A25C1303A25C1307A25C130FA291C8
FC5BA2131E133EA25BA2137813F8A25B1201A25B1203A25B1207A25B120FA290C9FC5AA2
121E123EA2123C127CA2127812F8A25A1260225B7BC32D>I<EB01FE90380FFFC090383F
03F090387C00F849137C48487F48487F4848EB0F80A2000F15C04848EB07E0A3003F15F0
A290C712034815F8A64815FCB3A26C15F8A56C6CEB07F0A3001F15E0A36C6CEB0FC0A26C
6CEB1F80000315006C6C133E6C6C5B017C5B90383F03F090380FFFC0D901FEC7FC263F7D
BC2D>I<EB01C013031307131F137FEA07FFB5FC139FEAF81F1200B3B3ACEB7FF0B612F8
A31D3D78BC2D>I<EB07FC90383FFF8090B512E03903F01FF83907C007FC390F0001FE00
1E6D7E001C1580003CEC7FC05AED3FE01270B4FC6DEB1FF07FA56C5A6CC7FC120CC813E0
153FA216C0157F168015FF16004A5A5D4A5A4A5A5D4A5A4A5A4AC7FC147E147C5C495A49
5A495A495A49C71270133E133C5B4914E0485A485A485A48C7120148B6FCA25A4815C0B7
FCA3243D7CBC2D>I<EB07FC90383FFF809038F80FE03901E003F839078001FCD80F007F
000E6D7E001E1580D81F80137F486C14C07FA27F5BA2121F6C5AC8138015FF1600A24A5A
A24A5A5DEC07E04A5A023FC7FCEB1FFCECFF809038000FE0EC07F86E7E6E7E6E7E1680ED
7FC0A216E0153FA216F0A2120C123F487E487EA316E0A249137F6CC713C01278EDFF807E
6C4913006C495A3907C007FC3903F80FF0C6B55A013F1380D907F8C7FC243F7CBC2D>I<
150E151E153EA2157EA215FE1401A21403EC077E1406140E141CA214381470A214E0EB01
C0A2EB0380EB0700A2130E5BA25B5BA25B5B1201485A90C7FC5A120E120C121C5AA25A5A
B8FCA3C8EAFE00AC4A7E49B6FCA3283E7EBD2D>I<00061403D80780131F01F813FE90B5
FC5D5D5D15C092C7FC14FCEB3FE090C9FCACEB01FE90380FFF8090383E03E090387001F8
496C7E49137E497F90C713800006141FC813C0A216E0150FA316F0A3120C127F7F12FFA4
16E090C7121F12FC007015C012780038EC3F80123C6CEC7F00001F14FE6C6C485A6C6C48
5A3903F80FE0C6B55A013F90C7FCEB07F8243F7CBC2D>I<EC1FE0ECFFF8903803F03E90
380FC00F90391F000780133E017EEB1FC049133F4848137F12035B12074848EB3F80ED1F
00001F91C7FC5BA2123FA3485AA214FE903887FF8039FF8F07E090389C01F09038B800FC
01B0137E13F0497F16804914C0A2ED1FE0A34914F0A5127FA6123F6D14E0A2121FED3FC0
A26C6C1480A20007EC7F006C6C137E6C6C5B6C6C485A90387E07F06DB45A010F1380D903
FCC7FC243F7CBC2D>I<1238123C123F90B612FCA316F85A16F016E00078C712010070EC
03C0ED078016005D48141E151C153C5DC8127015F04A5A5D14034A5A92C7FC5C141EA25C
A2147C147814F8A213015C1303A31307A3130F5CA2131FA6133FAA6D5A0107C8FC26407B
BD2D>I<EB03FC90381FFF8090387C07E09038F001F83901E0007C48487F48487F48C7FC
ED0F80121E16C0003E1407A4123FA26DEB0F807F6C6C131F6D140001FC133E6C6C5B9038
FF80786C6D5A6CEBF3E06CEBFF806C91C7FC133F6D13C06D7F013F13F801787F48486C7E
3903E01FFF48486C1380260F800313C048487E489038007FE0003E143F007E141F007CEC
0FF01507481403A31501A46C15E0007C1403A2007E15C06C14076CEC0F806DEB1F006C6C
133ED807F05B3901FC03F86CB512E0011F1380D903FCC7FC243F7CBC2D>I<EB03FCEB1F
FF90387E07C09038FC03F048486C7E48486C7E4848137C000F147E4848137F81003F1580
5B007F15C0A2151F12FF16E0A516F0A5127F153FA36C7EA2001F147F120F6C6C13FF6D13
DF000313013900F8039F90387E0F1FD91FFE13E0EB07F090C7FCA2ED3FC0A41680157FD8
0F801400487E486C13FEA24A5A5D49485AEB8007391E000FE0001F495A260FC07FC7FC38
03FFFE6C13F838003FC0243F7CBC2D>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FC
B3121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A2779A619>I<121EEA7F80A2EAFFC0A4EA
7F80A2EA1E00C7FCB3121E127FEAFF80A213C0A4127F121E1200A412011380A312031300
5A1206120E120C121C5A1230A20A3979A619>I<007FB912E0BA12F0A26C18E0CDFCAE00
7FB912E0BA12F0A26C18E03C167BA147>61 D<15074B7EA34B7EA34B7EA34B7EA34B7E15
E7A2913801C7FC15C3A291380381FEA34AC67EA3020E6D7EA34A6D7EA34A6D7EA34A6D7E
A34A6D7EA349486D7E91B6FCA249819138800001A249C87EA24982010E157FA2011E8201
1C153FA2013C820138151FA2017882170F13FC00034C7ED80FFF4B7EB500F0010FB512F8
A33D417DC044>65 D<B712FCEEFF8017F00001903980000FF86C6CC7EA03FE707E701380
EF7FC0EF3FE0A2EF1FF0A218F8A3170F171FA318F0A2EF3FE0177F18C0EFFF804C1300EE
03FCEE0FF8EE7FE091B6C7FC17E091C7EA07FCEE01FE933800FF80EF7FC0EF3FE0EF1FF0
18F8170F18FC1707A218FEA718FC170FA2EF1FF818F0173FEF7FE0EFFFC0040313804848
6C90380FFE00B85A17E094C7FC373E7DBD40>I<DB3FF01306912603FFFE130E020F9038
FF801E913A3FF007E03E9139FF8000F8D903FEC7EA7C7ED907F8EC1EFE4948140FD93FE0
140749481403495A91C812014848150012034848167E5B000F173EA24848161EA2123F5B
180E127FA349160012FFAC127F7F180EA2123FA27F001F171E181C6C7EA20007173C6D16
386C6C1678000117706C6C16F06EEC01E06D6C15C06D6C1403D90FF0EC07806D6CEC1F00
D903FE143E902600FF8013F891393FF007F0020FB512C0020391C7FC9138003FF037427B
BF42>I<B712FCEEFF8017E000019039C0001FF86C6C48EB03FEEE00FF717E717EEF0FE0
84717E717E170184717EA21980187F19C0A3F03FE0A519F0AB19E0A5F07FC0A21980A218
FF19004D5AA24D5A6017074D5A4D5AEF7FC04DC7FCEE03FE48486CEB1FF8B85A178004FC
C8FC3C3E7DBD45>I<B912E0A300019038C000016C6C48EB001FEF0FF01703A217011700
A31870A41838161CA41800A2163CA2167C16FC150391B5FCA3EC80031500167C163CA216
1CA21807A3180E93C7FCA4181E181CA2183CA2187CA218F8170117031707171F48486CEB
01FFB912F0A3383E7DBD3E>I<B91280A300019038C000036C6C48EB007FEF1FC0170F17
07A21703A31701A4EF00E0A21638A31800A31678A216F81501150791B5FCA3EC80071501
15001678A21638A693C8FCAF3801FFE0B612F0A3333E7DBD3B>I<DB3FE0130C912603FF
FE131C021F9038FF803C913A7FF00FC07C9139FF0001F0D903FC90380078FC4948143DD9
1FE0141F4948140F4948140701FF15034890C8FC491501485A000716005B000F177C5B00
1F173CA2485AA2181C127FA25B95C7FC12FFAB041FB512F0127FA26D9139000FFE00EF03
FC123FA27F121FA26C7EA212077F12036C7E7F6C7F6D6C14076D7E6D6C140FD907F8141E
D903FEEC3C7C902600FF80EBF83C913A7FF007F01C021FB5EAC00C020391C8FC9138003F
F03C427BBF47>I<B6D8C01FB512F8A3000101E0C7383FFC0026007F80EC0FF0B3A691B7
FCA30280C7120FB3A92601FFE0EC3FFCB6D8C01FB512F8A33D3E7DBD44>I<B612F0A3C6
EBF000EB3FC0B3B3B2EBFFF0B612F0A31C3E7EBD21>I<011FB512FCA3D9000713006E5A
1401B3B3A6123FEA7F80EAFFC0A44A5A1380D87F005B007C130700385C003C495A6C495A
6C495A2603E07EC7FC3800FFF8EB3FC026407CBD2F>I<B600C090387FFFFCA3000101E0
C7000F138026007F80913807FE0018F818E0604D5A4DC7FC173E5F5F4C5A4C5A4C5A4C5A
4CC8FC163E5E5E4B5A4B5AED07804B7E151F4B7E4B7E15FF913881EFF8913883C7FCEC87
8791388F03FE91389E01FF14BCDAF8007F4A6D7E5C4A6D7E4A6D7EA2707E707EA2707E70
7EA2707F717E84173F717E717EA2717E848419802601FFE04A13C0B600C090B6FCA3403E
7DBD47>I<B612F8A3000101E0C9FC38007F80B3B0EF0380A517071800A45FA35FA25F5F
5F4C5A160748486C133FB8FCA3313E7DBD39>I<B500C093383FFFF0A300016D93387FF8
00D8007F18E0D977F016EFA3D973F8ED01CFA2D971FCED038FA3D970FEED070FA26E150E
80A26E6C141CA36E6C1438A26E6C1470A36E6C14E0A26E6CEB01C0A36E6CEB0380A36E6C
EB0700A2037F130EA36F6C5AA26F6C5AA36F6C5AA25FED07F0A2923803F9C0A36FB45AA2
6F90C7FCA213F8486C147ED807FFEF3FF8B500F8013C011FB512F0A34C3E7DBD53>I<B5
6C91B512F88080D8007F030713006EEC01FC6E6E5A1870EB77FCEB73FEA2EB71FF01707F
A26E7E6E7EA26E7E6E7EA26E7E6E7EA26E7E6E7FA26F7E6F7EA26F7E6F7EA26F7E6F7EA2
6F7E6F1380A2EE7FC0EE3FE0A2EE1FF0EE0FF8A2EE07FCEE03FEA2EE01FF7013F0A2177F
173FA2171F170FA2170701F81503487ED807FF1501B500F81400A218703D3E7DBD44>I<
ED7FE0913807FFFE91391FC03F8091397E0007E04948EB03F8D907F0EB00FE4948147F49
486E7E49486E7E49C86C7E01FE6F7E00018349150300038348486F7EA248486F7EA2001F
188049167F003F18C0A3007F18E049163FA300FF18F0AC007F18E06D167FA4003F18C0A2
6C6CEEFF80A36C6C4B1300A26C6C4B5A00035F6D150700015F6C6C4B5A6D5E6D6C4A5A6D
6C4A5A6D6C4AC7FC6D6C14FED901FCEB03F8D9007FEB0FE091391FC03F80912607FFFEC8
FC9138007FE03C427BBF47>I<B712F8EEFF8017E000019039C0003FF86C6C48EB07FCEE
01FE707EEF7F80EF3FC018E0A2EF1FF0A218F8A818F0A2EF3FE0A218C0EF7F80EFFF004C
5AEE07FCEE3FF091B612C04CC7FC0280C9FCB3A73801FFE0B612C0A3353E7DBD3E>I<ED
7FE0913807FFFE91391FC03F8091397F000FE0D901FCEB03F8D907F0EB00FE4948147F49
486E7E49486E7E49C86C7E498248486F7E49150300038348486F7EA2000F834981001F18
80A24848EE7FC0A3007F18E0A249163FA200FF18F0AC007F18E0A26D167FA3003F18C0A2
6C6CEEFF80A3000F18006D5D0007DA0F805B6C6C90393FE003FCED70706C6C496C485A6C
6C48486C485A017FD9800E5BD93F819038061FC0D91FC19038073F80D90FE14AC7FCD907
F1EB03FE902601FDC013F8903A007EE007E091271FF03FC013180207B5FC9139007FE1E0
DB0001143883711378A2706C13F0EFFF0318FFA27113E0A37113C0711380711300715AEF
01F83D527BBF47>I<B712C016FCEEFF800001D9C00013E06C6C48EB1FF0EE07FCEE01FE
707E84717EA2717EA284A760177F606017FF95C7FCEE01FCEE07F8EE1FE0EEFF8091B500
FCC8FC16F091388001FCED003FEE1FC0707E707E83160383160183A383A484A4F0C00419
0EA28218E0057F131E2601FFE0161CB600C0EB3FF094381FF83805071370CA3801FFE094
38003F803F407DBD43>I<D907FC130C90391FFF801C017FEBF03C3901FC03F83A03F000
7E7CD807C0EB1FFC4848130F001F140748C71203003E1401007E1400A2007C157C12FCA2
163CA36C151CA27EA26C6C14007F7FEA3FF8EBFF806C13F86CEBFF806C14F06C14FC6C14
FF6C15C0013F14E0010714F0EB007F020713F89138007FFC150FED07FE15031501ED00FF
A200E0157FA3163FA27EA3163E7E167E6C157C6C15FC6C15F86D13016DEB03F06DEB07E0
D8F9FCEB0FC03AF07F803F8090391FFFFE00D8E00713F839C0007FC028427BBF33>I<00
3FB91280A3903AF0007FE001018090393FC0003F48C7ED1FC0007E1707127C00781703A3
00701701A548EF00E0A5C81600B3B14B7E4B7E0107B612FEA33B3D7DBC42>I<B600C090
B512F8A3000101E0C70007130026007F80EC01FC715A1870B3B3A4013F16F06E5DA21701
011F5E80010F15036E4A5A010793C7FC6D6C5C6D6C141E6D6C5C027F14F86E6C485A9139
0FF00FE00203B51280020049C8FCED1FF03D407DBD44>I<B691380FFFFEA3000301E002
0113E06C01809138007F806CEF3F00017F163E181C6E153C013F1638A26E1578011F1670
A26D6C5DA26E140101075EA26E140301035EA26D6C4AC7FCA2806D150EA26F131E027F14
1CA26F133C023F1438A26E6C5BA26F13F0020F5CA2EDF80102075CA26E6C485AA2EDFE07
020191C8FCA26F5A6E130EA2ED7F9CA216DCED3FF8A36F5AA36F5AA26F5AA36F5A3F407E
BD44>I<B500FE017FB5D88007B5FCA3000301C0010101E0C713F86C90C849EC3FE07148
EC0F807E7215006E143F017F190E84A26D6C60A24D7E6D6C60A2EFE7F86D6C60A2933801
C3FC6E18F001076104037F6E0281140101036104077F17006D6C4D5AA2040EEB7F806D6C
4DC7FCA24CEB3FC0DA7F80160EA24CEB1FE003C0161E023F171C047814F0DBE070010F13
3C021F173804F014F84C1307DA0FF05EA2DBF1C0EB03FCDA07F95EA2DBFB80EB01FEDA03
FF6F5AA293C8FCA26E5FA24B157F020094C8FCA24B81037C153EA20378151E0338151C58
407EBD5D>I<B66C0103B51280A3000101F0C8EBF8006C6C48ED3FC0725A013F041EC7FC
6D7E606D6C15386D6C1578606D6C5D6E14016D5E6D6D1303606E6C49C8FC6E6C5B170E6E
6C131E171C6E6C5B6E6C137817706E6C13F06F5B6E13016EEB83C05FED7FC7DB3FE7C9FC
16EFED1FFE5E150F6F5AB3A4ED1FFC020FB512FCA3413E7FBD44>89
D<003FB712F8A391C7EA1FF013F801E0EC3FE00180EC7FC090C8FC003EEDFF80A2003C4A
1300007C4A5A12784B5A4B5AA200704A5AA24B5A4B5AA2C8485A4A90C7FCA24A5A4A5AA2
4A5AA24A5A4A5AA24A5A4A5AA24990C8FCA2495A4948141CA2495A495AA2495A495A173C
495AA24890C8FC485A1778485A484815F8A24848140116034848140F4848143FED01FFB8
FCA32E3E7BBD38>I<EAFFFCA4EAF000B3B3B3B3ABEAFFFCA40E5B77C319>I<EAFFFCA4EA
003CB3B3B3B3ABEAFFFCA40E5B7FC319>93 D<EB0FF8EBFFFE3903F01F8039078007E000
0F6D7E9038E001F8D81FF07F6E7EA3157F6C5AEA0380C8FCA4EC1FFF0103B5FC90381FF8
7FEB7F803801FC00EA07F8EA0FE0485A485AA248C7FCEE038012FEA315FFA3007F5BEC03
BF3B3F80071F8700261FC00E13CF3A07F03C0FFE3A01FFF807FC3A003FC001F0292A7DA8
2D>97 D<EA01FC12FFA3120712031201B1EC03FC91381FFF8091387C07E09039FDE001F0
9039FFC000FC4A137E91C77E49158049141F17C0EE0FE0A217F0A2160717F8AA17F0A216
0FA217E0161F17C06D1580EE3F006D5C6E13FE9039F3C001F89039F1E003F09039E0780F
C09026C03FFFC7FCC7EA07F82D407EBE33>I<49B4FC010F13E090383F00F8017C131E48
48131F4848137F0007ECFF80485A5B121FA24848EB7F00151C007F91C7FCA290C9FC5AAB
6C7EA3003FEC01C07F001F140316806C6C13076C6C14000003140E6C6C131E6C6C137890
383F01F090380FFFC0D901FEC7FC222A7DA828>I<ED01FC15FFA3150715031501B114FF
010713E190381F80F990387E003D49131FD803F81307485A49130348481301121F123F5B
127FA290C7FCA25AAA7E7FA2123FA26C7E000F14037F000714076C6C497E6C6C497ED800
7C017913F890383F01F190380FFFC1903A01FE01FC002D407DBE33>I<EB01FE90380FFF
C090383F03F09038FC01F848486C7E4848137E48487F000F158049131F001F15C0484813
0FA2127F16E090C7FCA25AA290B6FCA290C9FCA67EA27F123F16E06C7E1501000F15C06C
6C13036DEB07806C6C1400C66C131E017E5B90381F80F8903807FFE0010090C7FC232A7E
A828>I<EC1FC0EC7FF8903801F83C903807E07E90380FC0FFEB1FC1EB3F811401137FEC
00FE01FE137C1500AEB6FCA3C648C7FCB3AE487E007F13FFA320407EBF1C>I<167C9039
03F801FF903A1FFF078F8090397E0FDE1F9038F803F83803F001A23B07E000FC0600000F
6EC7FC49137E001F147FA8000F147E6D13FE00075C6C6C485AA23901F803E03903FE0FC0
26071FFFC8FCEB03F80006CAFC120EA3120FA27F7F6CB512E015FE6C6E7E6C15E06C8100
03813A0FC0001FFC48C7EA01FE003E140048157E825A82A46C5D007C153E007E157E6C5D
6C6C495A6C6C495AD803F0EB0FC0D800FE017FC7FC90383FFFFC010313C0293D7EA82D>
I<EA01FC12FFA3120712031201B1EC01FE913807FFC091381E07E091387803F09138E001
F8D9FDC07F148001FF6D7E91C7FCA25BA25BB3A6486C497EB5D8F87F13FCA32E3F7DBE33
>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCACEA01FC127FA3120712031201B3AC48
7EB512F0A3143E7DBD1A>I<1478EB01FEA2EB03FFA4EB01FEA2EB00781400AC147FEB7F
FFA313017F147FB3B3A5123E127F38FF807E14FEA214FCEB81F8EA7F01387C03F0381E07
C0380FFF803801FC00185185BD1C>I<EA01FC12FFA3120712031201B292B51280A39238
3FFC0016E0168093C7FC153C5D5D4A5AEC07C04A5A4AC8FC143E147F4A7E13FD9038FFDF
C0EC9FE0140F496C7E01FC7F496C7E1401816E7E81826F7E151F826F7EA282486C14FEB5
39F07FFFE0A32B3F7EBE30>I<EA01FC12FFA3120712031201B3B3B1487EB512F8A3153F
7DBE1A>I<2701F801FE14FF00FF902707FFC00313E0913B1E07E00F03F0913B7803F03C
01F80007903BE001F87000FC2603F9C06D487F000101805C01FBD900FF147F91C75B13FF
4992C7FCA2495CB3A6486C496CECFF80B5D8F87FD9FC3F13FEA347287DA74C>I<3901F8
01FE00FF903807FFC091381E07E091387803F000079038E001F82603F9C07F0001138001
FB6D7E91C7FC13FF5BA25BB3A6486C497EB5D8F87F13FCA32E287DA733>I<14FF010713
E090381F81F890387E007E01F8131F4848EB0F804848EB07C04848EB03E0000F15F04848
EB01F8A2003F15FCA248C812FEA44815FFA96C15FEA36C6CEB01FCA3001F15F86C6CEB03
F0A26C6CEB07E06C6CEB0FC06C6CEB1F80D8007EEB7E0090383F81FC90380FFFF0010090
C7FC282A7EA82D>I<3901FC03FC00FF90381FFF8091387C0FE09039FDE003F03A03FFC0
01FC6C496C7E91C7127F49EC3F805BEE1FC017E0A2EE0FF0A3EE07F8AAEE0FF0A4EE1FE0
A2EE3FC06D1580EE7F007F6E13FE9138C001F89039FDE007F09039FC780FC0DA3FFFC7FC
EC07F891C9FCAD487EB512F8A32D3A7EA733>I<02FF131C0107EBC03C90381F80F09039
7F00387C01FC131CD803F8130E4848EB0FFC150748481303121F485A1501485AA448C7FC
AA6C7EA36C7EA2001F14036C7E15076C6C130F6C7E6C6C133DD8007E137990383F81F190
380FFFC1903801FE0190C7FCAD4B7E92B512F8A32D3A7DA730>I<3901F807E000FFEB1F
F8EC787CECE1FE3807F9C100031381EA01FB1401EC00FC01FF1330491300A35BB3A5487E
B512FEA31F287EA724>I<90383FC0603901FFF8E03807C03F381F000F003E1307003C13
03127C0078130112F81400A27E7E7E6D1300EA7FF8EBFFC06C13F86C13FE6C7F6C148000
0114C0D8003F13E0010313F0EB001FEC0FF800E01303A214017E1400A27E15F07E14016C
14E06CEB03C0903880078039F3E01F0038E0FFFC38C01FE01D2A7DA824>I<131CA6133C
A4137CA213FCA2120112031207001FB512C0B6FCA2D801FCC7FCB3A215E0A912009038FE
01C0A2EB7F03013F138090381F8700EB07FEEB01F81B397EB723>I<D801FC14FE00FF14
7FA3000714030003140100011400B3A51501A31503120015076DEB06FF017E010E13806D
4913FC90381FC078903807FFE00100903880FE002E297DA733>I<B539E00FFFE0A32707
FE000313006C48EB00FC5E00015D7F00005DA26D13016D5CA26D6C485AA2ECC007011F91
C7FCA290380FE00EA2ECF01E0107131CA26D6C5AA2ECFC7801011370A2ECFEF001005BA2
EC7FC0A36E5AA26EC8FCA3140E2B287EA630>I<B53BC3FFFE03FFF8A3290FFE003FE000
13C06C486D48EB3F806C4817006D010F141E00016F131C15076D163C00004A6C1338A201
7F5E4B7E151DD93F805DED3DFC1538D91FC04A5AED78FE9238707E03D90FE0017F5BEDE0
3F02F0140701070387C7FC9138F1C01F02F9148F010315CE9138FB800F02FF14DE6D15FC
ED00076D5DA24A1303027E5CA2027C1301023C5C023813003D287EA642>I<B539F01FFF
E0A30003D9C00F1300C690388007F8D97F0013E002805BD93FC05B011F49C7FC90380FE0
0EECF01E6D6C5A01035B6D6C5A6E5AEB00FF6E5A6E5A81141F814A7E81147BECF1FC9038
01E1FEECC0FF01037F49486C7ED90F007F011E6D7E013E130F496D7E01FC80486C80000F
4A7EB539803FFFF8A32D277FA630>I<B539E00FFFE0A32707FE000313006C48EB01FC6F
5A00015D7F00005DA2017F495AA2EC8003013F5CA26D6C48C7FCA26E5A010F130EA26D6C
5AA2ECF83C01031338A26D6C5AA2ECFEF001005BA2EC7FC0A36E5AA36EC8FCA2140EA214
1E141C143C1438A2147800181370127EB45BA2495AA248485AD87E07C9FCEA780EEA3C3C
EA1FF8EA07E02B3A7EA630>I<001FB61280A2EBE0000180140049485A001E495A121C4A
5A003C495A141F00385C4A5A147F5D4AC7FCC6485AA2495A495A130F5C495A90393FC003
80A2EB7F80EBFF005A5B484813071207491400485A48485BA248485B4848137F00FF495A
90B6FCA221277EA628>I<B812F0A22C0280982D>I E /Fq 78 124
df<91393FE00FE0903A01FFF83FF8903A07E01EF83C903A1F800FF07E903A3F001FE0FE
017E133F4914C0485A1738484890381F8000ACB812C0A33B03F0001F8000B3A7486C497E
B50083B5FCA32F357FB42D>11 D<EC1FE0ECFFFC903803F01E90390FC00780EB1F809039
3F000FC0017E131F5BA2485AED0F8092C7FCA9ED0FC0B7FCA33901F8001F150FB3A6486C
EB1FE0267FFFC1B5FCA328357FB42B>I<DA1FE013FF9126FFFC0713E0903B03F01E1F80
F0903B0FC0077E003CD91F805B90273F001FF8137E017E4A13FE495CA248485C030F147C
95C7FCA9187EB912FEA33B01F8000FC000187EB3A6486C496C13FF297FFFC1FFFE0F13F8
A33D357FB440>14 D<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E
120C121C5A5A126009177AB315>39 D<14C01301EB0380EB0F00130E5B133C5B5BA2485A
485AA212075B120F90C7FC5AA2121E123EA3123C127CA55AB0127CA5123C123EA3121E12
1FA27E7F12077F1203A26C7E6C7EA213787F131C7F130FEB0380EB01C01300124A79B71E
>I<12C07E1270123C121C7E120F6C7E6C7EA26C7E6C7EA27F1378137C133C133EA2131E
131FA37F1480A5EB07C0B0EB0F80A514005BA3131E133EA2133C137C137813F85BA2485A
485AA2485A48C7FC120E5A123C12705A5A124A7CB71E>I<156015F0B3A4007FB812C0B9
12E0A26C17C0C800F0C8FCB3A4156033327CAB3C>43 D<123C127EB4FCA21380A2127F12
3D1201A412031300A25A1206120E120C121C5A5A126009177A8715>I<B512F0A514057F
921A>I<123C127E12FFA4127E123C08087A8715>I<1530157815F8A215F01401A215E014
03A215C01407A21580140FA215005CA2143EA2143C147CA2147814F8A25C1301A25C1303
A25C1307A2495AA291C7FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B1203A2
485AA25B120FA290C8FC5AA2121E123EA2123C127CA2127812F8A25A12601D4B7CB726>
I<EB0FE0EB7FFCEBF83E3903E00F803907C007C0EB8003000F14E0391F0001F0A24814F8
A2003E1300007E14FCA500FE14FEB2007E14FCA56CEB01F8A36C14F0A2390F8003E03907
C007C0A23903E00F803900F83E00EB7FFCEB0FE01F347DB126>I<13075B5B137FEA07FF
B5FC13BFEAF83F1200B3B3A2497E007FB51280A319327AB126>I<EB3FC0EBFFF0000313
FC380F80FF391E007F80001CEB3FC048EB1FE048130F15F00060130712FC6C14F87E1403
A3007E1307123CC7FC15F0A2140F15E0EC1FC0A2EC3F801500147E5C495A5C495A495A49
5A49C7FC133E133C4913185B485A48481330485A48C7FC001C1470001FB512F05A5AB612
E0A31D327CB126>I<EB1FE0EBFFFC4813FF3907E03F80390F001FC0001EEB0FE0001CEB
07F0123F018013F8140313C01380A2381F0007C7FC15F0A2EC0FE015C0141FEC3F80EC7E
00EB01F8EB7FE014FCEB003FEC1FC0EC0FE0EC07F015F8140315FC140115FEA3127EB4FC
A415FC48130312780070EB07F86C14F0003C130F001FEB1FE0390FE03F800003B51200C6
13FCEB1FE01F347DB126>I<EC01C0A214031407A2140F141FA2143F147F146F14CF1301
EB038F140F1307130E130C131C13381330137013E013C0EA0180120313001206120E120C
5A123812305A12E0B71280A3C7380FC000A94A7E0107B51280A321337EB226>I<000C14
C0380FC00F90B5128015005C5C14F014C0D80C18C7FC90C8FCA9EB0FC0EB7FF8EBF07C38
0FC03F9038001F80EC0FC0120E000CEB07E0A2C713F01403A215F8A41218127E12FEA315
F0140712F8006014E01270EC0FC06C131F003C14806CEB7F00380F80FE3807FFF8000113
E038003F801D347CB126>I<14FE903807FF80011F13E090383F00F0017C13703901F801
F8EBF003EA03E01207EA0FC0EC01F04848C7FCA248C8FCA35A127EEB07F0EB1FFC38FE38
1F9038700F809038E007C039FFC003E0018013F0EC01F8130015FC1400A24814FEA5127E
A4127F6C14FCA26C1301018013F8000F14F0EBC0030007EB07E03903E00FC03901F81F80
6CB51200EB3FFCEB0FE01F347DB126>I<1230123C003FB6FCA34814FEA215FC0070C712
3800601430157015E04814C01401EC0380C7EA07001406140E5C141814385CA25CA2495A
1303A3495AA2130FA3131F91C7FCA25BA55BA9131C20347CB126>I<EB0FE0EB7FFC90B5
FC3903F01F803907C007C0390F0003E0000EEB01F0001E1300001C14F8003C1478A3123E
A2003F14F86D13F0EBC001D81FF013E09038F803C0390FFE07803907FF0F006C13DE6C13
F87EEB3FFE8001F713C0D803E313E0D8078013F0390F007FF8001E131F003EEB07FC003C
1303481301EC007E12F848143EA2151EA37E153C1278007C14787E6C14F0390F8003E039
07F01FC00001B5120038007FFCEB1FE01F347DB126>I<EB0FE0EB7FF8EBFFFE3803F83F
3907E00F80390FC007C0D81F8013E0EC03F0EA3F0048EB01F8127EA200FE14FC1400A415
FEA5007E1301A2127F7E1403EA1F80000F13073807C00E3803E01C3801F03838007FF090
381FC0FC90C7FC1401A215F8A215F01403001F14E0383F800715C0140FEC1F809038003F
00001C137E381F01FC380FFFF0000313C0C690C7FC1F347DB126>I<123C127E12FFA412
7E123C1200B0123C127E12FFA4127E123C08207A9F15>I<007FB812C0B912E0A26C17C0
CCFCAC007FB812C0B912E0A26C17C033147C9C3C>61 D<15E0A34A7EA24A7EA34A7EA3EC
0DFE140CA2EC187FA34A6C7EA202707FEC601FA202E07FECC00FA2D901807F1507A24948
6C7EA301066D7EA2010E80010FB5FCA249800118C77EA24981163FA2496E7EA3496E7EA2
0001821607487ED81FF04A7ED8FFFE49B512E0A333367DB53A>65
D<B7FC16E016F83A03FC0003FE0001EC00FFEE7F80EE3FC0161F17E0160F17F0A617E016
1F17C0EE3F80EE7F0016FEED03FC90B612F05E9039FC0007FCED00FEEE3F80EE1FC0EE0F
E017F0160717F8160317FCA617F81607A2EE0FF0EE1FE0163FEE7FC00003913803FF00B7
5A16F816C02E337DB236>I<DA03FE130C91393FFF801C91B512E0903A03FE01F83C903A
0FF0003C7CD91FC0EB0EFCD97F80130701FEC7120348481401000315005B4848157C485A
173C485A171C123F5B007F160CA390C9FC481600AB7E6D150CA3123F7F001F161C17186C
7E17386C6C15306C6C15706D15E012016C6CEC01C0D97F80EB0380D91FC0EB0F00D90FF0
131ED903FE13FC0100B512F0023F13C0DA03FEC7FC2E377CB437>I<B77E16F016FE3A01
FE0001FF00009138003FC0EE0FE0707E707E707E707E177E177FEF3F80A2EF1FC0A3EF0F
E0A418F0AA18E0A3171F18C0A21880173F18005F17FE5F4C5AEE07F04C5AEE3FC000014A
B45AB748C7FC16F8168034337EB23B>I<B812C0A3D803FCC7127F0001150FEE03E01601
A21600A21760A403061330A41700150EA2151E157E90B512FEA39038FC007E151E150EA2
1506170CA3171892C7FCA41738A21770A217F01601160316070003157FB812E0A32E337D
B234>I<B81280A3D803FCC7FC0001151FEE07C01603A21601A21600A41760150CA31700
A2151CA2153C15FC90B5FCA3EBFC00153C151CA2150CA592C8FCAB487EB512FEA32B337D
B232>I<DA03FE130C91393FFF801C91B512E0903A03FE01F83C903A0FF0003C7CD91FC0
EB0EFCD97F80130701FEC7120348481401000315005B4848157C485A173C485A171C123F
5B007F160CA390C9FC4893C7FCAA0303B512E07E7F92390003FE00705A123F7F121FA26C
7E7F12076C7E7F6C6C14036C7E6D6C1307D91FC0EB0E7CD90FF0EB1C3CD903FEEBF81C01
00B5EAF00C023F01C0C7FCDA03FEC8FC33377CB43C>I<B5D8FE03B512F8A3000190C738
07FC006C486E5AB390B7FCA349C71203B3A3486C4A7EB5D8FE03B512F8A335337EB23A>
I<B512FEA3000113006C5AB3B3A7487EB512FEA317337EB21C>I<017FB5FCA39038003F
E0EC1FC0B3B1127EB4FCA4EC3F805A0060140000705B6C13FE6C485A380F03F03803FFC0
C690C7FC20357DB227>I<B500FE903807FFF8A3000190C7000113006C48EC00FC17F04C
5A4C5A4CC7FC160E5E5E5E5E4B5A4B5A4BC8FC150E5D5D15F84A7E14034A7EEC0EFF5C4A
6C7E4A6C7EECE01FD9FFC07F4A6C7E4A6C7E5B6F7E6F7EA26F7E707EA2707E707E160F83
707E707EA283486C913807FF80B500FE013F13FCA336337EB23C>I<B512FEA3D803FEC9
FC6C5AB3A9EE0180A416031700A45EA25E5E5E5E16FE00031407B7FCA329337DB230>I<
D8FFFC923801FFF86D5DA20003EFFE00D801BFED06FCA3D99F80140CA2D98FC01418A3D9
87E01430A2D983F01460A3D981F814C0A3D980FCEB0180A2027EEB0300A36E1306A26E6C
5AA36E6C5AA36E6C5AA26E6C5AA36E6C5AA3913800FD80A2037FC7FCA3486C133ED80FF0
4B7EB5011C90387FFFF8A33D337CB246>I<D8FFFE91381FFFF87F80C6030013006E143C
D9DFE01418EBCFF0A2EBC7F8EBC3FCA2EBC1FEEBC0FF6E7EA26E7E6E7EA26E7E6E7E6E7E
A26E7E6E7EA2ED7F80ED3FC0ED1FE0A2ED0FF0ED07F8A2ED03FCED01FEED00FFA2EE7F98
EE3FD8A2EE1FF8160F1607A216031601A2486C1400D807F81578B500C01438A217183533
7EB23A>I<EC07FC91387FFFC0903901FC07F0903907E000FCD90F80133E013FC76C7E01
7E6E7E496E7E48486E7E48486E7EA248486E7E000F8249157E001F167FA24848ED3F80A2
007F17C0A290C9121FA24817E0AB6C17C06D153FA3003F17806D157FA2001F17006D5D00
0F5E6C6C4A5AA26C6C4A5A00015E6C6C4A5A017E4A5A6D4A5AD91FC0017FC7FCD907E013
FC903901FC07F09039007FFFC0DA07FCC8FC33377CB43C>I<B612FEEDFFC016F03A03FC
0007FC0001EC00FE167FEE3F80EE1FC017E0160FA217F0A617E0A2EE1FC0A2EE3F80EE7F
0016FEED07F890B65A168001FCC9FCB3A2487EB512F8A32C337DB234>I<EC07FC91387F
FFC0903901FC07F0903907E000FC4948137E013FC7EA1F80017E6E7E496E7E48486E7E00
038249140148486E7E000F8249157E001F167FA24848ED3F80A2007F17C0A390C9121F48
17E0AB6C17C0A26D153FA2003F1780A26D157F001F1700A2270FE001F013FE0007D907FC
5B9039F00E0E013B03F80C0703F8000190391C0383F03B00FC180187E0017EECCFC0013F
ECDF8090271F9C00FFC7FCD907EC13FC902701FE07F013609038007FFF913807FC7091C7
007813E0A2EE7C01EE7E0393387F07C0EE3FFFA21880821800705A705AEE01F033447CB4
3C>I<B612FCEDFF8016F03A01FE0007FC0000EC01FEED007F707E707E83160F83A65FA2
4C5AA24C5A047EC7FC4B5AED0FF090B612C093C8FC9039FE001FC0ED07F06F7E6F7E1500
82167E167FA583A5180C17C0A2043F131C486C1618B500FEEB1FE0040F1338933807F070
C93801FFE09338003F8036357EB239>I<90381FE00390387FFC0748B5FC3907F01FCF39
0F8003FF48C7FC003E80814880A200788000F880A46C80A27E92C7FC127F13C0EA3FF013
FF6C13F06C13FF6C14C06C14F0C680013F7F01037F9038003FFF140302001380157F153F
ED1FC0150F12C0A21507A37EA26CEC0F80A26C15006C5C6C143E6C147E01C05B39F1FC03
F800E0B512E0011F138026C003FEC7FC22377CB42B>I<007FB712FEA390398007F001D8
7C00EC003E0078161E0070160EA20060160600E01607A3481603A6C71500B3AB4A7E011F
B512FCA330337DB237>I<B500FE90381FFFF8A3000190C813006C48153C1718B3AF1738
017F1530A217706D6C1460011F15E06E495A010F14036D6C495A6D6C49C7FCD901FC131E
6DB413FC91383FFFF0020F13C0020190C8FC35357EB23A>I<B500F0903803FFF8A3D807
FEC8EA7FC06C48ED1F000001161E6D151C00001618A26D15386D1530A26D6C5CA26E14E0
011F5DA26D6C495AA28001074AC7FCA26D6C1306A28001015CA26E131C01001418806E5B
A2ED8070023F1360A26E6C5AA215E1020F5BA2DA07F3C8FCA215FBEC03FEA36E5AA26E5A
A31570A235357EB23A>I<B5D8F007B539800FFFF0A3000390C7273FF000011300D801FC
6E48EB007C1A386D140F00001930836D020715706D1860A26E496C14E0013F60A26ED919
FC1301011F60A26ED930FE1303010F95C7FCA26ED9607F5B01071706A26E9039C03F800E
0103170CA2913BFC01801FC01C01011718A2913BFE03000FE03801001730A2DAFF06EB07
F0027F5EA2038CEB03F8023F5EA203D8EB01FC021FEDFD80A203F0EB00FF020F93C8FCA2
4B800207157EA24B143E0203153CA24B141C020115184C357FB24F>I<267FFFFC90B512
C0A3000101E090381FF80026007F80EB0FC0013F6E5A6E91C7FC6D6C130E010F140C6E5B
6D6C133801035C6E13606D6C13E06D6C485A5EDA7F83C8FCEC3FC715C6EC1FECEC0FFC5D
14076E7EA26E7E815C6F7E9138063FC0140E4A6C7E9138180FF0EC380702707F91386003
FCECC0010101804A6C7E49C77E4981010E6E7E010C6E7E131C496E7E01786E7E13FCD807
FEEC1FFEB56C90B512F8A335337EB23A>I<B500F8ECFFFEA300030180EC3FE06C90C8EA
1F806CEE0E006D6C5C6D6C141817386D6C14305F6D6C14E06D6C5C16016D6C5C6D6C49C7
FC5E6D6C13065E91387F801C91383FC018163891381FE0306E6C5A16E06E6C5AEDF980EC
03FF6E90C8FC5D1400B14A7E91B512FCA337337FB23A>I<003FB612FCA39039F80007F8
13C090C7EA0FF0003EEC1FE0123C0038EC3FC00078EC7F801270EDFF004A5AA20060495A
A24A5A4A5AC7FC4A5A4A5AA24A5A4AC7FCA2495A495AA2495A495AA24948130C495AA249
5A49C7FCA24848141CA2485A485A1638485A4848147816F84848130148481307153FB7FC
A326337CB22F>I<EAFFF0A4EAF000B3B3B3ADEAFFF0A40C4B79B715>I<EAFFF0A41200B3
B3B3AD12FFA40C4B7FB715>93 D<EB7F803803FFF0380F80FC381C003E003F133F6D6C7E
6E7EA26E7EEA1F00C7FCA4EB01FF131FEBFF873803FC07EA0FF0EA1FC0EA3F80127F1300
4815C05AA3140FA26C131F6C133B3A3F8071F180391FC1E1FF2607FFC013003900FE003C
22237DA126>97 D<EA03F012FFA312071203AEEC3F80ECFFE09038F3C0F89038F7007E01
FE7F49EB1F8049EB0FC05BED07E016F0A2150316F8AA16F0150716E0A2ED0FC07F6DEB1F
8001ECEB3F0001CF137C90388381F8903801FFE0C76CC7FC25357EB32B>I<EB07F8EB3F
FF9038FC07C03901F000E03903E003F03807C007120FEA1F80123F90380003E04890C7FC
A2127E12FEAA127FA26C14187F001F14386D1330000F14706C6C13E03903F001C03900FC
0F8090383FFE00EB07F01D237EA122>I<153FEC0FFFA3EC007F81AEEB07F0EB3FFCEBFC
0F3901F003BF3907E001FF48487E48487F8148C7FCA25A127E12FEAA127E127FA27E6C6C
5BA26C6C5B6C6C4813803A03F007BFFC3900F81E3FEB3FFCD90FE0130026357DB32B>I<
EB0FE0EB7FFCEBF83F3903F00F80D807E013C0390FC007E0381F800315F0EA3F00140148
14F8127EA212FEA2B6FCA248C8FCA5127E127FA26C1418A26C6C1338000F14306D13706C
6C13E03901F003C03900FC0F00EB3FFEEB07F01D237EA122>I<EB01FCEB07FF90381F07
8090383E0FC0EB7C1F13FCEA01F8A20003EB070049C7FCACB512F0A3D803F0C7FCB3A748
7E387FFFE0A31A357FB417>I<151F90391FC07F809039FFF8E3C03901F07FC73907E03F
033A0FC01F83809039800F8000001F80EB00074880A66C5CEB800F000F5CEBC01F6C6C48
C7FCEBF07C380EFFF8380C1FC0001CC9FCA3121EA2121F380FFFFEECFFC06C14F06C14FC
4880381F0001003EEB007F4880ED1F8048140FA56C141F007C15006C143E6C5C390FC001
F83903F007E0C6B51280D91FFCC7FC22337EA126>I<EA03F012FFA312071203AEEC1FC0
EC7FF09038F1E0FC9038F3807C9038F7007E13FE497FA25BA25BB3486CEB7F80B538C7FF
FCA326347EB32B>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCAAEA07E012FFA3120F
1207B3A6EA0FF0B5FCA310337EB215>I<EB03C0EB07E0EB0FF0A4EB07E0EB03C090C7FC
AAEB03F013FFA313071303B3B01238127C00FE13E0130714C0130F007C138038381F00EA
1FFCEA07F0144384B217>I<EA03F012FFA312071203AF913803FFE0A36E1300EC00F8EC
01E05D4A5A020FC7FC141C5C5C14F0EBF3F8EBF7FC13FEEBFC7EEBF87F496C7E141F6E7E
8114076E7E8114016E7E81486CEBFF80B500C313F0A324347EB329>I<EA07E012FFA312
0F1207B3B3A7EA0FF0B5FCA310347EB315>I<2703F01FE013FF00FF90267FF80313C090
3BF1E07C0F03E0903BF3803E1C01F02807F7003F387FD803FE1470496D486C7EA2495CA2
495CB3486C496C487EB53BC7FFFE3FFFF0A33C217EA041>I<3903F01FC000FFEB7FF090
38F1E0FC9038F3807C3907F7007EEA03FE497FA25BA25BB3486CEB7F80B538C7FFFCA326
217EA02B>I<EB07F0EB3FFE9038FC1F803901F007C03903C001E000078048486C7E48C7
127CA248147E003E143E007E143FA300FE1580A8007E1500A36C147EA26C147C6D13FC6C
6C485A00075C3903F007E03900FC1F80D93FFEC7FCEB07F021237EA126>I<3903F03F80
00FFEBFFE09038F3C0F89038F7007ED807FE7F6C48EB1F804914C049130F16E0ED07F0A3
ED03F8A9150716F0A216E0150F16C06D131F6DEB3F80160001FF13FC9038F381F89038F1
FFE0D9F07FC7FC91C8FCAA487EB512C0A325307EA02B>I<903807F00390383FFC07EBFC
0F3901F8038F3807E001000F14DF48486CB4FC497F123F90C77E5AA25A5AA9127FA36C6C
5B121F6D5B000F5B3907E003BF3903F0073F3800F81EEB3FF8EB0FE090C7FCAAED7F8091
380FFFFCA326307DA029>I<3803E07C38FFE1FF9038E38F809038E71FC0EA07EEEA03EC
A29038FC0F8049C7FCA35BB2487EB512E0A31A217FA01E>I<EBFF06000713CE381F00FE
003C133E48131E140E5A1406A27EA200FE90C7FC6C7EEA7FFC383FFFC014F0000F7F6C7F
C67FEB0FFF1300EC3F8000C0131F140F6C1307A37E15006C5B6C130E6C5B38F7807838E1
FFE038C07F8019237EA11E>I<1330A51370A313F0A21201A212031207381FFFFEB5FCA2
3803F000AF1403A814073801F806A23800FC0EEB7E1CEB1FF8EB07E0182F7FAD1E>I<D8
03F0133F00FFEB0FFFA30007EB007F000380B35DA35D12016D4813800000903803BFFC90
387E073FEB1FFED907F8130026227EA02B>I<B5EBFFF0A3D80FF0EB3F800007EC1F0000
03140E150C6D131C00011418A26C6C5BA26D1370017E1360137F6D5BA290381F8180A214
C3010F90C7FCA2EB07E6A214FE6D5AA26D5AA36D5AA2146024217E9F29>I<B53A1FFF81
FFF0A33C07F801FC003F8001F049EB1E0000030100141C816C6C017C1318A26D017E1338
000002FE1330A290267E01FF5B159F168090263F030F5BA216C0903A1F8607C180A202C6
13E390260FCC0390C7FCA2D907FC13F6ECF80116FE6D486C5AA36D481378A36D48133034
217F9F37>I<B53801FFF8A32603FE0013806C48EB7C0000001478017E1370017F5B9038
3F81C090381F8380D90FC3C7FCEB07E614FE6D5A6D5A6D7E80805B9038039F809038071F
C09038060FE0EB0C0790381C03F0496C7E01707FEBF000000180000FECFF8026FFFC0313
FCA326207F9F29>I<3A7FFF807FF8A33A07F8001FC00003EC0F800001EC070015066C6C
5BA26D131C017E1318A26D5BA2EC8070011F1360ECC0E0010F5BA2903807E180A214F301
0390C7FC14FBEB01FEA26D5AA31478A21430A25CA214E05CA2495A1278D8FC03C8FCA213
06130EEA701CEA7838EA1FF0EA0FC025307F9F29>I<003FB512F0A2EB000F003C14E000
38EB1FC00030EB3F800070137F1500006013FE495A13035CC6485A495AA2495A495A49C7
FC153013FE485A12035B48481370485A001F14604913E0485A387F000348130F90B5FCA2
1C207E9F22>I<B712F8A22502809426>I E /Fr 2 4 df<B712C0A322037A8D30>0
D<136013701360A20040132000E0137038F861F0387E67E0381FFF803807FE00EA00F0EA
07FE381FFF80387E67E038F861F038E060700040132000001300A21370136014157B9620
>3 D E /Fs 1 59 df<121C127FEAFF80A5EA7F00121C0909798817>58
D E /Ft 51 123 df<DA0FF813FC91397FFF07FF903B01F807DF83C0903A07E001FF0F90
3B1F8007FE1FE090393F000FFC137E16F85B9338F007804848010790C7FC1503ACB812F8
A32801F80003F0C7FCB3AB486C497E267FFFE0B512F0A3333B7FBA30>11
D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F0007017E497EA25B
A2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA486C497E267FFFE0B5
12C0A32A3B7FBA2E>I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83F00F903C07E001CF
C00380903C1F8000FF0001C090273F0007FE130F017E4948497EA2495CA248485C03076E
5A03030203C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3AA486C496C497E26
7FFFE0B500C1B51280A3413B7FBA45>14 D<017C166048B416F02607C3801401260F81C0
1403D900E04A5A001E01784A5A003E6D141F003C013FEC7F80007C90271BE003FFC7FC02
18B512BF007891381FFC3E00F8011CC75A020C14FC5F4C5A16035F4C5A160F5F4CC8FC02
1C5B00780118133E007C5D16FC003C01385B003E90383001F0001EEB70036C01E05B9039
81C007C03907C3800F2601FF005BD8007C49C9FC90C748EB07C0033EEB1FF04BEB3C3803
FCEBF81C4B497E913A01F001E00602030103130703E0497E912607C0071480020F150115
80DA1F00018013C04A010F1300143E5C14FC5C495A13035C495A130F4A0107130149C701
C013805B013E1603490203140001FC6F5A49020113064848913800F00E0003705A49ED3C
3849ED1FF06C48ED07C03A437BBD45>37 D<146014E0EB01C0EB0380EB0700130E131E5B
5BA25B485AA2485AA212075B120F90C7FCA25A121EA2123EA35AA65AB2127CA67EA3121E
A2121F7EA27F12077F1203A26C7EA26C7E1378A27F7F130E7FEB0380EB01C0EB00E01460
135278BD20>40 D<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2137C133C13
3E131EA2131F7FA21480A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B131EA2133E
133C137C1378A25BA2485A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20>I<121C12
7FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A12600A19
798817>44 D<B512FCA516057F941C>I<121C127FEAFF80A5EA7F00121C0909798817>I<
EB03F8EB1FFF90387E0FC09038F803E03901E000F0484813780007147C48487FA248C77E
A2481580A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C1580A36C15006D5B000F
143EA26C6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A7DB72A>
48 D<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C3879B7
2A>I<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E12300070
6D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D140F4A5A
4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B49130348481400485A48
5A000EC75A000FB6FC5A5A485CB6FCA321387CB72A>I<0006140CD80780133C9038F003
F890B5FC5D5D158092C7FC14FC38067FE090C9FCABEB07F8EB3FFE9038780F803907E007
E090388003F0496C7E12066E7EC87EA28181A21680A4123E127F487EA490C71300485C12
E000605C12700030495A00385C6C1303001E495A6C6C485A3907E03F800001B5C7FC3800
7FFCEB1FE0213A7CB72A>53 D<EC3FC0903801FFF0010713FC90380FE03E90383F800790
387E001F49EB3F804848137F485AA2485A000FEC3F0049131E001F91C7FCA2485AA3127F
90C9FCEB01FC903807FF8039FF1E07E090383801F0496C7E01607F01E0137E497FA24914
8016C0151FA290C713E0A57EA56C7E16C0A2121FED3F807F000F15006C6C5B15FE6C6C5B
6C6C485A3900FE07F090383FFFC06D90C7FCEB03FC233A7DB72A>I<B712C016F816FE00
0190398001FF806C90C7EA3FE0EE0FF0EE03F8707E707E177FA2EF3F8018C0171F18E017
0F18F0A3EF07F8A418FCAC18F8A4EF0FF0A218E0A2171F18C0EF3F80A2EF7F0017FE4C5A
4C5AEE0FF0EE3FE0486DEBFF80B8C7FC16F816C036397DB83F>68
D<B812F8A30001903880001F6C90C71201EE00FC177C173C171CA2170CA4170E1706A2ED
0180A21700A41503A21507151F91B5FCA3EC001F15071503A21501A692C8FCAD4813C0B6
12C0A32F397DB836>70 D<B648B512FEA30001902680000313006C90C76C5AB3A491B6FC
A391C71201B3A6486D497EB648B512FEA337397DB83E>72 D<B612C0A3C6EBC0006D5AB3
B3AD497EB612C0A31A397EB81E>I<B5933807FFF86E5DA20001F0FC002600DFC0ED1BF8
A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC0183A3D9C0FEEC0303A2027F14
06A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C13C0A3913901FC0180A39139
00FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D5A487ED80FFC6D48497EB500
C00203B512F8A2ED018045397DB84C>77 D<EC03FF021F13E09138FE01FC903901F8007E
D907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E48486E7E49157E0003167F48
48ED3F80A24848ED1FC0A2001F17E049150F003F17F0A3007F17F8491507A300FF17FCAC
007F17F86D150FA3003F17F0A26C6CED1FE0A36C6CED3FC0000717806D157F000317006C
6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80D903F8017FC7FC903900
FE01FC91381FFFE0020390C8FC363D7BBA41>79 D<B612FEEDFFE016F8000190388007FE
6C90C76C7EEE3FC0707E707E707EA2707EA283A65FA24C5AA24C5A4C5AEE3F8004FFC8FC
ED07FC91B512E05E9138000FF0ED03F8ED00FE82707E707EA2161F83A583A6F00180A217
F8160F1803486D01071400B66D6C5A04011306933800FE0ECAEA3FFCEF07F0393B7DB83D
>82 D<D90FF813C090383FFE0190B512813903F807E33907E000F74848137F4848133F48
C7121F003E140F007E1407A2007C140312FC1501A36C1400A37E6D14006C7E7F13F86CB4
7E6C13F8ECFF806C14E06C14F86C14FEC680013F1480010714C0EB007F020713E0EC007F
ED3FF0151F150FED07F8A200C01403A21501A37EA216F07E15036C15E06C14076C15C06C
140F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFFF8010F13E0D8C00190C7FC253D7CBA
2E>I<003FB812E0A3D9C003EB001F273E0001FE130348EE01F00078160000701770A300
601730A400E01738481718A4C71600B3B0913807FF80011FB612E0A335397DB83C>I<B5
00FC91387FFF80A30003018091380FFC006C90C8EA07E0715A6C705A6E1403017F93C7FC
A280013F1506A26E140E011F150C80010F5DA28001075DA26E147001031560A26D6C5CA2
806D4A5AA2ED8003027F91C8FCA291383FC006A215E0021F5BA2EDF01C020F1318A26E6C
5AA215FC02035BA2EDFEE002015BA26E6C5AA36FC9FCA3153EA2151CA3393B7EB83E>86
D<B5D8FC07B5D8F001B5FCA30007902780001FFEC7EA1FF86C48C7D80FF8EC07E0000103
07ED03C01B807F6C6F6C1500A26E5F017F6E6C1406A280013F4A6C5CA280011F4A6D5BEE
067FA26D6C010E6D5BEE0C3FA26D6C011C6D5BEE181FA26D6C6F5BEE300FA26D6C6F485A
EE6007A26D6C4CC7FC9338C003FCA203805D913B7F818001FE06A203C1150EDA3FC3C7EA
FF0CA203E3151CDA1FE6EC7F98A215F6DA0FFCEC3FF0A302075E4B141FA202035E4B140F
A202015E4B1407A2020093C8FC4B80503B7EB855>I<EB1FE0EBFFFC3803E03F3907000F
80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA
03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA31401A26C13036CEB077C903980063E18
383FC01E3A0FE0781FF03A03FFF00FE03A007F8007C026277DA52A>97
D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E9039F3801F809039F7000FC001
FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E167FAA167E16FEA216FC15016D14
F8ED03F07F01EEEB07E001C6EB0FC09039C7801F00903881E07E903800FFF8C7EA1FC028
3B7EB92E>I<EB03FC90381FFF8090387E03E03901F80070484813F83907E001FC380FC0
03A2EA1F80123F90380001F848EB00F01500A2127E12FEAA127E127FA26C14067F001F14
0E6D130C000F141C6C6C13386C6C13706C6C13E039007C07C090381FFF00EB07F81F277D
A525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0
007F4848133F4848131FA24848130F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C
131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F90381FFE0FD907F813
C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E03903F001F0D807E013F8380F
C0004848137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14
037F001F14076C6C13060007140E6D131CD801F013386C6C137090387E03E090381FFF80
903803FC0020277EA525>I<147E903803FF8090380FC1E0EB1F8790383F0FF0137EA213
FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB487E387FFFF8A31C3B7FBA19>I<
ED03F090390FF00FF890393FFC3C3C9039F81F707C3901F00FE03903E007C03A07C003E0
10000FECF000A248486C7EA86C6C485AA200075C6C6C485A6D485A6D48C7FC38073FFC38
060FF0000EC9FCA4120FA213C06CB512C015F86C14FE6CECFF804815C03A0F80007FE048
C7EA0FF0003E140348140116F8481400A56C1401007C15F06CEC03E0003F1407D80F80EB
0F80D807E0EB3F003901FC01FC39007FFFF0010790C7FC26387EA52A>I<EA03F012FFA3
120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039F3800FC0EBF70013FE496D7EA25B
A35BB3A3486C497EB500C1B51280A3293A7EB92E>I<EA0380EA0FE0487EA56C5AEA0380
C8FCAAEA03F012FFA312071203B3AA487EB512C0A312387EB717>I<EB01C0EB07F0EB0F
F8A5EB07F0EB01C090C7FCAAEB01F813FFA313071301B3B3A2123C127E00FF13F01303A2
14E038FE07C0127C383C0F00EA0FFEEA03F8154984B719>I<EA03F012FFA3120F1203B1
913801FFFCA39138007FC01600157C15705D4A5A4A5A4AC7FC141E1438147814FC13F1EB
F3FEEBF73F01FE7FEBF81F496C7E8114076E7E6E7E811400157E157F811680ED1FC0486C
EB3FF0B500C0B5FCA3283A7EB92C>I<EA03F012FFA3120F1203B3B3AD487EB512C0A312
3A7EB917>I<2703F00FF0EB1FE000FFD93FFCEB7FF8913AF03F01E07E903BF1C01F8380
3F3D0FF3800FC7001F802603F70013CE01FE14DC49D907F8EB0FC0A2495CA3495CB3A348
6C496CEB1FE0B500C1B50083B5FCA340257EA445>I<3903F00FF000FFEB3FFCECF03F90
39F1C01F803A0FF3800FC03803F70013FE496D7EA25BA35BB3A3486C497EB500C1B51280
A329257EA42E>I<EB03FE90380FFF8090383E03E09038F800F84848137C48487F48487F
4848EB0F80001F15C090C712074815E0A2007EEC03F0A400FE15F8A9007E15F0A2007F14
076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F006C6C137EC66C13F890387E03F090
381FFFC0D903FEC7FC25277EA52A>I<3903F01FE000FFEB7FF89038F1E07E9039F3801F
803A07F7000FC0D803FEEB07E049EB03F04914F849130116FC150016FEA3167FAA16FEA3
ED01FCA26DEB03F816F06D13076DEB0FE001F614C09039F7803F009038F1E07E9038F0FF
F8EC1FC091C8FCAB487EB512C0A328357EA42E>I<D903F813C090381FFE0190387E0781
9038FC01C33903F000E3000714774848133749133F001F141F485A150F48C7FCA312FEAA
127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF3901F801CF39007E078F90381FFE
0FEB07F890C7FCABED1FE00203B5FCA328357DA42C>I<3807E01F00FFEB7FC09038E1E3
E09038E387F0380FE707EA03E613EE9038EC03E09038FC0080491300A45BB3A2487EB512
F0A31C257EA421>I<EBFF03000313E7380F80FF381E003F487F487F00707F12F0A2807E
A27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC67F01071380EB007F141F00C0EB
0FC01407A26C1303A37E15806C13077EEC0F00B4131E38F3C07C38E1FFF038C03F801A27
7DA521>I<1318A51338A31378A313F8120112031207001FB5FCB6FCA2D801F8C7FCB215
C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01F81A347FB220>I<D803F0EB07E0
00FFEB01FFA3000FEB001F00031407B3A4150FA3151F12016D133F0000EC77F86D9038E7
FF8090383F03C790381FFF87903A03FC07E00029267EA42E>I<B538803FFEA33A0FF800
0FF06C48EB07E00003EC03C06D148000011500A26C6C1306A26D130E017E130CA26D5BA2
EC8038011F1330A26D6C5AA214E001075BA2903803F180A3D901FBC7FCA214FF6D5AA214
7CA31438A227257EA32C>I<B53A1FFFE03FFEA3260FF8009038000FF86C48017EEB03E0
18C00003023EEB0180A26C6C013FEB0300A36C6CEC8006156FA2017E9038EFC00C15C7A2
D93F016D5A15830281EBF038D91F831430150102C3EBF87090260FC6001360A2D907E66D
5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A7FA20100141E4A130E0260130C37
257EA33C>I<B538807FFFA33A03FE003FF00001EC1F80000092C7FC017E131C6D13186D
6C5AECC070010F5B6D6C5AECF180EB03FB6DB4C8FC6D5AA2147F804A7E8114CF903801C7
E090380383F090380703F8EB0601496C7E011C137E49137F01787F496D7E486C80000FEC
3FF0D8FFFE90B51280A329247FA32C>I<B538803FFEA33A0FF8000FF06C48EB07C00003
EC03806C7E16007F00001406A2017E5BA2137F6D5BA26D6C5AA2ECC070010F1360A26D6C
5AA214F101035BA2D901FBC7FCA214FF6D5AA2147CA31438A21430A214701460A25CA2EA
7C0100FE5B130391C8FC1306EAFC0EEA701C6C5AEA1FF0EA0FC027357EA32C>I<003FB5
12FCA2EB8003D83E0013F8003CEB07F00038EB0FE012300070EB1FC0EC3F800060137F15
0014FE495AA2C6485A495AA2495A495A495AA290387F000613FEA2485A485A0007140E5B
4848130C4848131CA24848133C48C7127C48EB03FC90B5FCA21F247EA325>I
E /Fu 7 117 df<ED03E04B7EA24B7EA34B7EA24B7EA34B7EA292B57EA34A8015F30203
8015E1A202078015C0020F80ED807FA2021F80ED003F4A80023E131FA2027E80027C7F02
FC814A7FA20101824A7F49B77EA3498202C0C7FC010F824A147FA2011F8291C8123F4982
013E151FA2017E82017C8101FE83B500F80107B61280A4413A7DB948>65
D<EB3FFE0003B512E0000F14F8391FF00FFE003FEB03FF6D6C7F6E7FA26F7EA26C5A6C5A
EA0380C8FCA2EC3FFF010FB5FC137F3901FFF87F00071380380FFE00EA3FF85B485A12FF
5BA415FF6D5A127F263FF00713F83B1FFC1FBFFFC0390FFFFE1F0003EBF80F39003FE003
2A257DA42E>97 D<13FFB5FCA412077EAF4AB47E020F13F0023F13FC9138FE03FFDAF000
13804AEB7FC00280EB3FE091C713F0EE1FF8A217FC160FA217FEAA17FCA3EE1FF8A217F0
6E133F6EEB7FE06E14C0903AFDF001FF80903AF8FC07FE009039F03FFFF8D9E00F13E0D9
C00390C7FC2F3A7EB935>I<903801FFC0010F13FC017F13FFD9FF8013802603FE0013C0
48485AEA0FF8121F13F0123F6E13804848EB7F00151C92C7FC12FFA9127FA27F123FED01
E06C7E15036C6CEB07C06C6C14806C6C131FC69038C07E006DB45A010F13F00101138023
257DA42A>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC000075B6C6C5A5C
A29138807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>114
D<90383FF0383903FFFEF8000F13FF381FC00F383F0003007E1301007C130012FC15787E
7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C14F81203C614FC131F9038007FFE
140700F0130114007E157E7E157C6C14FC6C14F8EB80019038F007F090B512C000F81400
38E01FF81F257DA426>I<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA3000390C7
FCB21578A815F86CEB80F014816CEBC3E090383FFFC06D1380903803FE001D357EB425>
I E /Fv 20 122 df<EA07C0EA0FF0EA1FF8123F13FCA213FEA2121F120F1207EA007E13
FEA213FC1201EA03F81207EA0FF0EA7FE012FF13C013005A12780F196E8A33>44
D<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B0B6C8A33>46
D<EC07F8EC3FFF91B57E010314E0010F80498090383FFC0F90397FE003FC9038FF800148
90C77ED803FC147E49EB7E7F0007903801FFBFD9F00713FF4848481480495A001F5B0180
13C3003FEB7F810100010013C002FE137F4849133FEA7E014A131FA212FEEAFC034A130F
A96E131FD8FE011580127EA26E133FD87F0015006C6D5B027F13FE01801381001F90383F
C3FC01C013FF000F6D5B6D6C5B6C6C6C5BD9F80113800003D9007EC7FC6D9038000F806C
B4EC1FC06C6D133FD97FE013FF90263FFC0713806DB612006D5C010314F801005C023F13
80DA07FCC7FC2A3F7CBD33>64 D<007FB512C0B612E0A415C048C8FCB3B3B3ABB612C015
E0A46C14C01B4D6CC433>91 D<007FB512C0B612E0A47EC7120FB3B3B3AB007FB5FCB6FC
A46C14C01B4D7DC433>93 D<EB1FFC90B57E000314E048804814FC48809038F007FFEBE0
016E7F153F6C48806C48131FC87F150FA5EC0FFF49B5FC131F137F48B6FC0007140F4813
C0381FFC00EA3FF0EA7FC05B48C7FC5AA56C141F7E6D137FD83FE0497ED9F807EBFFF06C
B712F87E6C14F36C14C1C69138003FF0D91FF090C7FC2D2E7BAC33>97
D<EA3FFC487E12FFA2127F123F1200ABEC01FE91380FFFC04A13F0027F7F91B512FE90B7
FCECFE07DAF800138002E0EB7FC04AEB3FE04A131FEE0FF091C7FC16074915F81603A217
FC1601A9160317F8A26D140717F06E130F17E06E131FEE3FC06E137F9139F801FF80DAFE
07130091B55A495C6E5BD97E3F13E0D93C0F138090260003FEC7FC2E3E7FBC33>I<ECFF
F0010713FE011FEBFF804914C04914E048B612F048EBC01F9038FE000F485A485A4848EB
07E049EB03C0484890C7FC5BA2127F90C9FCA25A5AA97E7EA27F003FEC01F06DEB03F86C
7E6D13076C6C14F06C6C130F01FFEB1FE06CEBE07F6C90B512C06C1580013F14006D13FC
01075B010013C0252E79AC33>I<ED7FF84B7E5CA280157F1501ABEB01FF010713C1011F
13F1017F13F990B6FC5A4813813907FE003FD80FF8131F49130F48481307491303123F49
1301127F90C7FCA25A5AA97E7E15037F123F6D1307A26C6C130F6D131F6C6C133F6C6C13
7F2603FF81B512F091B612F8C602FD13FC6D13F96D01E113F8010F018013F0D901FEC8FC
2E3E7DBC33>I<ECFF80010713F0011F13FC497F90B6FC48158048018013C03A07FE003F
E001F8EB0FF048481307484814F8491303003F15FC491301127F90C7FC16FE15005A5AB7
FCA516FC48C9FC7E7EA36C7E167C6C6C14FE7F6C7E6D13016C6CEB03FC6CB4130F6C9038
C03FF86C90B512F06D14E06D14C0010F1400010313FC9038007FE0272E7BAC33>I<D901
FEEB1FE0903A0FFFC0FFF0013F01F313F84990B512FC90B7FC5A48010313E12607FC00EB
80F849017F1360484890383FC00049131FA2001F8149130FA66D131F000F5DA26D133F6C
6C495A6D13FF2603FF0390C7FCECFFFE485C5D5DD80FCF13C0D981FEC8FC0180C9FCA27F
A26C7E7F90B512FC6CECFFC06C15F0000715FC4815FF4816809038E0000748489038007F
C090C8EA1FE048150F007E150700FE16F0481503A56C1507007E16E0007F150F6C6CEC1F
C001E0147FD81FF8903801FF80270FFF801F13006C90B55A6C5DC615F0013F14C0010F91
C7FC010013F02E447DAB33>103 D<EA3FFC487E12FFA2127F123F1200AB4AB4FC020713
C0021F13F0027F7F91B5FC90B67EED07FEECF801ECF0004A7F4A7F5CA291C7FCA35BB3A4
3B3FFFF80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC303D7FBC33>I<14
E0EB03F8A2497EA36D5AA2EB00E091C8FCAA383FFFF8487FA47EEA0001B3AD007FB612C0
B712E016F0A216E06C15C0243E78BD33>I<1570EC01FCA2EC03FEA3EC01FCA2EC007015
00AA90383FFFFC4913FE90B5FCA27F7F90C7FCB3B3A9140115FCA21218007EEB03F81407
B414F0140F9038803FE090B512C06C14806C14006C5B6C13F8000113E01F557BBD33>I<
383FFFFC487FB5FCA27E7EC7FCB3B3AD003FB612F84815FCB712FEA26C15FC6C15F8273D
7ABC33>108 D<02FC137E3B7FC3FF01FF80D8FFEF01877F90B500CF7F15DF92B57E6C01
0F13872607FE07130301FC01FE7F9039F803FC01A201F013F8A401E013F0B3A53C7FFE0F
FF07FF80B548018F13C0A46C486C01071380322C80AB33>I<4AB4FC263FFC0713C0267F
FE1F13F000FF017F7F91B5FC6CB67E6CEC07FEC6EBF801ECF0004A7F4A7F5CA291C7FCA3
5BB3A43B3FFFF80FFFFC486D4813FEB56C4813FFA26C496C13FE6C496C13FC302C7FAB33
>I<90381FFE0F90B5EA8F80000314FF120F5A5AEBF007387F800190C7FC00FE147F5A15
3FA37E007FEC1F0001C090C7FCEA3FF8EBFFC06C13FF6C14E0000314F8C680011F13FF01
001480020713C0EC007FED1FE0007C140F00FEEC07F01503A27EA27F15076D14E06D130F
6DEB3FC09038FE01FF90B61280160000FD5C00FC14F8D8F83F13E0D8780790C7FC242E79
AC33>115 D<D83FFCEB1FFE486C497E00FF5CA2007F80003F800000EC007FB3A75EA25D
A26D5B90387F800FDAE03F13FC6DB612FE17FF6D806D01FE13FE01039038F83FFC010001
C0C7FC302C7FAA33>117 D<3B7FFF801FFFE0B56C4813F06E4813F8A24A6C13F06C496C
13E0D803F8C7EAFC00000114015E7F000014036D5C137EA2017F495A7FA26E485A131FA2
6D6C485AA214E0010749C7FCA214F01303157EEB01F8A2157C010013FC14FC5D147C147D
EC3FF0A36E5AA36E5AA2141F5DA2143F92C8FCA3147EA214FE003F5B1301387F81F81383
EB87F0139FEBFFE06C5B5C6C90C9FCEA0FFCEA03F02D427DAA33>121
D E /Fw 39 122 df<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312
011380120313005A1206120E5A5A5A12600B1D78891B>44 D<121EEA7F80A2EAFFC0A4EA
7F80A2EA1E000A0A78891B>46 D<14FF010713E090381F81F890383E007C01FC133F4848
EB1F8049130F4848EB07C04848EB03E0A2000F15F0491301001F15F8A2003F15FCA390C8
FC4815FEA54815FFB3A46C15FEA56D1301003F15FCA3001F15F8A26C6CEB03F0A36C6CEB
07E0000315C06D130F6C6CEB1F806C6CEB3F00013E137C90381F81F8903807FFE0010090
C7FC28447CC131>48 D<143014F013011303131F13FFB5FC13E713071200B3B3B0497E49
7E007FB6FCA3204278C131>I<EB03FE90381FFFC0017F13F03901F80FFC3903C001FE48
486C7E000EC7EA7F8048EC3FC0ED1FE04815F00030140F007015F800601407126CB415FC
7F7F1503A46C4813076CC7FCC8FC16F8A2150F16F0151F16E0A2ED3FC0ED7F8016005D5D
4A5A4A5A4A5A5D4A5A4A5A4AC7FC147C5C5C495A495A495A49C7120C131E5B013814185B
5B485A4848143848C81230000E1570001FB612F0A25A5AB712E0A326427BC131>I<121C
A2EA1F8090B712C0A3481680A217005E0038C8120C0030151C00705D0060153016705E5E
4814014B5A4BC7FCC81206150E5D151815385D156015E04A5AA24A5A140792C8FC5CA25C
141E143EA2147E147CA214FCA21301A3495AA41307A6130FAA6D5AEB01C02A457BC231>
55 D<14FF010713E0011F13F890387F00FE01FC133FD801F0EB1F804848EB0FC049EB07
E00007EC03F048481301A290C713F8481400A47FA26D130116F07F6C6CEB03E013FC6C6C
EB07C09039FF800F806C9038C01F006CEBF03EECF87839007FFEF090383FFFC07F01077F
6D13F8497F90381E7FFFD97C1F1380496C13C02601E00313E048486C13F000079038007F
F84848EB3FFC48C7120F003EEC07FE150148140016FF167F48153FA2161FA56C151E007C
153EA2007E153C003E157C6C15F86DEB01F06C6CEB03E06C6CEB07C0D803F8EB1F80C6B4
EBFF0090383FFFFC010F13F00101138028447CC131>I<14FF010713E0011F13F890387F
80FC9038FC007E48487F4848EB1F804848EB0FC0000FEC07E0485AED03F0485A16F8007F
140190C713FCA25AA216FE1500A516FFA46C5CA36C7E5D121F7F000F5C6C6C1306150E6C
6C5B6C6C5BD8007C5B90383F01E090390FFF80FE903801FE0090C8FC150116FCA4ED03F8
A216F0D80F801307486C14E0486C130F16C0ED1F80A249EB3F0049137E001EC75A001C49
5A000F495A3907E01FE06CB51280C649C7FCEB1FF028447CC131>I<16C04B7EA34B7EA3
4B7EA34B7EA3ED19FEA3ED30FFA203707FED607FA203E07FEDC03FA2020180ED801FA2DA
03007F160FA20206801607A24A6D7EA34A6D7EA34A6D7EA20270810260147FA202E08191
B7FCA249820280C7121FA249C87F170FA20106821707A2496F7EA3496F7EA3496F7EA201
788313F8486C83D80FFF03037FB500E0027FEBFFC0A342477DC649>65
D<DB0FFE146092B500C013E0020314F0913A0FFC01FC0191393FC0003E02FFC7EA0F83D9
03FCEC03C74948EC01E74948EC00FF4948157F4948153F4948151F49C9120F485A491607
120348481603A248481601A248481600A2123FA2491760127FA31900485AAE6C7EA21960
A2123F7FA2001F18E07F000F18C0A26C6C160119806C6C160312016DEE07006C6C16066D
6C150E6D6C5D6D6C5D6D6C15786D6C5D6D6C4A5AD900FFEC0780DA3FC0011FC7FCDA0FFC
13FC0203B512F0020014C0DB0FFEC8FC3B487BC546>67 D<B8FC17F017FC00019039C000
07FF6C499038007FC0017FED1FE0EF07F0EF03FC717E717E84727E727E727EA2727E8518
0385A2180185A38584A31A80AD1A00A36061A361180361180761180F614E5A183F614EC7
FC18FEEF03FC4D5AEF1FE001FFED7FC0486DD907FFC8FCB812FC17F094C9FC41447CC34B
>I<B6D8C003B6FCA3000101E0C70007138026007F80913801FE00B3A991B7FCA30280C7
1201B3AC2601FFE0913807FF80B6D8C003B6FCA340447CC349>72
D<B612F0A3C6EBF0006D5A6D5AB3B3B3A4497E497EB612F0A31C447DC323>I<B612F8A3
000101E0C9FC6C6C5A5CB3B31830A418701860A518E0A3EF01C0A217031707A2170F173F
177FEE01FF48486C011F1380B9FCA334447CC33D>76 D<B56C933807FFFC6E5EA20001F1
FE0026006FE0EE1BF8A3D967F01633A2D963F81663A3D961FC16C3A3D960FEED0183A202
7FED0303A36E6C1406A36E6C140CA26E6C1418A36E6C1430A36E6C1460A26E6C14C0A36E
6CEB0180A3037FEB0300A292383F8006A36F6C5AA36F6C5AA26F6C5AA36F6C5AA36F6C5A
A26FB45AA370C7FC13F0A2486C143ED80FFFEF0FFEB500F0011C0107B512FCA34E447BC3
59>I<49B41303010FEBE007013F13F89039FE00FE0FD801F8131FD807E0EB079F49EB03
DF48486DB4FC48C8FC4881003E81127E82127C00FC81A282A37E82A27EA26C6C91C7FC7F
7FEA3FF813FE381FFFE06C13FE6CEBFFE06C14FC6C14FF6C15C0013F14F0010F80010180
D9001F7F14019138001FFF03031380816F13C0167F163F161F17E000C0150FA31607A37E
A36C16C0160F7E17806C151F6C16006C5D6D147ED8FBC05CD8F9F0495AD8F07C495A9039
3FC00FE0D8E00FB51280010149C7FC39C0003FF02B487BC536>83
D<B600C0010FB5FCA3000101E0C813F026007F80ED1F80F00F00A21806B3B3A7180E6D6C
150CA2181C131F6E1518010F163818306D6C1570606D6C14016D6C5D6D6CEC0780027F4A
C7FC6E6C131EDA1FE0137C913907FC03F00201B55A6E6C1380DB07FCC8FC40467CC349>
85 D<B60107B500F890380FFFFEA3000301E0D9001F90C813F06C0180DA0FFCED3FC091
C86C48ED1F006C871C0E6D6C6E7E1C0CA26D6C6F5DA36EDA06FF1538011F1A30A26E020E
6D1470010FDB0C7F1560A26E021C7F0107DB183F5DA2856D6CDA301F4A5AA36D6C4A6C6C
49C7FCA36D6C4A6C6C1306A3DB80016E130E027FDA8003140CA2DBC00380023FDA00015C
A203E081021F01066D5CA36E6C486E6C5AA36E6C486E6C5AA36F48EC1FE1020360A2DBFE
7015F302010160020F90C8FCA2DBFFE015FB6E49EC07FEA36F486E5AA36FC86C5AA3031E
6F5AA4030C16605F467EC364>87 D<EB07FC90383FFF809038F80FE03903C003F048C66C
7E000E6D7ED80FC0137E486C137F6D6D7EA36F7EA26C5AEA0380C8FCA4EC0FFF49B5FC90
380FFE1FEB3FC0EBFF00EA03FC485A485A485A485A127F5B176048C7FCA3153FA36D137F
007F14EF6D9038C7E0C0003F13013A1FE00783F13B07F81E03FF802701FFFC0113003A00
1FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120712031201B3EC03FC91380FFF8091383C
07E091387001F89039FDE0007E02807F01FFEC1F8091C713C049EC0FE049140717F0A2EE
03F8A217FCA2160117FEAB17FC1603A217F8A2EE07F0A26DEC0FE017C06D141F01FBEC3F
80D9F380EB7E00D9E1C05B9039E0F001F89039C03C07E09039801FFF80C7D803FCC7FC2F
467DC436>I<EC7F80903803FFF090380FC07C90383F000F01FCEB03804848EB01C00003
140F4848EB1FE049133F120F485AA2485AED1FC0007FEC070092C7FCA290C9FC5AAB7E7F
A2123F16307F001F15706C6C146016E06C6C14C06C6C13010001EC03806C6CEB0700013F
131E90381FC078903807FFF001001380242E7DAC2B>I<167FED3FFFA315018182B3EC7F
80903803FFF090380FC07C90383F000E017E1307496D5AD803F87F48487F5B000F81485A
A2485AA2127FA290C8FC5AAB7E7FA2123FA26C7EA2000F5D7F6C6C5B00035C6C6C903807
7F806C6C010E13C0013F011C13FE90380FC0F8903803FFE09026007F0013002F467DC436
>I<EB01FE903807FFC090381F03F090387E00FC49137E48487F485A4848EB1F80000F15
C049130F121F484814E01507A2007F15F090C7FCA25AA390B6FCA290C9FCA67EA27FA212
3F16306C7E1670000F15606D14E06C6C14C0000314016C6CEB03806C6CEB0700013E131E
90381F80F8903803FFE0010090C7FC242E7DAC2B>I<EC0FE0EC7FF8903801F81E903803
F03F90390FE07F8090381FC0FF5C133F495AA2ED7F0001FE131C92C7FCAFB67EA3C648C8
FCB3B2486C7E007F13FFA321467EC51E>I<EE0F80D901FCEB7FE0903A0FFF81F0F09039
3F07E3819039FC01FF033A01F800FE014848017E13E00007027FC7FC497F000F8149131F
001F81A9000F5D6D133F000792C7FC6D5B0003147E6C6C5B6D485A3903BF07E090380FFF
80260701FCC8FC90CAFCA25AA37F6C7E7F90B512F86C14FF16E06C15F86C6C8048B67E3A
07C0000FFF48481300003FC8EA3F80003E151F48ED0FC0A2481507A56C150F007C168000
7E151F003E16006C153E6C6C5CD807E0495AD801F8EB07E0D8007FEB3F8090261FFFFEC7
FC010113E02C427DAC31>I<EA01FC12FFA3120712031201B3EC01FE913807FFC091381E
07F091383801F802707FECE000D9FDC07F5C01FF147F91C7FCA25BA35BB3A8486CECFF80
B5D8F83F13FEA32F457DC436>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCADEA01FC
12FFA3120712031201B3B0487EB512F8A315437DC21C>I<143C14FFA2491380A46D1300
A2143C91C7FCADEC7F80EB3FFFA31300147F143FB3B3AA123E127F39FF807F00A2147EA2
5C6C485A383C01F06C485A3807FF80D801FEC7FC195785C21E>I<EA01FC12FFA3120712
031201B3B3B3A5487EB512F8A315457DC41C>108 D<D801FC01FFEC1FE000FF010701E0
EBFFFC913B0F03F801E07F913C3C01FC07803F800007903C7000FE0E001FC0000349D97E
1C130F2601FDC0D97F38804A143001FFDA3FF06D7E91C75BA2495DA3495DB3A8486C4A6C
497EB5D8F81FB50003B512E0A34B2C7DAB52>I<3901FC01FE00FF903807FFC091381E07
F091383801F8000701707F0003EBE0002601FDC07F5C01FF147F91C7FCA25BA35BB3A848
6CECFF80B5D8F83F13FEA32F2C7DAB36>I<EC7F80903803FFF090380FC0FC90383E001F
496D7E496D7E48486D7E48486D7E48486D7E000F81A24848147E003F157FA290C87E4816
80A44816C0AA6C1680A26D147F003F1600A2001F157E6D14FE000F5D6D130100075D6C6C
495A6C6C495A6C6C495A013E49C7FC90381FC0FE903807FFF89038007F802A2E7DAC31>
I<3901FC03FC00FF90380FFF8091383C07E091387001F83A07FDE000FE00010180137F01
FFEC3F8091C7EA1FC04915E049140F17F0160717F8160317FCA3EE01FEABEE03FCA3EE07
F8A217F0160F6D15E0EE1FC06D143F17806EEB7E00D9FDC05B9039FCF003F891383C0FE0
91381FFF80DA03FCC7FC91C9FCAE487EB512F8A32F3F7DAB36>I<3903F803F000FFEB1F
FCEC3C3EEC707F0007EBE0FF3803F9C000015B13FBEC007E153C01FF13005BA45BB3A748
B4FCB512FEA3202C7DAB26>114 D<90383FE0183901FFFC383907E01F78390F0003F800
1E1301481300007C1478127800F81438A21518A27EA27E6C6C13006C7E13FC383FFFE06C
13FC6C13FF6C14C06C14E0C614F0011F13F81300EC0FFC140300C0EB01FE1400157E7E15
3EA27EA36C143C6C147C15786C14F86CEB01F039F38003E039F1F00F8039E07FFE0038C0
0FF01F2E7DAC26>I<1306A5130EA4131EA3133E137EA213FE12011207001FB512F0B6FC
A2C648C7FCB3A4150CAA017E131C017F1318A26D133890381F8030ECC070903807E0E090
3801FFC09038007F001E3E7EBC26>I<D801FC147F00FFEC3FFFA3000714010003800001
81B3A85EA35DA212006D5B017E9038077F80017F010E13C06D011C13FE90380FC0789038
03FFF09026007F8013002F2D7DAB36>I<B539F001FFFCA3000790C7EA7FE06C48EC1F80
00011600160E1200160C017F5CA280013F5CA26E1370011F146080010F5CA2ECF0010107
5CA26D6C48C7FCA26E5A01011306A26D6C5AA214FF6E5AA215B8EC3FB015F06E5AA36E5A
A26E5AA36EC8FC2E2C7EAA33>I<B539F001FFFCA3000790C7EA7FE06C48EC1F80000116
00160E0000150C6D141C6D1418A26E1338013F1430A26D6C5BA26E13E0010F5CA26D6C48
5AA2ECF803010391C7FCA2903801FC06A2ECFE0E0100130CA2EC7F18A215B8EC3FB0A2EC
1FE0A36E5AA26E5AA36EC8FCA21406A35CA25CA2123C007E5BB4FC5CA25CEAFE01387C03
80D87007C9FCEA3C1EEA0FFCEA03F02E3F7EAA33>121 D E /Fx
1 4 df<147014F8A81470007815F0007C1401B4EC07F8D87F80EB0FF0D83FE0EB3FE0D8
0FF0EB7F80D803F8EBFE003900FE73F890383F77E090380FFF80D903FEC7FCEB00F8EB03
FE90380FFF8090383F77E09038FE73F83903F870FED80FF0EB7F80D83FE0EB3FE0D87F80
EB0FF0D8FF00EB07F8007CEC01F000781400C7140014F8A81470252B7AAD32>3
D E /Fy 23 119 df<170FA34D7EA24D7EA34D7EA34D7EA34C7F17DFA29338039FFC178F
A29338070FFE1707040F7FEE0E03A2041E80EE1C01A2043C80EE3800A24C80187FA24C80
183FA24B4880181F0303814C130FA203078193C71207A24B81030E80A24B8284A24B8284
A24B82197F03F0824B153FA20201834B151FA202038392B8FCA24A83A292C91207020E83
85A24A8485023C84023882A20278840270177FA202F0844A173FA24948841A1FA2494884
1A0FA249CB7F1A074985865B496C85497E48486C4D7F000F01F8051F13F0B60407B612F0
A45C657DE463>65 D<DD7FF81560040FB56C14E0047F14E00303B600FC1301030F9038E0
03FEDB3FFEC7383F8003DBFFF0EC07C04A01C0913803F007020790C9EAF80FDA0FFC167C
4A48EE1E1FDA7FE0160F4A48EE07BF4949EE03FF4990CAFC4948834948834A187F495A01
3F193F4948181F5C01FF190F485BA24890CC1207A248481903A2485A1B01121FA25B123F
1B005BA2127F1C00A4485AB06C7EA5123F1CE07FA2121F7FA2000F1A011CC06C7EA26C7E
1B036C6D19801B076C7F017F1A006E606D6C181E131F6D6C606E18386D6C18786D6C606D
6D4C5A6D6D4C5A6E6C1607DA1FF84C5A6E6C4CC7FC6EB4167C020101C04A5A6E01F0EC07
F0DB3FFEEC1FC092280FFFE001FFC8FC030390B512FCDB007F14F0040F14809326007FF8
C9FC53667AE360>67 D<B912F018FF19E019F8C601FCC8EA7FFED93FF892380FFF80011F
04017F9538007FF0F11FF8737EF103FE737E737F747E747E747E1A0F87747E1A0387747E
A2741380A2F37FC0A21CE01B3FA21CF0A21B1F1CF8A31CFCA21B0FA41CFEAF1CFCA51B1F
1CF8A4F33FF0A21CE0A21B7F1CC01BFF1C80A2501300A2505A505AA2505A505A505A505A
1AFF4F5B4F90C7FCF107FCF11FF8F17FF0953801FFC0013F04075BD9FFFCDB7FFEC8FCBA
12F819E096C9FC18F0576279E165>I<B7020FB612F0A4C691C9000FEBF000D93FFC0403
13C06D48705BB3B3A391BAFCA402F8C91201B3B3A7496C4C7F90B5040F13F0B7020FB612
F0A4546279E163>72 D<B500FC071FB51280A36E61C6F58000013F51C7FCD91DFFF177FC
A2011C6D18E7A36E6CEF01C7A36E6CEF0387A36E6CEF0707A26E6C170EA36E6C171CA36E
6C1738A36E6C1770A26E6D16E0A36F6CED01C0A36F6CED0380A36F6CED0700A26F6C150E
A36F6C5DA36F6C5DA36F6C5DA26F6D5CA3706C495AA3706C495AA3706C49C7FCA2706C13
0EA3706C5BA3706C5BA3706C5BA3706D5AA294387FC1C0A394383FE380A3DD1FF7C8FCA3
EF0FFEA2013E6F5AA2137F715A2601FFC04F7E000701F896383FFF80B66C6D48023FB612
80A3715A696278E17A>77 D<B812FCEFFFE018FCF0FF80C601FCC7000F13E0D93FF89138
007FF8011FEE1FFCF007FF06017F727FF13FE0737E86737E737EA2868587A28587A96361
A298C8FC6162624F5A191F4F5A4F5AF1FF804E90C9FCF007FEF01FF8F0FFE0050F138091
B700FCCAFC18E08402F8C7EA1FFE943801FF80716C7EF03FF0727EF007FC727E85727F84
86737EA3737EAA86AA1DE086191FA3070F14017414C007071403496C8390B570EC0780B7
6F9038800F00736D5A97383FF03E97380FFFFCCD000313F09738003FC05B6479E162>82
D<DA07FF1403023F01F05B49B512FC010702FF5B90260FFC0013C0D93FE090380FF01FD9
7F80EB03F801FEC86C5A4848157E4848ED1F7F48486F5A4848815B001F824981003F8290
CAFC4883A2007E83A212FE84A384A27EA36D82A26C7EA26D93C7FC6C7E7F7F6C7E6D7E6C
13E06C13FCECFFC06C14F86CECFF806C15F86DECFF80011F15E06D15F8010315FE01006F
7E021F81020181DA003F80030380DB003F7F04037FEE007FEF1FFF71138017037113C083
A2F07FE0183FA2181F00E018F0180FA41807A27EA47E19E0180F7E19C07E6C171F19806D
163F6D17006D5E6D16FE486C5E6D4B5AD8FC7F1503D91F80EC0FF026F80FE04A5AD907FC
EC7F8029F001FFE003FFC7FC6D6CB512FC48011F14F0020314C0489026001FFEC8FC3C66
7AE349>I<EC3FF0903803FFFE010F6D7E90393FC03FE090397E0007F801F86D7ED801E0
6D7E48486D7E48486E7E48C86C7E7F01F06E7E487E6D6E7EA3707EA36C5AEA03E0C9FCA6
167FED7FFF020FB5FC91387FF807903801FF80903807FC00EB1FF0EB7FC0495AD803FEC7
FC485A120F5B485A485AA2484817E0A312FF5BA2160FA3161F6D141B007F153B16736D91
3971FC01C06C6C14E1001FEC01C1D80FFC903A0780FE03806C6C903A0F00FF07002701FF
807E6DB4FC27007FFFF86D5A011F01E0EB1FF8010190C7EA07E03B417ABF42>97
D<EB03C0EA07FFB5FCA41201EA007FA2133FB3AAEE7FC0923807FFFC031F13FF92397F00
7FC003F8EB0FF0DAC3E06D7EDAC780EB01FC02CFC87E02DE157F02FC6F7E4A824A6F7E18
0F4A82727E5C727EA2851801A285A3841A80AD1A0060A461180361A21807616E5E180F6E
4B5A6E5E02B8153F023C4B5A6E4BC7FC6E4A5A90263E0780495A6E6CEB0FF090263C01F0
495ADA007EEBFF806FB448C8FC0138010F13F890C8138041657DE349>I<4AB47E020F13
F8023F13FE9139FF007F80D903FCEB07E0D907F0EB01F0D91FE0EB007849488049488049
C87E48485D4915FF00034B138048485CA2485AA2485AA2003F6F130049EC007C94C7FC12
7FA35B12FFAD127F7FA4123F7FA2001FEE01C07F000F16036D168012076C6C15076D1600
00015E6C6C151E6D6C5C6D6C5C6D6C5CD90FF8495AD903FCEB07C0903A00FF803F809126
3FFFFEC7FC020F13F80201138032417CBF3A>I<181EEF3FFEEE07FFA4EE000F1703A217
01B3AAEDFF80020F13F8023F13FE9139FF803F81903A03FC0007C14948EB01E1D91FE0EB
00F94948147D4948143D49C8121F4848150F491507120348481503491501120F121F5BA2
123F5B127FA45B12FFAD127F7FA3123FA27F121FA26C6C1503A26C6C150712036D150F6C
6C151F0000163D137F6D6CECF9FF6D6CEB01F1D90FF0D903C113C06D6CD90F81EBFF80D9
01FFEB7F019039007FFFFC021F13E00201010091C7FC41657CE349>I<EC03FE91381FFF
E091B512F8903901FE03FE903A07F0007F8049486D7ED93FC06D7E49C76C7E496E7E4914
0348488148481401000782491400000F8283485A1880123F49153FA2007F17C0A35BA212
FF90B8FCA30180CAFCA9127F7FA3123FA27F121FEF01C06C7E17036C6C1680A26C6C1507
0001EE0F006D150E6C6C151E6D6C5C6D6C5C6D6C5CD907F0EB03E0D903FC495A902700FF
803FC7FC91383FFFFC020F13F00201138032417CBF3A>I<ED0FF0ED7FFC4AB5FC913907
F81F8091390FE00FC091381FC03F91393F807FE0EC7F005C495A5C0103EC3FC0A24948EB
0F0093C7FCA2495AB3A5B712F0A426000FF0C8FCB3B3B0497EEB3FFE003FB6FCA42B657E
E428>I<EB03C0EA07FFB5FCA41201EA007FA2133FB3AAEE7FE0923803FFFC030F13FFDB
3F0013C00378EB1FE04B6D7EDAC1C06D7EDAC3808002C7C7120302CE81170114DC14D802
F86E7E5CA35CA35CB3B3496C4A7F496C4A7FB6D8F003B612C0A442647DE349>104
D<133C13FF487F487FA66C5B6C90C7FC133C90C8FCB3A2EB03C0EA07FF127FA41201EA00
7FA2133FB3B3AC497E497EB612E0A41B5F7DDE23>I<EB03C0EA07FFB5FCA41201EA007F
A2133FB3B3B3B3AD497E497EB612F0A41C647DE323>108 D<D903C0EB7FE0D807FF9038
03FFFCB5010F13FFDB3F0013C00378EB1FE04B6D7E0001D9C1C06D7E27007FC3808002C7
C71203D93FCE81170114DC14D802F86E7E5CA35CA35CB3B3496C4A7F496C4A7FB6D8F003
B612C0A4423F7DBE49>110 D<EDFF80020F13F8023F13FE9139FF007F80D903FCEB1FE0
D907F0EB07F0D90FC0EB01F8D93F80EB00FE49C8127F017E81496F7E48486F7E00038349
150700078348486F7EA2001F83491501A2003F83A348486F7EA400FF1880AC007F1800A2
6D5DA2003F5FA36C6C4B5AA36C6C4B5A00075FA26C6C4B5A6C6C4B5AA26C6C4B5A017F4B
C7FC6D6C14FE6D6C495AD90FF0EB07F8D903FCEB1FE0D900FFEB7F806EB5C8FC020F13F8
020113C039417CBF42>I<9039078003F8D807FFEB0FFFB5013F13C092387C0FE0913881
F01F9238E03FF00001EB838039007F8700148FEB3F8E029CEB1FE0EE0FC00298EB030002
B890C7FCA214B014F0A25CA55CB3B0497EEBFFF8B612FCA42C3F7CBE33>114
D<9139FFE00180010FEBFC03017FEBFF073A01FF001FCFD803F8EB03EFD807E0EB01FF48
487F4848147F48C8123F003E151F007E150F127CA200FC1507A316037EA27E7F6C7E6D91
C7FC13F8EA3FFE381FFFF06CEBFF806C14F86C14FF6C15C06C6C14F0011F80010714FED9
007F7F02031480DA003F13C01503030013E0167F00E0ED1FF0160F17F86C15071603A36C
1501A37EA26C16F016037E17E06D14076DEC0FC06D1580D8FDF0141FD8F8F8EC7F00013E
14FC3AF01FC00FF80107B512E0D8E001148027C0003FF8C7FC2D417DBF34>I<1438A714
78A414F8A31301A31303A21307130F131FA2137F13FF1203000F90B6FCB8FCA3260007F8
C8FCB3AE17E0AE6D6CEB01C0A316036D6C148016076D6C14006E6C5A91383FC01E91381F
F07C6EB45A020313E09138007F802B597FD733>I<D903C0150FD807FFED1FFFB50203B5
FCA40001ED0007D8007F1501A2013F81B3B25FA35FA35F011F15066E140E5F130F6E4A7F
01075D6D6C494813E0D901FE4948EBFFC0903A00FFC01F8091393FFFFE00020F13F80200
01C0EC800042407DBE49>I<B66C49B512E0A4000101F8C8387FFE0026007FE0ED1FF819
E0013F705A61131F6E93C7FC130F180E6E151E0107161C8001035EA26E15780101167080
6D5EA26F1301027F5DA26E6C495AA26F1307021F92C8FCA26E6C130EA26F131E0207141C
A26F133C020314388102015CA26F13F06E5C168092387F81C0A216C3033F5B16E3DB1FE7
C9FCA216FF6F5AA26F5AA36F5AA26F5AA36F5A433F7FBD46>I E
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 55 463 a Fy(A)44 b(Redundan)l(t)g(Hierarc)l(hical)j(Structure)d
(for)e(a)i(Distributed)h(Con)l(tin)l(uous)1572 646 y(Media)g(Serv)l(er)
2328 594 y Fx(\003)633 976 y Fw(Cyrus)34 b(Shahabi,)e(Mohammad)f(H.)i
(Alsha)m(y)m(eji,)f(and)h(Shimeng)f(W)-8 b(ang)1141 1093
y(In)m(tegrated)33 b(Media)f(Systems)i(Cen)m(ter)g(and)1294
1209 y(Computer)e(Science)i(Departmen)m(t)1241 1325 y(Univ)m(ersit)m(y)
f(of)g(Southern)g(California)1317 1441 y(Los)g(Angeles,)g(California)d
(90089)925 1558 y Fv([cshahabi,)54 b(alshayej,)f(shimeng]@cs.usc.edu)
1622 2005 y Fw(Marc)m(h)34 b(21,)e(1997)1767 2519 y Fu(Abstract)352
2724 y Ft(The)25 b(gro)n(wing)f(n)n(um)n(b)r(er)h(of)g(digital)g(audio)
g(and)g(video)g(rep)r(ositories)e(has)i(resulted)g(in)h(a)f(desp)r
(erate)g(need)227 2823 y(for)32 b(e\013ectiv)n(e)h(tec)n(hniques)f(to)g
(deliv)n(er)g(data)g(to)g(users)g(in)h(a)f(timely)h(manner.)51
b(Due)33 b(to)f(geographical)e(dis-)227 2923 y(tribution)h(of)f(users,)
g(it)g(is)g(not)g(cost)g(e\013ectiv)n(e)g(to)g(ha)n(v)n(e)f(a)g(cen)n
(tralized)h(media)g(serv)n(er.)42 b(In)30 b(this)h(pap)r(er,)f(w)n(e)
227 3023 y(in)n(v)n(estigate)20 b(issues)g(in)n(v)n(olv)n(ed)g(in)h
(the)g(design)g(of)g(a)f(distributed)h(video)g(serv)n(er)e(\(D)n(VS\))j
(to)f(supp)r(ort)g(mo)n(vie-on-)227 3122 y(demand)g(\(MOD\))h
(application.)34 b(W)-7 b(e)22 b(prop)r(ose)d(a)i(redundan)n(t)g
(hierarc)n(hical)e(\(RedHi\))j(arc)n(hitecture)e(for)g(D)n(VS)227
3222 y(where)27 b(the)g(no)r(des)g(are)f(con)n(tin)n(uous)g(media)h
(serv)n(ers)e(and)i(the)h(edges)e(are)g(dedicated)i(net)n(w)n(ork)d
(lines.)37 b(With)227 3321 y(RedHi,)27 b(eac)n(h)e(no)r(de)h(has)g(t)n
(w)n(o)f(or)g(more)g(paren)n(ts.)36 b(W)-7 b(e)26 b(sho)n(w)f(that)i
(the)f(redundan)n(t)f(links)h(in)h(RedHi)f(yield)g(a)227
3421 y(more)g(reliable)g(and)h(e\016cien)n(t)g(system.)36
b(Our)26 b(sim)n(ulation)g(results)g(demonstrate)g(that)h(RedHi)g(can)g
(tolerate)227 3521 y(a)g(single)f(link)h(failure)g(with)g(no)g
(degradation)e(in)i(p)r(erformance)f(while)h(with)h(pure)e(hierarc)n(h)
n(y)f(almost)h(2)p Fs(:)p Ft(5\045)227 3620 y(of)34 b(requests)e(are)h
(rejected)g(due)h(to)f(the)h(failure.)54 b(In)33 b(normal)g(mo)r(de)g
(of)h(op)r(eration,)g(RedHi)g(outp)r(erforms)227 3720
y(pure)e(hierarc)n(h)n(y)e(signi\014can)n(tly)i(\(160\045)f(impro)n(v)n
(emen)n(t)g(on)h(the)h(a)n(v)n(erage)c(when)k(coun)n(ting)e(the)i(n)n
(um)n(b)r(er)f(of)227 3820 y(rejections\).)44 b(In)31
b(the)f(con)n(text)g(of)g(RedHi,)h(w)n(e)f(also)f(prop)r(ose)g(and)h
(ev)-5 b(aluate)30 b(alternativ)n(e)e(ob)5 b(ject)30
b(manage-)227 3919 y(men)n(t)j(p)r(olicies,)h(resource)c(reserv)-5
b(ation)31 b(strategies,)i(and)f(load)g(balancing)f(heuristics.)51
b(F)-7 b(urthermore,)33 b(w)n(e)227 4019 y(in)n(v)n(estigate)25
b(t)n(w)n(o)h(adaptiv)n(e)f(bu\013ering)i(mec)n(hanisms)e(that)i(emplo)
n(y)f(clien)n(t)g(side)g(cac)n(he)g(to)g(impro)n(v)n(e)f(system)227
4118 y(utilization.)p 0 4338 1560 4 v 102 4391 a Fr(\003)138
4423 y Fq(This)31 b(researc)n(h)g(has)g(b)r(een)f(funded)g(b)n(y)f(the)
h(In)n(tegrated)g(Media)i(Systems)d(Cen)n(ter,)j(a)f(National)g
(Science)g(F)-6 b(oundation)30 b(Engi-)0 4514 y(neering)g(Researc)n(h)h
(Cen)n(ter)f(\(NSF)f(gran)n(t)h(EEC-9529152\))k(with)c(additional)h
(supp)r(ort)f(from)g(the)f(Annen)n(b)r(erg)g(Cen)n(ter)i(for)g(Com-)0
4606 y(m)n(unication)25 b(at)h(the)f(Univ)n(ersit)n(y)g(of)h(Southern)f
(California)j(and)e(the)f(California)j(T)-6 b(rade)26
b(and)g(Commerce)f(Agency)-6 b(.)1927 5656 y Fp(1)p eop
%%Page: 2 2
2 1 bop 0 99 a Fo(1)135 b(In)l(tro)t(duction)0 459 y
Fp(The)36 b(gro)m(wing)g(n)m(um)m(b)s(er)f(of)i(digital)e(audio)g(and)h
(video)g(rep)s(ositories)f(has)h(resulted)f(in)g(a)i(desp)s(erate)f
(need)g(for)0 651 y(e\013ectiv)m(e)e(tec)m(hniques)e(to)i(deliv)m(er)d
(data)i(to)g(users)f(in)f(a)i(timely)f(manner.)46 b(Due)33
b(to)g(geographical)g(distribution)0 843 y(of)26 b(users,)g(it)g(is)f
(not)h(cost)h(e\013ectiv)m(e)g(to)g(ha)m(v)m(e)g(a)g(cen)m(tralized)e
(media)h(serv)m(er.)39 b(Distributed)24 b(media)h(serv)m(ers)h(can)h(b)
s(e)0 1035 y(emplo)m(y)m(ed)f(b)m(y)h(n)m(umerous)e(application)f
(domains,)i(e.g.,)j(digital)c(libraries,)f(health-care)j(information)e
(systems,)0 1227 y(and)30 b(educational)g(applications)e(to)j(name)g(a)
f(few.)141 1497 y(In)c(this)f(pap)s(er,)h(w)m(e)h(in)m(v)m(estigate)g
(issues)e(in)m(v)m(olv)m(ed)h(in)f(the)h(design)f(of)i(a)f(distributed)
e(video)h(serv)m(er)i(\(D)m(VS\))g(to)0 1689 y(supp)s(ort)e(mo)m
(vie-on-demand)j(\(MOD\))g(application.)38 b(With)27
b(MOD,)h(the)f(request)g(of)h(a)g(user)e(to)i(w)m(atc)m(h)h(a)e(\(sa)m
(y)i(2)0 1881 y(hour\))i(mo)m(vie)h(should)e(b)s(e)h(serv)m(ed)h
(within)d(a)j(reasonable)f(amoun)m(t)i(of)f(dela)m(y)f(\(sa)m(y)i(2)f
(min)m(utes\).)44 b(D)m(VS)32 b(consists)0 2073 y(of)e(a)h(n)m(um)m(b)s
(er)e(of)h(con)m(tin)m(uous)g(media)g(serv)m(ers,)g(suc)m(h)g(as)h
Fn(Mitr)-5 b(a)30 b Fp([GZS)2429 2040 y Fm(+)2488 2073
y Fp(97)q(])g(or)h Fn(F)-7 b(el)5 b(lini)30 b Fp([MNO)3275
2040 y Fm(+)3334 2073 y Fp(97)q(],)h(connected)0 2265
y(to)j(eac)m(h)g(other)f(via)g(dedicated)g(net)m(w)m(ork)h(lines.)47
b(Unlik)m(e)32 b(the)h(customers)g(of)h(a)f(video)g(ren)m(tal)g(store,)
h(the)g(users)0 2457 y(of)e(D)m(VS)f(do)h(not)f(ha)m(v)m(e)i(to)f(driv)
m(e)f(to)h(the)f(store)h(to)h(ren)m(t)e(a)h(mo)m(vie)g(nor)f(need)g(to)
h(w)m(orry)f(ab)s(out)g(the)h(a)m(v)-5 b(ailabilit)m(y)0
2648 y(of)35 b(their)f(desired)g(mo)m(vies.)54 b(As)35
b(compared)g(to)h Fn(p)-5 b(ay-p)g(er-view)36 b Fp(TV,)f(the)g(users)f
(of)h(D)m(VS)h(are)f(pro)m(vided)f(with)g(a)0 2840 y(larger)d
(selections)g(and)g(can)h(w)m(atc)m(h)h(their)e(selected)h(mo)m(vies)f
(at)h(an)m(y)g(desired)e(time.)44 b(In)31 b(addition,)f(adv)m(ertisers)
0 3032 y(can)40 b(b)s(ene\014t)f(from)h(users')f(pro\014les)g(to)i(b)s
(etter)f(direct)f(their)g(commercials)h(to)h(p)s(oten)m(tial)e
(customers.)70 b(This)0 3224 y(t)m(yp)s(e)35 b(of)g(narro)m(w-cast)h
(adv)m(ertising)e(is)g(v)m(ery)h(attractiv)m(e)i(to)f(adv)m(ertisers)e
(and)g(hence)h(it)g(can)g(b)s(e)f(emplo)m(y)m(ed)h(to)0
3416 y(amortize)e(the)f(system)h(cost)g(among)g(them.)47
b(The)32 b(users)f(can)i(either)e(w)m(atc)m(h)j(a)f(mo)m(vie)f(free)h
(of)f(c)m(harge)i(b)m(y)e(also)0 3608 y(w)m(atc)m(hing)f(a)f(n)m(um)m
(b)s(er)f(of)i(customized)f(commercials)g(or)g(pa)m(y)h(for)f(the)g(mo)
m(vie)h(and)e(w)m(atc)m(h)j(it)e(commercial)g(free.)0
3800 y(In)i(summary)-8 b(,)34 b(D)m(VS)f(is)g(a)g(more)g(\015exible)f
(and)g(p)s(oten)m(tially)g(c)m(heap)s(er)h(service)g(as)h(compared)f
(to)h(pa)m(y-p)s(er-view)0 3992 y(and)k(video)h(ren)m(tal)g(stores.)67
b(By)40 b(collectiv)m(ely)e(supp)s(orting)f(the)i(customers)g(of)h(b)s
(oth)e(of)h(these)h(services,)h(the)0 4184 y(success)31
b(of)f(D)m(VS)h(is)e(trivial.)141 4454 y(There)j(are)h(t)m(w)m(o)g
(alternativ)m(e)g(designs)e(to)i(supp)s(ort)d(MOD)j(as)g(opp)s(osed)e
(to)i(the)f(D)m(VS)h(design:)44 b(1\))33 b(a)f(single)0
4646 y(large)26 b(cen)m(tralized)f(serv)m(er,)j(and)d(2\))h(a)g(n)m(um)
m(b)s(er)f(of)g(indep)s(enden)m(t)f(serv)m(ers.)39 b(The)25
b(geographical)h(disbursemen)m(t)e(of)0 4838 y(users)30
b(results)g(in)g(a)h(high)f(comm)m(unication)h(cost)h(for)e(the)i
(\014rst)e(approac)m(h.)43 b(The)31 b(bandwidth)d(requiremen)m(t)i(for)
0 5030 y(this)20 b(approac)m(h)h(is)f(estimated)h(to)g(b)s(e)g(as)g
(high)e(as)i(1.54)i(Pb/s)d(\(P)m(eta-bit)i(p)s(er)e(second\))h(for)g
(the)g(con)m(tinen)m(tal)g(United)0 5222 y(States)28
b([NPSS95].)40 b(With)26 b(the)h(second)g(approac)m(h,)h(eac)m(h)g
(serv)m(er)f(m)m(ust)g(b)s(e)f(large)h(enough)g(to)g(accommo)s(date)i
(all)1927 5656 y(2)p eop
%%Page: 3 3
3 2 bop 0 99 a Fp(the)32 b(mo)m(vies.)45 b(This)30 b(requires)h(lo)s
(cal)g(serv)m(ers)h(with)e(large)i(storage)h(space)g(and)e(imp)s(oses)f
(an)i(extra)h(o)m(v)m(erhead)g(of)0 290 y(main)m(taining)f(eac)m(h)j
(serv)m(er)f(\(i.e.)51 b(insertion)32 b(of)i(new)g(mo)m(vies)g(and)f
(deletion)g(of)h(older)f(ones\).)51 b(Although)33 b(D)m(VS)0
482 y(still)h(requires)h(large)h(national)g(serv)m(ers)g(that)h(can)f
(store)h(a)g(ric)m(h)e(set)i(of)g(mo)m(vies,)h(ob)5 b(jects)37
b(can)f(b)s(e)g(cac)m(hed)h(on)0 674 y(smaller)30 b(lo)s(cal)g(serv)m
(ers)i(closer)f(to)h(the)f(users)g(in)f(order)g(to)i(reduce)f(the)h
(comm)m(unication)f(cost.)44 b(Moreo)m(v)m(er,)34 b(the)0
866 y(n)m(um)m(b)s(er)29 b(of)i(large)f(serv)m(ers)h(in)e(this)g
(design)g(is)h(m)m(uc)m(h)g(less)g(than)g(that)h(of)f(the)h(indep)s
(enden)m(t)d(serv)m(ers)j(design.)141 1137 y(T)-8 b(o)21
b(strik)m(e)f(a)h(compromise)f(b)s(et)m(w)m(een)h(the)f(comm)m
(unication)g(cost)i(and)e(the)g(serv)m(er)h(cost,)i(some)e(studies)e
([BP96)r(,)0 1328 y(NPSS95])40 b(ha)m(v)m(e)h(prop)s(osed)e(a)h
(hierarc)m(hical)e(net)m(w)m(ork)j(top)s(ology)f(for)g(a)g(D)m(VS.)g
(In)g(this)e(pap)s(er,)k(ho)m(w)m(ev)m(er,)h(w)m(e)0
1520 y(prop)s(ose)d(a)h(redundan)m(t)e(hierarc)m(h)m(y)h(\(RedHi\))g
(arc)m(hitecture.)72 b(With)40 b(RedHi,)j(eac)m(h)e(no)s(de)f(has)g(t)m
(w)m(o)i(or)f(more)0 1712 y(paren)m(ts.)50 b(This)32
b(not)h(only)g(mak)m(es)h(the)g(system)f(more)h(fault-toleran)m(t)g
(\(if)f(a)g(connection)h(fails,)f(the)h(clien)m(t)f(will)0
1904 y(not)c(b)s(ecome)g(isolated\),)h(but)e(also)g(impro)m(v)m(es)h
(load)f(balancing)g(\(eac)m(h)i(no)s(de)e(has)h(a)g(c)m(hoice)h(to)g
(where)e(to)h(obtain)0 2096 y(the)k(data)g(in)f(order)g(to)i(balance)e
(the)h(load\).)48 b(W)-8 b(e)34 b(b)s(eliev)m(e)e(that)h(the)g(impro)m
(v)m(emen)m(t)g(in)f(the)g(p)s(erformance)h(and)0 2288
y(reliabilit)m(y)27 b(of)k(the)f(system)h(justi\014es)e(the)h(extra)h
(cost)h(of)e(the)h(redundan)m(t)e(links.)141 2558 y(Assuming)g(the)h
(RedHi)g(arc)m(hitecture,)h(w)m(e)g(address)f(the)g(follo)m(wing)f
(issues)g(in)g(this)g(pap)s(er:)136 2904 y Fl(\017)46
b Fp(Distributed)27 b(information)g(managemen)m(t:)42
b(Eac)m(h)29 b(no)s(de)g(of)g(RedHi)f(\(i.e.,)i(a)f(serv)m(er\))h
(stores)f Fk(static)g Fp(infor-)227 3096 y(mation)h(ab)s(out)g(all)g
(the)g(ob)5 b(jects)31 b(suc)m(h)f(as)h(ob)5 b(ject)31
b(size)g(and)e(displa)m(y)g(format.)41 b(No)s(des)30
b(do)g(not,)h(ho)m(w)m(ev)m(er,)227 3288 y(k)m(eep)39
b(trac)m(k)f(of)g Fk(dy)s(namic)g Fp(information)e(suc)m(h)h(as)h(the)f
(lo)s(cations)g(of)h(the)g(ob)5 b(jects.)63 b(W)-8 b(e)38
b(sho)m(w)g(that)g(an)227 3480 y(ob)5 b(ject)35 b(can)f(b)s(e)f(lo)s
(cated)h(and)e(retriev)m(ed)i(in)e(a)i(distributed)d(manner.)50
b(Distributed)31 b(information)h(man-)227 3672 y(agemen)m(t)g
(eliminates)d(the)i(p)s(ossibilit)m(y)c(of)j(b)s(ottlenec)m(ks)h(and)f
(mak)m(es)h(the)f(system)h(more)f(fault-toleran)m(t.)136
3930 y Fl(\017)46 b Fp(Load)32 b(balancing:)43 b(Since)31
b(no)s(des)g(of)h(RedHi)f(ha)m(v)m(e)i(more)f(than)g(one)g(paren)m(t,)h
(eac)m(h)g(no)s(de)e(migh)m(t)h(b)s(e)f(able)227 4122
y(to)k(obtain)f(an)g(ob)5 b(ject)35 b(through)f(m)m(ultiple)e(paths.)52
b(W)-8 b(e)35 b(prop)s(ose)f(a)g(n)m(um)m(b)s(er)f(of)i(heuristics)d
(to)j(\014nd)e(the)227 4314 y Fk(best)26 b Fp(path)h(to)g(balance)f
(the)h(load.)39 b(W)-8 b(e)27 b(sho)m(w)g(our)f(heuristics)e(can)j(b)s
(e)e(implemen)m(ted)g(in)g(RedHi)h(with)f(lo)m(w)227
4506 y(complexit)m(y)-8 b(.)136 4765 y Fl(\017)46 b Fp(Resource)41
b(reserv)-5 b(ation:)60 b(When)40 b(m)m(ultiple)e(no)s(des)h(are)i(sim)
m(ultaneously)d(exercising)h(their)h(options)f(to)227
4957 y(\014nd)24 b(b)s(est)h(p)s(ossible)e(paths,)j(di\013eren)m(t)f
(resource)h(reserv)-5 b(ation)25 b(strategies)h(m)m(ust)g(b)s(e)f
(emplo)m(y)m(ed)g(to)h(prev)m(en)m(t)227 5149 y(collisions.)38
b(W)-8 b(e)32 b(prop)s(ose)e(three)g(reserv)-5 b(ation)30
b(strategies:)42 b(optimistic,)29 b(p)s(essimistic)f(and)h(serv)m
(er-lo)s(c)m(k.)136 5407 y Fl(\017)46 b Fp(Adaptiv)m(e)27
b(bu\013ering)d(mec)m(hanisms:)38 b(W)-8 b(e)28 b(prop)s(ose)e(t)m(w)m
(o)h(adaptiv)m(e)g(bu\013ering)e(mec)m(hanisms)g(that)i(emplo)m(y)1927
5656 y(3)p eop
%%Page: 4 4
4 3 bop 227 99 a Fp(clien)m(t)32 b(side)g(memory)g(to)h(impro)m(v)m(e)g
(the)f(system)h(utilization.)45 b(The)32 b Fn(Eager)i(Pip)-5
b(elining)33 b Fp(mec)m(hanism)f(can)227 290 y(utilize)e(uncommitted)h
(resources)g(to)h(sp)s(eed)f(up)f(ob)5 b(ject)32 b(deliv)m(ery)e(and)h
(hence)h(enabling)d(the)j(system)f(to)227 482 y(free)d(reserv)m(ed)f
(resources)h(earlier.)38 b(The)27 b Fn(L)-5 b(azy)31
b(Pip)-5 b(elining)28 b Fp(can)f(b)s(e)g(emplo)m(y)m(ed)h(to)g(serv)m
(e)g(a)g(request)f(whic)m(h)227 674 y(requires)i(more)i(bandwidth)c
(than)j(what)h(is)e(a)m(v)-5 b(ailable.)136 941 y Fl(\017)46
b Fp(RedHi)26 b(con\014guration:)38 b(Determining)25
b(the)h(n)m(um)m(b)s(er)f(and)h(the)h(capacit)m(y)g(of)g(serv)m(ers)f
(and)g(links)e(in)h(RedHi)227 1133 y(as)41 b(w)m(ell)e(as)i(its)f
(connection)g(top)s(ology)h(is)e(a)i(complex)f(task.)71
b(While)40 b(w)m(e)g(do)h(not)f(address)g(this)f(issue)227
1325 y(thoroughly)-8 b(,)30 b(w)m(e)h(pro)m(vide)f(some)g(guidelines)e
(to)j(help)e(a)i(designer)e(for)h(con\014guring)f(RedHi.)136
1592 y Fl(\017)46 b Fp(P)m(erformance)34 b(ev)-5 b(aluation)32
b(via)h(a)g(sim)m(ulation)e(study:)45 b(W)-8 b(e)35 b(compared)e(RedHi)
f(with)f(pure)h(hierarc)m(hical)227 1784 y(arc)m(hitecture)d(in)d(b)s
(oth)h(normal)f(mo)s(de)h(of)h(op)s(eration)f(and)g(in)f(the)i
(presence)g(of)g(failure.)38 b(Our)26 b(sim)m(ulation)227
1975 y(studies)g(demonstrated)g(an)h(a)m(v)m(erage)i(of)e(160\045)h
(impro)m(v)m(emen)m(t)f(with)e(RedHi)h(in)f(normal)h(mo)s(de)g(of)h(op)
s(era-)227 2167 y(tion.)39 b(When)24 b(the)i(system)f(is)f(not)h(o)m(v)
m(er-utilized)f(\(i.e.,)j(load)e Fl(\024)g Fp(100\045\),)i(a)f(single)d
(link)g(failure)g(resulted)h(an)227 2359 y(a)m(v)m(erage)33
b(of)d(2)p Fk(:)p Fp(5\045)h(rejections)f(with)f(pure)g(hierarc)m(h)m
(y)h(while)e(RedHi)h(rejected)i(no)f(request.)41 b(In)29
b(addition,)227 2551 y(w)m(e)i(ev)-5 b(aluated)31 b(the)f(p)s
(erformance)g(of)g(our)g(replacemen)m(t)h(p)s(olicies)d(and)i(path)g
(\014nder)f(heuristics.)0 2921 y(The)41 b(rest)h(of)g(this)f(pap)s(er)f
(is)h(organized)h(as)g(follo)m(ws.)74 b(Sec.)42 b(2)g(co)m(v)m(ers)i
(some)e(related)f(w)m(ork)h(on)g(distributed)0 3113 y(serv)m(er)37
b(arc)m(hitectures.)59 b(The)36 b(RedHi)f(arc)m(hitecture)i(is)f
(formally)e(de\014ned)h(in)g(Sec.)i(3.)59 b(In)36 b(Sec.)h(4,)h(our)e
(ob)5 b(ject)0 3305 y(cac)m(hing)29 b(and)e(replacemen)m(t)i(p)s
(olicies)d(are)j(explained.)38 b(The)28 b(heuristics)e(for)i(balancing)
f(the)h(load)g(in)f(RedHi)h(are)0 3497 y(discussed)22
b(in)g(Sec.)i(5,)h(and)e(Sec.)h(6)g(presen)m(ts)g(the)f(adaptiv)m(e)h
(bu\013ering)e(mec)m(hanisms.)38 b(In)22 b(Sec.)i(7,)i(our)d(sim)m
(ulation)0 3689 y(exp)s(erimen)m(ts)35 b(are)i(describ)s(ed.)57
b(Finally)-8 b(,)36 b(Sec.)h(8)g(concludes)e(the)i(pap)s(er)e(and)h
(pro)m(vides)f(an)h(o)m(v)m(erview)h(on)f(our)0 3881
y(future)29 b(plans.)0 4350 y Fo(2)135 b(Related)46 b(W)-11
b(ork)0 4710 y Fp(A)31 b(signi\014can)m(t)f(amoun)m(t)i(of)f(researc)m
(h)h(w)m(as)f(conducted)g(on)g(cen)m(tralized)g(m)m(ultimedia)e(serv)m
(ers)i(\(e.g.,)i([GZS)3725 4677 y Fm(+)3784 4710 y Fp(97)q(,)0
4902 y(GVK)210 4869 y Fm(+)269 4902 y Fp(95)q(,)26 b(R)-10
b(VR92)q(,)26 b(MNO)967 4869 y Fm(+)1026 4902 y Fp(97)q(,)g(CL93,)g
(HLLD97)q(,)g(LPS94]\),)h(as)f(w)m(ell)f(as)h(high-sp)s(eed)e(net)m(w)m
(orks)i(\(e.g.,[Pry95)s(,)0 5094 y(RRM)217 5061 y Fm(+)276
5094 y Fp(93)q(,)44 b(IA93)q(]\).)83 b(The)43 b(c)m(hallenge,)48
b(ho)m(w)m(ev)m(er,)h(is)43 b(to)i(marry)e(these)i(t)m(w)m(o)g(tec)m
(hnologies)g(to)g(ac)m(hiev)m(e)g(cost)0 5286 y(e\013ectiv)m(e)32
b(deliv)m(ery)d(of)i(m)m(ultimedia)d(ob)5 b(jects)31
b(to)g(users.)1927 5656 y(4)p eop
%%Page: 5 5
5 4 bop 141 99 a Fp(A)47 b(n)m(um)m(b)s(er)f(of)i(distributed)c(serv)m
(er)k(arc)m(hitectures)f(w)m(ere)h(prop)s(osed)e(in)g([BP96)q(,)i
(NPSS95,)f(LLQW96)q(,)0 290 y(D)m(VV94)r(].)75 b(F)-8
b(requen)m(tly)42 b(the)g(prop)s(osed)e(net)m(w)m(ork)j(arc)m
(hitecture)f(in)f(these)h(studies)e(is)h(assumed)g(to)h(b)s(e)f(a)h
Fk(d)p Fp(-)0 482 y(ary)d(tree)g(with)f(eac)m(h)i(no)s(de)e(represen)m
(ting)g(a)h(switc)m(h)f(\(see)i(Fig.)f(1\(a\)\).)68 b(Moreo)m(v)m(er,)
43 b(at)d(eac)m(h)g(no)s(de)e(\(switc)m(h\))0 674 y(there)d(exists)f(a)
h(m)m(ultimedia)d(serv)m(er)j(whic)m(h)e(is)g(emplo)m(y)m(ed)i(to)g
(cac)m(he)h(a)f(subset)f(of)g(the)h(ob)5 b(jects.)54
b(A)m(t)35 b(the)g(ro)s(ot)0 866 y(of)i(the)h(tree)g(sits)e(what)h(is)f
(referred)h(to)h(as)f(a)h(regional)e(or)h(national)g(serv)m(er.)61
b(A)38 b(national)e(serv)m(er)h(should)f(b)s(e)0 1058
y(large)27 b(enough)g(to)h(store)g(all)e(the)h(a)m(v)-5
b(ailable)26 b(ob)5 b(jects.)41 b(A)27 b(regional)f(serv)m(er,)j(ho)m
(w)m(ev)m(er,)g(is)d(connected)i(via)f(another)0 1250
y(net)m(w)m(ork)g(to)g(other)g(regional)f(serv)m(ers)g(whic)m(h)g
(collectiv)m(ely)g(store)h(all)e(the)i(ob)5 b(jects)27
b(a)m(v)-5 b(ailable)26 b(in)f(the)h(system.)40 b(A)m(t)0
1442 y(the)28 b(lo)m(w)m(est)g(lev)m(el)g(of)g(the)g(hierarc)m(h)m(y)f
(are)h(the)g(head-end)f(no)s(des)g(to)h(whic)m(h)f(users)g(are)h
(connected.)40 b(Asymmetric)0 1634 y(digital)34 b(subscrib)s(er)f(line)
h(\(ADSL\))j(seems)f(to)g(b)s(e)f(the)h(strongest)h(candidate)e(for)h
(connecting)g(users)f(to)h(these)0 1826 y(head-end)j(no)s(des)f([L)-10
b(V94)r(].)67 b(The)39 b(higher)f(lev)m(els)h(of)h(the)f(hierarc)m(h)m
(y)-8 b(,)42 b(ho)m(w)m(ev)m(er,)h(are)d(t)m(ypically)e(based)h(on)h
(the)0 2018 y(async)m(hronous)30 b(transfer)g(mo)s(de)g(\(A)-8
b(TM\))31 b(tec)m(hnology)-8 b(.)141 2288 y(In)23 b(this)f(pap)s(er,)i
(w)m(e)g(are)g(extending)e(the)i(ab)s(o)m(v)m(e)g(arc)m(hitecture)g(in)
m(to)g(a)f(redundan)m(t)f(hierarc)m(hical)g(arc)m(hitecture)0
2480 y(to)37 b(ac)m(hiev)m(e)g(a)f(b)s(etter)g(fault-tolerance)h(and)e
(load)h(balancing.)56 b(The)36 b(w)m(ork)g(in)70 b([BP96)r(,)36
b(NPSS95,)g(LLQW96)q(,)0 2672 y(D)m(VV94)r(])g(concen)m(trated)i(on)d
(the)h(comm)m(unication)f(asp)s(ects)h(of)g(this)f(distributed)e(serv)m
(er)j(arc)m(hitecture)g(while)0 2864 y(our)23 b(ma)5
b(jor)23 b(fo)s(cus)f(is)g(to)i(dev)m(elop)f(metho)s(ds)f(and)h(p)s
(olicies)e(for)h(the)i(distributed)c(managemen)m(t)k(of)g(ob)5
b(jects)23 b(in)f(this)0 3056 y(arc)m(hitecture.)39 b(It)21
b(is)g(also)h(imp)s(ortan)m(t)f(to)h(p)s(oin)m(t)f(out)h(that)h
(although)e(D)m(VS)h(has)g(some)g(similarities)c(to)23
b(traditional)0 3248 y(distributed)36 b(information)i(systems)h(\(e.g.)
i([Sim96)o(])f(\),)i(it)c(is)g(mainly)g(designed)g(for)h(unin)m
(terrupted)d(deliv)m(ery)0 3440 y(of)41 b(con)m(tin)m(uous)g(media)f
(ob)5 b(jects,)45 b(something)c(that)g(has)g(not)g(b)s(een)g
(considered)f(in)f(traditional)h(distributed)0 3632 y(information)29
b(systems.)0 4101 y Fo(3)135 b(System)45 b(Arc)l(hitecture)0
4461 y Fp(The)34 b(main)f(motiv)-5 b(ation)34 b(b)s(ehind)e(prop)s
(osing)h(hierarc)m(hical)g(D)m(VS)h(\(pure)g(or)h(redundan)m(t\),)g(as)
f(men)m(tioned)g(ear-)0 4653 y(lier,)g(is)f(to)i(reduce)g(the)f(comm)m
(unication)g(cost.)53 b(Comm)m(unication)33 b(cost)j(can)e(b)s(e)g
(de\014ned)f(as)i(the)f(cum)m(ulativ)m(e)0 4845 y(bandwidth)25
b(requiremen)m(t)j(of)g(the)h(system.)40 b(Allo)m(wing)26
b(users)i(to)h(connect)g(to)g(lo)s(cal)e(head-ends,)h(as)h(opp)s(osed)e
(to)0 5037 y(ha)m(ving)k(them)h(connected)g(to)g(a)g(cen)m(tralized)g
(serv)m(er,)g(can)g(signi\014can)m(tly)d(reduce)j(the)f(cum)m(ulativ)m
(e)h(bandwidth)0 5229 y(requiremen)m(t)e(of)g(the)h(system.)1927
5656 y(5)p eop
%%Page: 6 6
6 5 bop 685 7 a
 20204966 12787959 394690 25720668 38613893 49862574 startTexFig
 685 7 a
%%BeginDocument: hier.eps

/tgifdict 3 dict def
tgifdict begin

/tgifellipsedict 6 dict def
tgifellipsedict /mtrx matrix put

/tgifellipse
 { tgifellipsedict begin
      /yrad exch def
      /xrad exch def
      /y exch def
      /x exch def
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 0 360 arc
      savematrix setmatrix
   end
 } def

end

tgifdict begin
/tgifsavedpage save def

1 setmiterlimit
1 setlinewidth

0 setgray

72 0 mul 72 11.00 mul translate
72 128 div 100 mul 100 div dup neg scale

gsave

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 880 112 48 48 tgifellipse stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 776 280 40 40 tgifellipse stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      784 240 moveto
      848 144 lineto
   stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 1000 280 40 40 tgifellipse stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   5 setlinewidth
   newpath
      912 144 moveto
      992 240 lineto
   stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 704 448 32 32 tgifellipse stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 776 584 24 24 tgifellipse stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      720 416 moveto
      768 320 lineto
   stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   [4 4] 0 setdash
   newpath
      1008 320 moveto
      1040 384 lineto
   stroke
   [] 0 setdash
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   7 setlinewidth
   newpath
      720 480 moveto
      768 560 lineto
   stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 648 584 24 24 tgifellipse stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      688 480 moveto
      656 560 lineto
   stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 896 448 32 32 tgifellipse stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 968 584 24 24 tgifellipse stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      912 480 moveto
      960 560 lineto
   stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 840 584 24 24 tgifellipse stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      880 480 moveto
      848 560 lineto
   stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      784 320 moveto
      880 416 lineto
   stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   6 setlinewidth
   newpath
      736 432 moveto
      960 288 lineto
   stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      896 416 moveto
      992 320 lineto
   stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      784 560 moveto
      864 464 lineto
   stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      832 560 moveto
      736 464 lineto
   stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   [4 4] 0 setdash
   newpath
      976 560 moveto
      1008 480 lineto
   stroke
   [] 0 setdash
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   5 setlinewidth
   [4 4] 0 setdash
   newpath
      640 560 moveto
      608 496 lineto
   stroke
   [] 0 setdash
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   [4 4] 0 setdash
   newpath
      1008 240 moveto
      1040 160 lineto
   stroke
   [] 0 setdash
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   [4 4] 0 setdash
   newpath
      768 240 moveto
      736 160 lineto
   stroke
   [] 0 setdash
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 272 112 48 48 tgifellipse stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 168 280 40 40 tgifellipse stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      176 240 moveto
      240 144 lineto
   stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 392 280 40 40 tgifellipse stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      304 144 moveto
      384 240 lineto
   stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 96 448 32 32 tgifellipse stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 168 584 24 24 tgifellipse stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      112 416 moveto
      160 320 lineto
   stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   [4 4] 0 setdash
   newpath
      208 400 moveto
      176 320 lineto
   stroke
   [] 0 setdash
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   [4 4] 0 setdash
   newpath
      416 320 moveto
      448 384 lineto
   stroke
   [] 0 setdash
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      112 480 moveto
      160 560 lineto
   stroke
   1 setlinewidth
grestore

% OVAL
0 setgray
gsave
   3 setlinewidth
   newpath 40 584 24 24 tgifellipse stroke
   1 setlinewidth
grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   newpath
      80 480 moveto
      48 560 lineto
   stroke
   1 setlinewidth
grestore

% TEXT
0 setgray
/Courier-Bold findfont [34 0 0 -34 0 0] makefont setfont
   gsave
      464 618 moveto (Level k) show
   grestore

% TEXT
0 setgray
/Courier-Bold findfont [34 0 0 -34 0 0] makefont setfont
   gsave
      464 474 moveto (Level k-1) show
   grestore

% TEXT
0 setgray
/Courier-Bold findfont [34 0 0 -34 0 0] makefont setfont
   gsave
      464 298 moveto (Level k-2) show
   grestore

% TEXT
0 setgray
/Courier-Bold findfont [34 0 0 -34 0 0] makefont setfont
   gsave
      464 122 moveto (Level k-3) show
   grestore

% POLY/OPEN-SPLINE
0 setgray
gsave
   3 setlinewidth
   [4 4] 0 setdash
   newpath
      336 384 moveto
      368 320 lineto
   stroke
   [] 0 setdash
   1 setlinewidth
grestore

% TEXT
0 setgray
/Times-Bold findfont [34 0 0 -34 0 0] makefont setfont
   gsave
      656 702 moveto (\(b\)Redundant Hierarchy) show
   grestore

% TEXT
0 setgray
/Times-Bold findfont [34 0 0 -34 0 0] makefont setfont
   gsave
      160 702 moveto (\(a\)Pure Tree) show
   grestore

% TEXT
0 setgray
/Times-Bold findfont [34 0 0 -34 0 0] makefont setfont
   gsave
      864 126 moveto (A) show
   grestore

% TEXT
0 setgray
/Times-Bold findfont [25 0 0 -25 0 0] makefont setfont
   gsave
      768 598 moveto (F) show
   grestore

grestore
tgifsavedpage restore
end
%MatchingCreationDate: Thu Feb 27 17:53:18 1997
%%EndDocument

 endTexFig
 970 1823 a Fp(Figure)30 b(1:)41 b(Illustration)28 b(of)i(Pure)g
(Hierarc)m(h)m(y)h(&)f(RedHi)141 2098 y(In)e(hierarc)m(hical)g(D)m(VS,)
i(unin)m(terrupted)c(deliv)m(ery)i(of)h(con)m(tin)m(uous)g(media)f(ob)5
b(ject)30 b(is)e(not)h(a)h(trivial)d(task.)41 b(In)0
2290 y(this)30 b(pap)s(er,)g(w)m(e)h(assume)g(a)g(pip)s(elined)c(ob)5
b(ject)32 b(deliv)m(ery)-8 b(.)41 b(That)31 b(is,)f(the)h(\014rst)f
(blo)s(c)m(k)g(of)h(data)h(reac)m(hes)g(the)f(user)0
2482 y(after)24 b(an)e(initial)f(dela)m(y;)k(all)d(consequen)m(t)i(blo)
s(c)m(ks)e(will)f(then)h(arriv)m(e)h(in)f(a)h(timely)f(fashion)g(with)f
(no)i(in)m(terruptions.)0 2674 y(T)-8 b(o)35 b(illustrate,)f(supp)s
(ose)f(that)i(a)g(user)f(connected)h(to)h(no)s(de)e(F)g(\(see)i(Fig.)f
(1b\))f(requested)h(an)f(ob)5 b(ject)36 b Fk(O)s(i)e
Fp(\(a)i(2)0 2866 y(hour)d(MPEG-2)j(mo)m(vie)e(with)f(a)i(bandwidth)c
(requiremen)m(t)j(of)g(2)h(Mb/s\).)53 b(No)s(de)34 b(F)h(needs)f(to)h
(lo)s(cate)g Fk(O)s(i)g Fp(and)0 3058 y(select)j(a)g(path)f(to)h
(retriev)m(e)g(it)f(\(lo)s(cating)g(an)h(ob)5 b(ject)38
b(and)f(selecting)g(a)h(path)f(will)e(b)s(e)h(discussed)g(in)g(Sec.)i
(5\).)0 3250 y(Supp)s(ose)27 b(that)i(the)g(highligh)m(ted)e(path)h(in)
g(Fig.)h(1b)f(w)m(as)i(selected)f(to)g(retriev)m(e)g
Fk(O)s(i)g Fp(from)g(no)s(de)f(A.)h(Prior)e(to)j(the)0
3442 y(initiation)g(of)j(the)g(displa)m(y)-8 b(,)33 b(the)g(system)g
(needs)f(to)i(reserv)m(e)f(the)g(required)e(bandwidth)f(\(2)k(Mb/s\))f
(at)h(no)s(de)e(A)0 3634 y(and)25 b(all)g(the)h(links)e(participating)g
(in)h(the)h(path.)39 b(Note)27 b(that)f(it)g(is)f(not)h(essen)m(tial)f
(\(but)h(p)s(ossible\))e(to)i(materialize)0 3826 y Fk(O)s(i)g
Fp(at)g(an)m(y)f(of)h(the)g(no)s(des)e(through)h(the)h(path)f
(\(including)d(no)s(de)j(F\).)h(After)g(reserving)e(the)i(resources)f
(along)h(the)0 4018 y(path,)35 b(a)f(pip)s(eline)c(is)j(established.)49
b(That)33 b(is,)h(the)g(displa)m(y)e(of)i Fk(O)s(i)g
Fp(starts)g(after)g(the)g(arriv)-5 b(al)32 b(of)i(its)f(\014rst)g(blo)s
(c)m(k)0 4210 y(to)i(no)s(de)g(F)f(and)h(con)m(tin)m(ues)f(with)g(no)g
(in)m(terruptions)f(for)h(2)h(hours.)53 b(In)34 b(Sec.)h(6,)i(w)m(e)e
(sho)m(w)f(ho)m(w)h(w)m(e)g(relax)g(the)0 4402 y(resource)c(reserv)-5
b(ation)30 b(to)h(reserv)m(e)g(less)f(or)g(more)g(bandwidth)e(than)i
(what)g(is)g(required)e(for)i(ob)5 b(ject)32 b(displa)m(y)-8
b(.)141 4672 y(In)36 b(addition)g(to)i(eliminating)c(the)j(one)h(paren)
m(t)f(restriction)f(in)g(RedHi,)i(as)f(opp)s(osed)f(to)i(pure)e
(hierarc)m(h)m(y)0 4864 y(in)41 b([BP96)q(,)i(NPSS95],)i(w)m(e)e(do)f
(not)h(assume)f(that)g(no)s(des)g(at)h(the)f(same)h(lev)m(el)f(ha)m(v)m
(e)h(the)f(same)h(amoun)m(t)g(of)0 5056 y(resources)c(\(serv)m(er)g
(bandwidth)d(and)i(storage)i(capacit)m(y\).)68 b(Nor)38
b(w)m(e)i(assume)e(that)h(links)e(connecting)i(no)s(des)0
5248 y(of)33 b(lev)m(el)g Fk(k)k Fp(to)d(lev)m(el)f Fk(k)s
Fp(-1)h(of)g(the)f(hierarc)m(h)m(y)g(ha)m(v)m(e)h(an)g(iden)m(tical)e
(bandwidth.)46 b(Therefore,)34 b(when)f(the)g(n)m(um)m(b)s(er)1927
5656 y(6)p eop
%%Page: 7 7
7 6 bop 0 99 a Fp(of)40 b(users)g(of)g(a)h(head-end)e(increases,)k(the)
d(system)h(can)f(b)s(e)g(expanded)f(b)m(y)h(adding)f(more)i(resources)f
(at)h(the)0 290 y(head-end)32 b(\(e.g.,)i(more)e(disk)e(space\),)k
(adding)d(a)h(new)f(link,)g(increasing)g(the)h(bandwidth)d(of)j
(existing)f(links)f(or)0 482 y(applying)e(a)j(com)m(bination)f(of)g
(the)h(three.)0 880 y Fj(3.1)112 b(F)-9 b(ormal)37 b(de\014nition)f(of)
i(RedHi)0 1209 y Fp(The)f(concept)h(of)f Fn(L)-5 b(evele)g(d)40
b(Gr)-5 b(aph)39 b Fp(will)34 b(b)s(e)j(de\014ned)f(as)h(a)h
(generalization)f(of)g(bipartite)f(graph.)60 b(RedHi)37
b(will)0 1401 y(then)30 b(b)s(e)g(de\014ned)f(as)i(a)f(sp)s(ecial)f
(case)j(of)e(lev)m(eled)g(graph.)0 1736 y Fi(De\014nition)35
b(3.1)q(:)44 b Fn(L)-5 b(evele)g(d)35 b(Gr)-5 b(aph)34
b Fl(LG)e Fp(=)27 b(\()p Fl(V)7 b Fk(;)15 b Fl(E)8 b
Fp(\))33 b(is)e(a)h(graph)f(where)g Fl(V)39 b Fp(is)31
b(the)h(set)g(of)g(v)m(ertices)g(and)f Fl(E)40 b Fp(is)31
b(the)0 1928 y(set)g(of)f(edges,)i(and)d(it)h(satis\014es)g(the)h
(follo)m(wing)e(t)m(w)m(o)i(conditions:)141 2198 y(1\).)50
b(There)33 b(exists)g(a)g(partition)f Fl(fV)1377 2212
y Fh(i)1436 2198 y Fl(j)e Fk(i)g Fl(2)g Fp(1)p Fk(::n;)15
b(n)30 b Fl(\025)g Fp(1)p Fl(g)k Fp(of)f Fl(V)7 b Fk(;)34
b Fp(suc)m(h)f(that)h(if)e Fk(n)e(>)f Fp(1)34 b(then)f
Fl(8)p Fk(e)d Fl(2)f(E)8 b Fp(,)34 b(where)0 2390 y Fk(e)26
b Fp(=)f(\()p Fk(u;)15 b(w)r Fp(\))p Fk(;)g Fl(9)p Fk(j)32
b Fl(2)25 b Fp(2)p Fk(::n)p Fp(,)i(suc)m(h)e(that)h Fk(u)f
Fl(2)g(V)1452 2404 y Fh(j)1514 2390 y Fp(and)g Fk(w)j
Fl(2)c(V)1920 2404 y Fh(j)t Fg(\000)p Fm(1)2047 2390
y Fp(.)39 b(That)25 b(is,)h(edges)g(connect)g(v)m(ertices)g(of)g(neigh)
m(b)s(oring)0 2582 y(lev)m(els.)40 b(Here,)31 b Fk(w)i
Fp(is)d(called)f(the)i Fk(par)s(ent)e Fp(no)s(de)h(of)g
Fk(u)p Fp(,)h(and)f Fk(u)g Fp(is)g(called)f(the)i Fk(chil)r(d)g
Fp(no)s(de)f(of)g Fk(w)r Fp(.)141 2853 y(2\).)61 b(If)36
b Fk(n)g(>)g Fp(1)h(then)g Fl(8)p Fk(v)i Fl(2)c(V)1184
2867 y Fh(i)1212 2853 y Fp(,)k(where)d Fk(i)g Fl(2)g
Fp(2)p Fk(::n;)15 b Fl(9)p Fk(e)37 b Fp(=)f(\()p Fk(u;)15
b(w)r Fp(\))37 b Fl(2)f(E)45 b Fp(suc)m(h)37 b(that)g
Fk(v)i Fp(=)d Fk(u)p Fp(.)60 b Fl(8)p Fk(v)39 b Fl(2)d(V)3621
2867 y Fm(1)3660 2853 y Fk(;)15 b Fl(9)p Fk(e)36 b Fp(=)0
3044 y(\()p Fk(u;)15 b(w)r Fp(\))28 b Fl(2)e(E)39 b Fp(suc)m(h)30
b(that)i Fk(v)d Fp(=)d Fk(w)r Fp(.)43 b(That)31 b(is,)f(ev)m(ery)i(v)m
(ertex)g(in)d(\()p Fl(V)f(\000)21 b(V)2374 3058 y Fm(1)2413
3044 y Fp(\))31 b(has)g(a)g(paren)m(t)g(and)g(ev)m(ery)g(v)m(ertex)h
(in)e Fl(V)3861 3058 y Fm(1)0 3236 y Fp(has)g(a)h(c)m(hild.)p
493 3244 34 67 v 0 3572 a(A)h(lev)m(eled)f(graph)g(can)g(b)s(e)g
(expressed)g(as)h Fl(LG)g Fp(=)27 b(\()p Fl(V)7 b Fk(;)15
b Fl(E)8 b Fk(;)15 b(n)p Fp(\),)33 b(where)e Fk(n)g Fp(is)g(the)h(n)m
(um)m(b)s(er)e(of)h(lev)m(els)g(in)g(the)g(graph.)0 3764
y(Lev)m(el)40 b Fl(V)304 3778 y Fm(1)383 3764 y Fp(con)m(tains)g(v)m
(ertices)g(that)g(are)g(called)f Fk(r)s(oot)g Fp(or)h
Fn(top)i(level)e Fp(no)s(des.)68 b(No)s(des)39 b(that)i(ha)m(v)m(e)g
(no)e(c)m(hildren)0 3956 y(\(i.e.,leaf)31 b(no)s(des\))f(are)h(termed)f
Fn(he)-5 b(ad-ends)p Fp(.)141 4226 y Fn(Pur)g(e)36 b(Hier)-5
b(ar)g(chy)35 b Fp(\(or)f(T)-8 b(ree\))34 b(is)f(an)g
Fl(LG)39 b Fp(that)34 b(has)f(one)h(and)f(only)g(one)h(ro)s(ot)g(and)f
(ev)m(ery)h(no)s(de)f(except)i(the)0 4418 y(ro)s(ot)e(has)f(one)h(and)f
(only)g(one)h(paren)m(t.)48 b Fn(R)-5 b(e)g(dundant)37
b(Hier)-5 b(ar)g(chy)34 b Fp(is)e(an)g Fl(LG)38 b Fp(that)33
b(has)f(at)i(least)f(t)m(w)m(o)h(ro)s(ots)f(and)0 4610
y(ev)m(ery)e(no)s(de)f(except)h(the)g(ro)s(ots)f(ha)m(v)m(e)i(at)f
(least)g(t)m(w)m(o)g(paren)m(ts.)0 4945 y Fi(De\014nition)k(3.2:)42
b Fn(Distribute)-5 b(d)33 b(Server)f(A)n(r)-5 b(chite)g(ctur)g(e)32
b Fl(D)s(S)7 b(A)29 b Fp(is)g(an)i Fl(LG)f Fp(=)25 b(\()p
Fl(V)7 b Fk(;)15 b Fl(E)8 b Fk(;)15 b(n)p Fp(\))32 b(where)141
5215 y(1\).)60 b(A)37 b Fk(l)r(ink)i Fp(of)e Fl(D)s(S)7
b(A)36 b Fp(is)f(an)i(edge)g(of)g(its)e(corresp)s(onding)g
Fl(LG)42 b Fp(with)35 b(t)m(w)m(o)j(parameters:)53 b
Fk(M)10 b(axB)41 b Fp(and)36 b Fk(B)5 b Fp(,)0 5407 y(whic)m(h)29
b(are)i(the)f(maxim)m(um)g(and)f(a)m(v)-5 b(ailable)30
b(bandwidth)e(of)i(the)h(link,)d(resp)s(ectiv)m(ely)-8
b(.)1927 5656 y(7)p eop
%%Page: 8 8
8 7 bop 141 99 a Fp(2\).)38 b(A)22 b Fk(ser)s(v)s(er)h
Fp(of)e Fl(D)s(S)7 b(A)20 b Fp(is)g(a)h(v)m(ertex)i(of)e(its)f(corresp)
s(onding)f Fl(LG)26 b Fp(with)20 b(\014v)m(e)h(parameters:)36
b Fk(M)10 b(axB)26 b Fp(\(maxim)m(um)0 290 y(bandwidth\),)40
b Fk(B)k Fp(\(a)m(v)-5 b(ailable)39 b(bandwidth\),)h
Fk(M)10 b(axC)46 b Fp(\(maxim)m(um)39 b(capacit)m(y\),)k
Fk(C)j Fp(\(a)m(v)-5 b(ailable)40 b(capacit)m(y\),)k(and)0
482 y Fk(O)s(bj)5 b(I)i(nf)j(o)25 b Fp(\(ob)5 b(jects)27
b(information\);)f(where)g(eac)m(h)h(ob)5 b(ject)26 b(has)g(six)f
(parameters:)38 b Fk(N)10 b(ame)26 b Fp(\(ob)5 b(ject)27
b(name\),)h Fk(T)13 b(ime)0 674 y Fp(\(recen)m(t)25 b(access)f(time)f
(for)g(the)g(ob)5 b(ject\),)26 b Fk(F)13 b(r)s(eq)26
b Fp(\(accum)m(ulated)e(access)g(frequencies\),)h Fk(F)13
b(l)r(ag)26 b Fp(\(if)d(the)g(ob)5 b(ject)24 b(exists)0
866 y(in)29 b(the)i(serv)m(er\),)g Fk(C)7 b(ont)29 b
Fp(\(con)m(ten)m(t)k(of)d(the)h(stored)f(ob)5 b(ject\),)32
b(and)e Fk(S)5 b(iz)t(e)31 b Fp(\(ob)5 b(ject)32 b(size\).)p
2990 874 34 67 v 0 1236 a(Notation:)42 b Fl(D)s(S)7 b(A)29
b Fp(can)i(either)f(b)s(e)f(a)i(Pure)f(Hierarc)m(h)m(y)g(or)h(a)g
(Redundan)m(t)e(Hierarc)m(h)m(y)i(\()p Fk(R)q(edH)7 b(i)p
Fp(\).)0 1506 y(A)27 b Fk(path)g Fp(in)e Fl(D)s(S)7 b(A)25
b Fp(=)g(\()p Fl(V)7 b Fk(;)15 b Fl(E)8 b Fk(;)15 b(n)p
Fp(\))28 b(is)e(a)h(sequence)h Fl(h)p Fk(v)1697 1520
y Fm(0)1736 1506 y Fk(;)15 b(v)1820 1520 y Fm(1)1860
1506 y Fk(;)g(:::;)g(v)2059 1521 y Fh(k)2104 1506 y Fl(i)27
b Fp(of)g(serv)m(ers,)h(where)e Fk(k)k Fp(is)c(the)h(length)g(of)g(the)
g(path,)0 1698 y(and)37 b(\()p Fk(v)263 1712 y Fh(i)p
Fg(\000)p Fm(1)382 1698 y Fk(;)15 b(v)466 1712 y Fh(i)494
1698 y Fp(\))38 b Fl(2)f(E)46 b Fp(for)37 b Fk(i)h Fp(=)f(1)p
Fk(;)15 b Fp(2)p Fk(;)g(::;)g(k)s Fp(.)65 b(F)-8 b(urthermore,)39
b(for)f(a)g(path)f(to)h(b)s(e)f(able)g(to)i(deliv)m(er)d(the)i
(requested)0 1890 y(ob)5 b(ject)32 b(in)e Fl(D)s(S)7
b(A)o Fp(,)32 b(termed)f Fn(delivery)j(p)-5 b(ath)p Fp(,)34
b(the)d(follo)m(wing)f(condition)g(m)m(ust)h(b)s(e)g(satis\014ed:)42
b Fl(8)p Fk(j)32 b Fl(2)26 b Fp(0)p Fk(::)p Fp(\()p Fk(k)g
Fl(\000)20 b Fp(1\))p Fk(;)15 b(v)3862 1904 y Fh(j)0
2082 y Fp(b)s(e)30 b(the)g(c)m(hild)f(of)i Fk(v)648 2096
y Fh(j)t Fm(+1)774 2082 y Fp(.)0 2485 y Fj(3.2)112 b(Distributed)36
b(information)g(managemen)m(t)0 2814 y Fp(Eac)m(h)e(no)s(de)f(of)g(a)h
(DSA)f(stores)h(a)g(table)f(that)h(con)m(tains)g Fk(static)f
Fp(information)f(ab)s(out)h(all)f(the)i(ob)5 b(jects)34
b(suc)m(h)f(as)0 3006 y(ob)5 b(ject)33 b(size)f(and)g(displa)m(y)e
(format.)47 b(In)31 b(addition,)g(eac)m(h)j(no)s(de)d(k)m(eeps)i(trac)m
(k)g(of)g(the)f Fn(lo)-5 b(c)g(al)36 b(ac)-5 b(c)g(ess)35
b(fr)-5 b(e)g(quency)33 b Fp(of)0 3198 y(eac)m(h)i(ob)5
b(ject.)53 b(That)34 b(is,)h(the)f(n)m(um)m(b)s(er)f(of)h(instances)g
(that)g(the)h(c)m(hildren)d(of)i(this)f(no)s(de)g(ha)m(v)m(e)j
(requested)e(eac)m(h)0 3390 y(ob)5 b(ject.)41 b(These)30
b(frequencies)f(will)f(b)s(e)h(used)g(b)m(y)h(the)g(replacemen)m(t)h(p)
s(olicies)d(that)i(will)e(b)s(e)h(discussed)f(in)h(Sec.)h(4.)0
3582 y(No)s(des)37 b(do)g(not,)i(ho)m(w)m(ev)m(er,)i(k)m(eep)c(trac)m
(k)i(of)e Fk(dy)s(namic)g Fp(information)f(suc)m(h)g(as)i(the)f(lo)s
(cations)f(of)i(the)f(ob)5 b(jects.)0 3774 y(When)34
b(a)i(no)s(de)e(receiv)m(es)h(a)g(request)g(for)f(an)h(ob)5
b(ject,)37 b(it)d(either)g(resp)s(onds)f(to)i(the)g(requester)g
(indicating)d(that)0 3966 y(it)37 b(has)h(the)f(ob)5
b(ject)39 b(and)e(able)g(to)i(deliv)m(er)d(it,)j(or)f(forw)m(ard)f
(this)g(request)h(to)g(its)f(paren)m(ts.)63 b(The)37
b(request)h(will)0 4158 y(con)m(tin)m(ue)32 b(propagating)g(up)f(in)g
(the)h(hierarc)m(h)m(y)g(un)m(til)e(the)i(ob)5 b(ject)33
b(is)e(found.)44 b(One)32 b(alternativ)m(e)g(is)f(to)i(k)m(eep)g(the)0
4350 y(information)39 b(ab)s(out)h(all)g(ob)5 b(jects)41
b(at)h(a)f(cen)m(tralized)f(lo)s(cation.)72 b(In)39 b(this)h(case,)45
b(ev)m(ery)c(request)g(and)f(up)s(date)0 4542 y(should)35
b(visit)g(the)i(cen)m(tralized)f(serv)m(er)h(and)f(hence)h(it)f(migh)m
(t)h(b)s(ecome)g(a)g(b)s(ottlenec)m(k.)60 b(Another)37
b(alternativ)m(e)0 4734 y(is)f(that)i(eac)m(h)h(no)s(de)e(main)m(tains)
f(information)g(ab)s(out)h(the)g(lo)s(cation)g(of)h(ev)m(ery)g(ob)5
b(ject)38 b(in)e(the)i(system.)62 b(This)0 4926 y(results)29
b(in)g(a)i(higher)e(main)m(tenance)i(o)m(v)m(erhead)g(and)f(ma)m(y)h
(su\013er)f(from)g(inconsistency)f(problems.)1927 5656
y(8)p eop
%%Page: 9 9
9 8 bop 0 99 a Fj(3.3)112 b(Some)37 b(Issues)i(on)e(Con\014guring)h
(RedHi)0 427 y Fp(Con\014guring)29 b(RedHi)g(is)h(not)h(a)g(trivial)e
(task.)42 b(Based)31 b(on)g(the)g(system)g(ob)5 b(jectiv)m(es,)31
b(a)g(system)g(designer)f(should)0 619 y(decide)36 b(on)h(the)h(size)f
(of)g(the)g(no)s(des)f(\(serv)m(ers)i(capacit)m(y)g Fk(M)10
b(axC)44 b Fp(and)36 b(bandwidth)e Fk(M)10 b(axB)5 b
Fp(\),)39 b(distribution)34 b(of)0 811 y(these)k(no)s(des,)g(the)f(n)m
(um)m(b)s(er)f(of)h(links)e(b)s(et)m(w)m(een)j(the)f(no)s(des,)h(the)f
(bandwidth)e Fk(M)10 b(axB)41 b Fp(of)d(the)f(links,)g(as)g(w)m(ell)0
1003 y(as)42 b(the)g(n)m(um)m(b)s(er)e(of)i(lev)m(els)f(of)h(the)g
(hierarc)m(h)m(y)-8 b(.)75 b(In)40 b(this)h(section,)k(w)m(e)d(attempt)
h(to)f(highligh)m(t)e(some)i(of)g(the)0 1195 y(issues)29
b(that)h(the)h(designer)e(should)f(consider)h(when)g(con\014guring)g
(RedHi.)40 b(W)-8 b(e)31 b(prop)s(ose)e(three)i(approac)m(hes)f(to)0
1387 y(con\014gure)i(RedHi.)46 b(The)32 b(\014rst)g(approac)m(h)h
(con\014gures)f(RedHi)f(based)h(on)h(the)f(n)m(um)m(b)s(er)f(of)i
(users.)46 b(The)32 b(second)0 1579 y(approac)m(h)g(uses)f(a)h
(geographical)g(con)m(v)m(en)m(tion)g(to)h(con\014gure)e(RedHi,)g(and)g
(the)h(third)d(is)i(a)h(h)m(ybrid)d(of)j(the)g(\014rst)0
1771 y(t)m(w)m(o)g(approac)m(hes.)141 2041 y(With)i(the)g(\014rst)f
(approac)m(h,)j(to)e(decide)g(the)g(serv)m(ers)g(size,)h(the)f
(designer)f(ma)m(y)i(use)e(guidelines)f(similar)f(to)0
2233 y(the)k(ones)g(used)g(b)m(y)g(the)g(curren)m(t)g(cable)g(TV)g
(\(CA)-8 b(TV\))36 b(tree)f(broadcast)h(infrastructure.)53
b(Since)34 b(the)h(n)m(um)m(b)s(er)0 2425 y(of)h(rejected)h(requests)f
(is)g(prop)s(ortional)e(to)j(the)f(n)m(um)m(b)s(er)f(of)h(users)g(serv)
m(ed)g(b)m(y)g(the)h(head-end,)g(w)m(e)g(can)f(limit)0
2617 y(the)d(n)m(um)m(b)s(er)e(of)i(users)e(of)i(a)g(head-end)f
(\(e.g..)48 b(less)32 b(than)g(1000)j(users)c(in)g(CA)-8
b(TV)33 b([NS94)q(]\))g(while)d(k)m(eeping)j(the)0 2809
y(size)38 b(of)f(all)g(head-ends)g(constan)m(t.)64 b(Although)37
b(a)h(go)s(o)s(d)f(load)h(indicator,)g(the)g(n)m(um)m(b)s(er)e(of)i
(users)f(should)f(not)0 3001 y(b)s(e)f(the)h(only)f(factor)i(that)f(a)g
(designer)f(considers)g(when)f(deciding)g(on)i(the)g(size)g(of)g(the)g
(head-ends.)56 b(This)34 b(is)0 3193 y(b)s(ecause,)i(a)e(compan)m(y)h
(requesting)f(three)g(training)f(videos)g(a)i(da)m(y)g(should)d(not)i
(b)s(e)g(treated)h(as)g(a)g(residen)m(tial)0 3385 y(user)c(that)g
(requests)h(t)m(w)m(o)g(mo)m(vies)f(a)h(w)m(eek.)44 b(In)31
b(addition,)f(an)h(ethnically)e(div)m(ersi\014ed)g(p)s(opulation)g(is)h
(lik)m(ely)g(to)0 3577 y(ha)m(v)m(e)k(a)f(larger)g(selection)g
(preference)g(than)f(a)i(p)s(opulation)c(of)j(the)h(same)f(ethnic)f
(bac)m(kground.)48 b(Other)33 b(so)s(cial)0 3769 y(and)d(economical)g
(asp)s(ects)h(impact)e(the)i(user)e(demand.)40 b(Therefore,)30
b(the)h(user)e(pro\014le)g(can)i(pla)m(y)e(a)i(role)f(in)f(the)0
3961 y(design)38 b(pro)s(cess.)66 b(Another)39 b(dra)m(wbac)m(k)g(of)g
(this)f(approac)m(h)h(is)f(the)h(fact)h(that)g(using)d(a)i(\014xed)g
(size)f(head-end)0 4153 y(ma)m(y)43 b(result)d(in)h(a)h(user)f(p)s
(opulation)f(that)j(is)e(scattered)i(o)m(v)m(er)g(a)f(large)g
(geographical)g(area)h(increasing)e(the)0 4345 y(comm)m(unication)30
b(cost.)141 4615 y(A)h(similar)c(argumen)m(t)k(can)f(b)s(e)g(made)g
(when)g(deciding)e(on)i(links)e(bandwidth.)38 b(The)30
b(designer)f(should)f(tak)m(e)0 4807 y(in)m(to)g(consideration)f(the)i
(n)m(um)m(b)s(er)d(of)j(users)e(as)i(w)m(ell)e(as)h(users)f(pro\014le.)
39 b(In)28 b(addition,)f(she)g(should)g(consider)g(the)0
4999 y(total)h(n)m(um)m(b)s(er)e(of)i(ob)5 b(jects)28
b(in)e(the)i(system.)40 b(The)27 b(more)g(ob)5 b(jects)28
b(the)g(system)g(stores)f(the)h(more)g(div)m(ersi\014ed)d(the)0
5191 y(requests)30 b(will)e(b)s(e,)i(and)g(th)m(us)g(the)g(harder)g(it)
g(is)f(to)i(cac)m(he)h(ob)5 b(jects)31 b(closer)f(to)i(users.)1927
5656 y(9)p eop
%%Page: 10 10
10 9 bop 141 99 a Fp(With)33 b(the)h(second)g(approac)m(h)f(a)h
(geographical)g(con)m(v)m(en)m(tion)h(is)d(used)h(when)g(deciding)e(on)
j(the)g(n)m(um)m(b)s(er)e(of)0 290 y(lev)m(els)k(of)g(the)h(system.)58
b(Since)36 b(the)g(ph)m(ysical)f(distance)h(has)g(a)h(signi\014can)m(t)
e(impact)h(on)g(the)h(o)m(v)m(erall)f(comm)m(u-)0 482
y(nication)d(cost)i(of)f(the)g(system,)h(it)e(w)m(ould)g(b)s(e)g(wise)g
(to)h(consider)f(it)g(during)f(the)i(system)g(design.)50
b(RedHi)33 b(can)0 674 y(b)s(e)d(divided)e(in)m(to)i(lev)m(els)g(with)f
(eac)m(h)j(no)s(de)d(in)g(a)i(lev)m(el)f(designated)g(to)i(serv)m(e)f
(a)f(sp)s(eci\014c)g(geographical)g(area.)42 b(A)0 866
y(head-end)25 b(at)i(the)f(lo)m(w)m(est)g(lev)m(el)f(of)h(the)g
(hierarc)m(h)m(y)f(can)h(b)s(e)f(designated)h(to)g(serv)m(e)h(a)f
(limited)d(geographical)j(area.)0 1058 y(A)j(no)s(de)f(at)h(the)g
(second)f(lev)m(el)h(serv)m(es)g(an)f(en)m(tire)h(cit)m(y)g(\(a)g
(group)f(of)h(areas\).)41 b(The)28 b(third)f(lev)m(el)h(of)h(the)f
(hierarc)m(h)m(y)0 1250 y(is)d(designated)h(as)g(the)g(coun)m(t)m(y)h
(lev)m(el)e(and)h(so)g(on.)39 b(The)25 b(problem)g(with)f(this)h
(approac)m(h)i(is)d(that)j(cities,)g(coun)m(ties,)0 1442
y(and)e(states)j(v)-5 b(ary)26 b(in)e(their)h(sizes)h(and)g(p)s
(opulation)d(densit)m(y)-8 b(.)39 b(New)26 b(Y)-8 b(ork,)28
b(for)e(example,)h(spans)e(a)h(m)m(uc)m(h)g(smaller)0
1634 y(area)38 b(than)f(Los)g(Angeles,)i(but)e(is)f(lik)m(ely)g(to)i
(ha)m(v)m(e)g(more)f(customers)h(than)e(W)-8 b(ashington)38
b(D.C..)61 b(De\014ning)37 b(a)0 1826 y(con)m(v)m(en)m(tion)f(lik)m(e)f
(area,)i(cit)m(y)-8 b(,)38 b(and)c(coun)m(t)m(y)i(considers)e(the)i(ph)
m(ysical)d(distance)i({)h(to)g(some)f(exten)m(t)i({)e(but)g(the)0
2018 y(\014nal)27 b(design)h(ma)m(y)h(su\013er)f(due)g(to)h(treating)g
(areas,)h(cities,)f(and)f(coun)m(ties)g(that)h(ha)m(v)m(e)h(di\013eren)
m(t)e(c)m(haracteristics)0 2210 y(in)h(the)i(same)f(manner.)141
2480 y(Finally)-8 b(,)26 b(a)h(h)m(ybrid)e(approac)m(h)h(emplo)m(ys)h
(b)s(oth)f(ph)m(ysical)f(distance)h(and)g(users)g(pro\014le.)38
b(Users)27 b(pro\014le)e(along)0 2672 y(with)32 b(the)i(p)s(opulation)e
(of)i(a)g(certain)g(area)g(can)g(b)s(e)g(used)f(to)h(estimate)h(the)f
(area's)g(demand.)50 b(The)34 b(estimated)0 2864 y(demand)f(can)h(then)
g(b)s(e)f(used)g(to)i(decide)e(on)h(the)g(size)g(of)g(the)g(head-end)f
(serving)g(this)g(area.)52 b(Serv)m(ers)34 b(on)g(the)0
3056 y(second)25 b(lev)m(el)g(of)g(the)h(hierarc)m(h)m(y)e(are)i(p)s
(ositioned)d(according)i(to)h(their)e(ph)m(ysical)g(pro)m(ximit)m(y)g
(to)i(their)e(supp)s(orted)0 3248 y(head-ends.)38 b(As)22
b(w)m(e)i(go)g(up)d(on)i(the)g(hierarc)m(h)m(y)-8 b(,)25
b(w)m(e)e(try)g(to)h(minimize)c(comm)m(unication)i(cost)i(b)m(y)f
(grouping)f(no)s(des)0 3440 y(that)28 b(are)g(ph)m(ysically)d(close)j
(to)h(eac)m(h)f(other)g(in)e(a)i("sub-hierarc)m(h)m(y")g(and)f(allo)m
(w)g(only)f(the)i(no)s(des)f(in)f(the)i(highest)0 3632
y(lev)m(el)d(of)h(this)e(sub-hierarc)m(h)m(y)g(to)i(b)s(e)f(connected)h
(to)h(the)e(rest)h(of)f(the)h(system.)39 b(This)24 b(approac)m(h)h
(considers)g(serv)m(er)0 3824 y(cost)f(b)m(y)f(selecting)g(head-end)f
(size)h(according)g(to)g(the)h(user's)e(p)s(opulation)f(and)h
(pro\014le.)37 b(Moreo)m(v)m(er,)27 b(it)22 b(considers)0
4016 y(comm)m(unication)30 b(cost)h(b)m(y)f(grouping)f(no)s(des,)h
(according)g(to)h(their)f(ph)m(ysical)f(pro)m(ximit)m(y)-8
b(,)30 b(in)m(to)g(sub-hierarc)m(hies)0 4208 y(and)k(minimizing)d(the)k
(n)m(um)m(b)s(er)e(of)i(links)d(from)i(these)i(sub-hierarc)m(hies)c(to)
j(the)g(rest)g(of)g(the)g(system.)53 b(In)34 b(this)0
4400 y(pap)s(er,)28 b(w)m(e)g(do)g(not)g(in)m(v)m(estigate)h(this)e
(issue)g(an)m(y)h(further)f(and)g(w)m(e)i(assume)f(that)g(the)g
(con\014guration)g(of)g(DSA)g(is)0 4592 y(giv)m(en.)1905
5656 y(10)p eop
%%Page: 11 11
11 10 bop 0 99 a Fo(4)135 b(Ob)7 b(jects)45 b(Managemen)l(t)0
459 y Fp(The)33 b(system)i(striv)m(es)e(to)i(minimize)c(comm)m
(unication)j(cost,)i(b)m(y)e(cac)m(hing)g(ob)5 b(jects)35
b(closer)f(to)g(users.)51 b(As)34 b(men-)0 651 y(tioned)23
b(earlier,)i(head-end)e(serv)m(ers)h(can)h(accommo)s(date)g(only)f(a)g
(small)e(subset)i(of)g(the)g(ric)m(h)f(selection)h(of)g(ob)5
b(jects)0 843 y(in)34 b(the)h(system.)54 b(Therefore,)36
b(a)f(replacemen)m(t)g(p)s(olicy)f(is)f(needed)i(when)f(the)h(storage)h
(space)g(of)f(head-ends)f(is)0 1035 y(exhausted.)48 b(The)32
b(problem)f(is)h(v)m(ery)h(similar)d(to)k(the)f(memory)f(hierarc)m(h)m
(y)h(problem.)46 b(The)32 b(p)s(opularit)m(y)f(of)i(the)0
1227 y(ob)5 b(ject)26 b(is)d(usually)g(the)i(main)f(factor)h(to)h
(consider)e(when)f(it)i(is)e(cac)m(hed.)40 b(A)25 b(semi-dynamic)e
(approac)m(h)j(for)e(ob)5 b(ject)0 1418 y(replacemen)m(t)28
b(w)m(as)h(prop)s(osed)e(in)f([BP96)r(].)40 b(They)28
b(assumed)f(that)h(it)g(is)f(p)s(ossible)f(to)j(an)m(ticipate)f(the)g
(p)s(opularit)m(y)0 1610 y(of)35 b(some)h(ob)5 b(jects)35
b(b)s(efore)g(their)f(insertion)f(to)j(the)f(system.)55
b(This)33 b(an)m(ticipated)i(p)s(opularit)m(y)e(is)h(then)h(used)f(to)0
1802 y(decide)e(the)g(residence)g(of)h(the)f(ob)5 b(ject.)48
b(The)32 b(actual)h(p)s(opularit)m(y)d(is)i(then)g(c)m(hec)m(k)m(ed)i
(p)s(erio)s(dically)29 b(\(e.g.)48 b(daily\))0 1994 y(and)30
b(whenev)m(er)g(the)h(p)s(opularit)m(y)d(drops,)h(the)i(ob)5
b(ject)31 b(is)e(replaced)h(b)m(y)h(a)f(more)h(p)s(opular)d(one.)141
2265 y(W)-8 b(e,)38 b(ho)m(w)m(ev)m(er,)h(prop)s(ose)34
b(a)i(dynamic)e(approac)m(h)i(that)g(is)e(similar)f(to)j(the)g(least)g
(frequen)m(tly)e(used)h(\(LFU\))0 2457 y(replacemen)m(t)42
b(p)s(olicy)e(used)g(in)g(memory)h(hierarc)m(h)m(y)-8
b(.)74 b(In)41 b(this)f(p)s(olicy)-8 b(,)43 b(ob)5 b(jects)42
b(are)g(not)g(assumed)f(to)h(ha)m(v)m(e)0 2648 y(a)g(predicted)f(p)s
(opularit)m(y)-8 b(,)43 b(and)f(are)g(alw)m(a)m(ys)g(inserted)f(in)m
(to)h(the)g(ro)s(ot)g(no)s(des.)75 b(Instead)41 b(of)h(examining)f(the)
0 2840 y(p)s(opularit)m(y)32 b(p)s(erio)s(dically)-8
b(,)33 b(w)m(e)i(c)m(hec)m(k)h(it)e(ev)m(ery)h(time)f(an)g(absen)m(t)h
(ob)5 b(ject)36 b(is)d(requested)i(b)m(y)f(the)h(c)m(hildren)d(of)j(a)0
3032 y(no)s(de.)j(If)24 b(1\))i(the)f(p)s(opularit)m(y)d(of)j(the)g
(absen)m(t)g(ob)5 b(ject)26 b(exceeds)g(the)f(p)s(opularit)m(y)d(of)j
(an)m(y)g(of)g(the)g(ob)5 b(jects)26 b(a)m(v)-5 b(ailable)0
3224 y(at)32 b(that)g(no)s(de,)g(2\))g(the)f(remo)m(v)-5
b(al)32 b(of)g(the)g(less)e(p)s(opular)g(ob)5 b(ject\(s\))32
b(frees)g(enough)f(space)h(to)g(accommo)s(date)i(the)0
3416 y(new)22 b(ob)5 b(ject,)24 b(and)e(3\))h(the)f(serv)m(er)g(has)g
(enough)g(bandwidth)d(\()p Fk(B)5 b Fp(\))22 b(to)h(store)g(the)f(new)f
(ob)5 b(ject,)25 b(then)d(a)g(replacemen)m(t)0 3608 y(tak)m(es)31
b(place.)40 b(Otherwise,)29 b(the)h(ob)5 b(ject)30 b(is)f(deliv)m(ered)
f(to)i(the)g(requester)g(without)e(cac)m(hing)i(\(i.e.,)h(a)f(cop)m(y)g
(of)g(the)0 3800 y(ob)5 b(ject)31 b(is)f(not)g(materialized)g(at)h(the)
f(serv)m(er\).)141 4070 y(T)-8 b(o)23 b(illustrate,)f(assume)f(that)i
(ob)5 b(ject)23 b Fk(O)s(i)f Fp(is)f(requested)g(b)m(y)h(a)h(user)e
(connected)i(to)f(no)s(de)f(F)i(\(Fig.)f(1\).)39 b(Supp)s(ose)0
4262 y(w)m(e)34 b(someho)m(w)h(lo)s(cated)f Fk(O)s(i)g
Fp(in)f(no)s(de)g(A)h(and)f(selected)i(the)f(highligh)m(ted)e(path)h
(to)i(displa)m(y)d(the)i(ob)5 b(ject)35 b(to)g(the)0
4454 y(user)25 b(\(see)i(Sec.)f(5\).)40 b(No)s(de)26
b(F,)g(as)g(w)m(ell)f(as)h(ev)m(ery)g(other)g(no)s(des)f(in)f(the)i
(path)g(from)f(A)h(to)g(F,)h(should)c(compare)k(the)0
4646 y(p)s(opularit)m(y)f(of)i(ob)5 b(ject)28 b Fk(O)s(i)g
Fp(with)f(the)h(p)s(opularit)m(y)e(of)i(all)e(the)i(ob)5
b(jects)29 b(residen)m(t)e(at)i(that)f(no)s(de.)40 b(A)27
b(replacemen)m(t)0 4838 y(o)s(ccurs)33 b(if)g(three)h(conditions)e(are)
i(met;)i(1\))f(the)f(p)s(opularit)m(y)d(of)j Fk(O)s(i)g
Fp(exceeds)h(the)f(p)s(opularit)m(y)d(of)j(one)g(or)g(more)0
5030 y(ob)5 b(ject\(s\))40 b(a)m(v)-5 b(ailable)39 b(at)g(that)h(no)s
(de)e(\()p Fk(F)13 b(r)s(eq)s Fp(\(the)40 b(old)e(ob)5
b(jects\))40 b Fk(<)f(F)13 b(r)s(eq)s Fp(\(the)39 b(new)f(ob)5
b(ject\))41 b(if)c(LFU\))j(2\))g(the)0 5222 y(remo)m(v)-5
b(al)35 b(of)f(the)h(less)f(p)s(opular)e(ob)5 b(ject\(s\))36
b(frees)f(enough)f(space)h(to)g(accommo)s(date)i(the)e(new)f(ob)5
b(ject,)36 b(and)e(3\))1905 5656 y(11)p eop
%%Page: 12 12
12 11 bop 0 99 a Fp(the)26 b(serv)m(er)g(has)f(enough)g(bandwidth)e(\()
p Fk(B)5 b Fp(\))26 b(to)g(store)g(the)g(new)f(ob)5 b(ject.)40
b(If)25 b(an)m(y)h(of)f(these)h(conditions)f(is)f(violated,)0
290 y(the)42 b(ob)5 b(ject)43 b(is)f(forw)m(arded)f(without)g(cac)m
(hing.)77 b(The)41 b(use)h(of)g(a)h(dynamic)e(replacemen)m(t)h(p)s
(olicy)f(mak)m(es)i(the)0 482 y(system)29 b(more)g(adaptiv)m(e)g(to)h
(sudden)d(c)m(hanges)i(in)f(ob)5 b(jects)30 b(p)s(opularit)m(y)c(whic)m
(h)i(is)g(t)m(ypically)f(the)i(case)h(in)e(mo)m(vie)0
674 y(industry)141 945 y(It)40 b(is)f(imp)s(ortan)m(t)f(to)j(p)s(oin)m
(t)d(out)i(that)h(when)d(a)i(no)s(de)f(decides)g(to)i(cac)m(he)g
Fk(O)s(i)p Fp(,)h(it)d(will)e(follo)m(w)i(the)h Fk(P)13
b(D)s(F)0 1137 y Fp(data\015o)m(w)28 b(paradigm)f(in)m(tro)s(duced)f
(in)53 b([GDS95)r(].)39 b(That)28 b(is)e(the)i(cac)m(hing)g(and)f(the)g
(deliv)m(ery)g(of)g Fk(O)s(i)h Fp(to)g(the)g(lo)m(w)m(er)0
1328 y(no)s(de)i(are)g(p)s(erformed)f(in)g(parallel.)141
1599 y(New)i(ob)5 b(jects)32 b(can)g(b)s(e)e(inserted)g(in)m(to)h(the)h
(system)f(b)m(y)g(storing)g(them)g(on)g(the)g(ro)s(ot)h(no)s(des.)42
b(As)31 b(the)g(p)s(opu-)0 1791 y(larit)m(y)d(of)h(these)g(ob)5
b(jects)30 b(increases,)f(the)g(system)g(replacemen)m(t)h(p)s(olicy)d
(will)f(cac)m(he)k(them)f(closer)g(to)g(the)h(users.)0
1983 y(In)36 b(Sec.)h(7,)i(the)e(p)s(erformance)f(of)h(LFU)g(is)f
(compared)g(with)g(that)h(of)g(LR)m(U.)g(The)g(main)e(di\013erence)h(b)
s(et)m(w)m(een)0 2175 y(these)c(t)m(w)m(o)g(replacemen)m(t)g(p)s
(olicies)d(is)i(the)g(w)m(a)m(y)h(ob)5 b(ject)33 b(p)s(opularit)m(y)c
(is)h(calculated.)43 b(LFU)32 b(uses)f(the)g(frequency)0
2366 y(of)e(access)h(as)e(its)g(p)s(opularit)m(y)f(indicator)g(where)h
(LR)m(U)h(uses)f(the)g(latest)i(time)e(that)h(the)g(ob)5
b(ject)29 b(w)m(as)g(referenced)0 2558 y(as)i(its)e(p)s(opularit)m(y)g
(indicator.)0 3028 y Fo(5)135 b(Load)45 b(Balancing)0
3388 y Fp(The)32 b(existence)g(of)g(redundan)m(t)f(links)f(in)h(RedHi)g
(in)m(tro)s(duces)g(a)h(new)g(problem)e(that)j(w)m(as)f(not)h(there)f
(with)f(the)0 3580 y(pure)37 b(hierarc)m(h)m(y)g(\(PHi\))g(arc)m
(hitecture.)63 b(With)37 b(PHi,)i(when)e(a)h(no)s(de)f(receiv)m(es)h(a)
g(request)f(for)h(an)f(ob)5 b(ject)39 b(not)0 3772 y(residing)25
b(at)k(that)f(no)s(de,)f(it)g(propagates)i(the)f(request)f(to)i(its)e
(paren)m(t.)40 b(Since)26 b(eac)m(h)j(no)s(de)e(has)g(only)g(one)g
(paren)m(t,)0 3964 y(this)41 b(request)h(con)m(tin)m(ues)g(to)h(tra)m
(v)m(erse)g(up)e(the)i(tree)f(un)m(til)e(it)i(reac)m(hes)h(a)f(no)s(de)
g(that)g(con)m(tains)h(the)f(ob)5 b(ject,)0 4156 y(p)s(ossibly)32
b(the)i(ro)s(ot.)54 b(With)34 b(RedHi,)h(eac)m(h)h(no)s(de)d(has)i(t)m
(w)m(o)g(or)g(more)g(paren)m(ts)f(and)g(hence)h(it)f(ma)m(y)h(ha)m(v)m
(e)h(more)0 4348 y(than)j(one)g(source)h(to)f(retriev)m(e)h(the)f(ob)5
b(ject.)68 b(There)39 b(migh)m(t)g(ev)m(en)g(b)s(e)g(alternativ)m(e)g
(paths)g(to)h(eac)m(h)g(of)f(these)0 4540 y(sources.)i(Therefore,)30
b(a)h(p)s(olicy)e(is)g(required)g(for)h(c)m(ho)s(osing)g(the)g
Fk(best)h Fp(source-path)f(com)m(bination.)141 4810 y(One)35
b(can)g(alw)m(a)m(ys)g(use)f(a)i(priorit)m(y)d(sc)m(heme)i(that)h
(forces)f(eac)m(h)h(no)s(de)e(to)i(select)f(one)g(of)g(its)g(paren)m(t)
g(as)g(the)0 5002 y(primary)24 b(paren)m(t.)39 b(In)25
b(this)f(case,)k(if)c(the)i(primary)d(paren)m(t)j(is)e(saturated)i(or)g
(close)g(to)g(saturation,)g(other)g(paren)m(ts)0 5194
y(can)35 b(b)s(e)f(utilized.)51 b(Although)34 b(simple,)f(this)h(sc)m
(heme)h(do)s(es)f(not)h(fully)d(explore)j(the)f(system's)h(load)f
(balancing)0 5386 y(p)s(oten)m(tial.)40 b(This)26 b(is)i(b)s(ecause)g
(it)g(ma)m(y)h(lead)f(to)h(the)g(o)m(v)m(erloading)g(of)f(the)h
(primary)d(paren)m(t)j(while)e(lea)m(ving)h(other)1905
5656 y(12)p eop
%%Page: 13 13
13 12 bop 0 99 a Fp(paren)m(ts)32 b(under-utilized.)40
b(W)-8 b(e)33 b(prop)s(ose)d(a)i(n)m(um)m(b)s(er)e(of)i(heuristics)d
(to)k(c)m(ho)s(ose)f(the)g(least)f(loaded)g Fk(path)p
Fp(.)44 b(These)0 290 y(heuristics)28 b(consider)i(the)g(load)g(of)h
(all)e(the)h(participating)f(links)f(and)i(serv)m(ers.)0
694 y Fj(5.1)112 b(Cost)37 b(F)-9 b(unctions)0 1022 y
Fp(T)h(o)36 b(balance)f(the)g(load)g(one)h(can)f(c)m(ho)s(ose)h(the)g
(least)f(loaded)g(path)g(among)h(all)e(the)h(candidate)g(paths.)55
b(There)0 1214 y(are)32 b(man)m(y)f(w)m(a)m(ys)h(to)g(quan)m(tify)f
(the)g(load)g(of)g(a)h(path.)43 b(One)31 b(metho)s(d)g(is)f(to)i(tak)m
(e)h(the)e(summation)g(of)g(the)g(loads)0 1406 y(\(i.e.,)j(reserv)m(ed)
e(bandwidth\))e(of)j(all)e(the)i(participating)e(no)s(des)g(and)h
(links)e(in)h(the)i(path.)47 b(In)31 b(this)h(case)h(longer)0
1598 y(paths,)j(with)e(more)h(links,)f(are)h(more)g(lik)m(ely)f(to)i
(ha)m(v)m(e)g(higher)d(loads.)54 b(T)-8 b(rivially)33
b(with)g(this)h(approac)m(h)h(longer)0 1790 y(paths)30
b(are)h(p)s(enalized.)141 2060 y(An)e(alternativ)m(e)g(metho)s(d)g(w)m
(ould)f(b)s(e)g(to)i(tak)m(e)h(the)e(a)m(v)m(erage)j(of)d(the)g(loads)g
(of)g(all)f(participating)f(no)s(des)i(and)0 2252 y(links)k(in)i(the)h
(path.)56 b(This)34 b(metho)s(d)h(do)s(es)g(not)h(pro)m(vide)f(shorter)
g(paths)g(with)f(an)m(y)i(adv)-5 b(an)m(tage.)59 b(Ho)m(w)m(ev)m(er,)39
b(if)0 2444 y(a)h(path)f(has)g(a)g(n)m(um)m(b)s(er)f(of)i(ligh)m(tly)e
(loaded)g(links)f(and)i(no)s(des)g(but)f(a)i(single)e(nearly)g
(saturated)i(no)s(de,)h(this)0 2636 y(metho)s(d)g(w)m(ould)f(c)m(ho)s
(ose)i(this)e(path)h(o)m(v)m(er)i(an)e(a)m(v)m(eragely)i(loaded)e
(path.)74 b(This)39 b(ma)m(y)j(saturate)g(the)g(hea)m(vily)0
2828 y(loaded)32 b(no)s(de)f(and)h(prev)m(en)m(t)h(it)f(from)f(serving)
h(other)g(requests)g(while)e(the)j(no)s(des)e(in)g(the)i(other)f(path)g
(are)h(less)0 3020 y(loaded.)48 b(Therefore,)33 b(w)m(e)g(ha)m(v)m(e)h
(decided)e(to)i(c)m(ho)s(ose)f(the)g(cost)h(of)f(the)g(most)g(loaded)g
(comp)s(onen)m(t)g(in)e(the)i(path)0 3212 y(as)f(the)f(cost)h(of)g(the)
f(path.)43 b(That)32 b(is,)e(the)i(no)s(de)e(or)i(the)f(link)e(whic)m
(h)h(is)h(most)g(loaded)g(determines)f(the)i(load)f(of)0
3404 y(its)f(corresp)s(onding)e(path.)141 3674 y(W)-8
b(e)31 b(prop)s(ose)e(three)h(cost)h(functions)d(corresp)s(onding)g(to)
i(our)g(three)f(heuristics)f(to)j(measure)e(the)h(load)g(of)g(a)0
3866 y(no)s(de)j(or)h(a)g(link)e(in)g(order)h(to)i(select)f(the)g
(least)g(loaded)f(path.)51 b(The)33 b(\014rst)g(cost)i(function)d
Fk(F)13 b(r)s(eeB)5 b(W)46 b Fp(uses)34 b(the)0 4058
y(a)m(v)-5 b(ailable)32 b(bandwidth)e(\()p Fk(B)5 b Fp(\))33
b(of)h(serv)m(ers)f(or)g(links)d(as)j(the)h(load)e(indicator)2578
4025 y Fm(1)2616 4058 y Fp(.)49 b(The)32 b(disadv)-5
b(an)m(tage)34 b(of)f Fk(F)13 b(r)s(eeB)5 b(W)0 4250
y Fp(is)36 b(that)i(it)f(tends)g(to)h(select)g(no)s(des)f(with)f
(higher)g(bandwidth)e(in)i(the)i(higher)e(lev)m(els)h(of)g(the)h
(hierarc)m(h)m(y)f(o)m(v)m(er)0 4442 y(no)s(des)d(at)h(the)g(lo)m(w)m
(er)g(lev)m(els)g(with)e(less)h(bandwidth.)51 b(Therefore,)36
b(a)f(large)g(no)s(de)f(op)s(erating)h(at)g(\014ft)m(y)g(p)s(ercen)m(t)
0 4634 y(of)41 b(its)f(maxim)m(um)g(bandwidth)e(is)i(going)g(to)i(b)s
(e)e(selected)i(o)m(v)m(er)g(a)f(smaller)e(no)s(de,)k(lo)m(w)m(er)e(in)
f(the)h(hierarc)m(h)m(y)-8 b(,)0 4826 y(with)31 b(the)i(same)h(load)e
(p)s(ercen)m(tage.)49 b(This)31 b(can)i(unfairly)d(saturate)k(higher)d
(no)s(des)h(and)h(migh)m(t)f(yield)f(a)i(higher)0 5018
y(comm)m(unication)d(cost)h(since)f(most)h(of)f(the)h(ob)5
b(jects)31 b(will)d(b)s(e)h(retriev)m(ed)i(from)f(higher)f(lev)m(els)g
(of)i(the)g(hierarc)m(h)m(y)-8 b(.)p 0 5180 1560 4 v
104 5234 a Ff(1)138 5266 y Fq(In)25 b(this)h(case,)h(the)e(cost)h
(function)g(is)g Fe(\000)p Fd(B)t Fq(.)1905 5656 y Fp(13)p
eop
%%Page: 14 14
14 13 bop 141 99 a Fp(T)-8 b(o)40 b(o)m(v)m(ercome)h(this)d(dra)m(wbac)
m(k,)k(a)d(second)g(cost)h(function)e Fk(R)q(atioB)5
b(W)51 b Fp(is)38 b(prop)s(osed.)65 b(Instead)39 b(of)g(using)0
290 y(a)m(v)-5 b(ailable)27 b(bandwidth)e(as)j(load)f(indicator,)g
Fk(R)q(atioB)5 b(W)40 b Fp(uses)27 b(the)h(a)m(v)-5 b(ailable)27
b(bandwidth)e(ratio)j(\()g Fk(R)q(atioB)5 b(W)39 b Fp(=)0
482 y Fk(B)5 b(=)-5 b(M)10 b(axB)5 b Fp(\))30 b(to)h(measure)g(the)f
(load.)141 753 y(The)d(third)f(cost)i(function)e Fk(U)10
b(ser)s(B)5 b(W)39 b Fp(emplo)m(ys)27 b(an)h(alternativ)m(e)g(metho)s
(d)e(to)j(eliminate)d(the)h(disadv)-5 b(an)m(tage)0 945
y(of)35 b Fk(F)13 b(r)s(eeB)5 b(W)13 b Fp(.)53 b Fk(U)10
b(ser)s(B)5 b(W)46 b Fp(divides)32 b(the)j(a)m(v)-5 b(ailable)34
b(bandwidth)e(of)i(a)h(no)s(de)f(b)m(y)h(the)g(n)m(um)m(b)s(er)e(of)i
(users)f(serv)m(ed)0 1137 y(collectiv)m(ely)26 b(b)m(y)g(the)g(no)s(de)
f(and)h(its)f(c)m(hildren)f(\()p Fk(U)10 b(ser)s(B)5
b(W)38 b Fp(=)26 b Fk(B)5 b Fp(/total)26 b(n)m(um)m(b)s(er)f(of)h
(users)g(serv)m(ed)g(b)m(y)g(the)g(no)s(de\).)0 1328
y(Similarly)i(the)k Fk(U)10 b(ser)s(B)5 b(W)44 b Fp(of)32
b(a)g(link)e Fk(e)e Fp(=)f(\()p Fk(u;)15 b(w)r Fp(\))34
b(where)d Fk(u)d Fl(2)f(V)2233 1342 y Fh(j)2302 1328
y Fp(and)k Fk(w)f Fl(2)e(V)2720 1342 y Fh(j)t Fg(\000)p
Fm(1)2878 1328 y Fp(is)j(de\014ned)f(as)i(the)h(a)m(v)-5
b(ailable)0 1520 y(bandwidth)28 b(of)j Fk(e)f Fp(divided)e(b)m(y)j(the)
g(n)m(um)m(b)s(er)e(of)i(user)f(serv)m(ed)g(collectiv)m(ely)h(b)m(y)f
Fk(u)p Fp(.)42 b(These)30 b(three)h(cost)g(functions)0
1712 y(are)g(compared)f(in)f(Sec.)i(7,)g(and)f(the)g(result)g(sho)m(w)g
(the)h(sup)s(eriorit)m(y)d(of)i Fk(R)q(atioB)5 b(W)13
b Fp(.)0 2115 y Fj(5.2)112 b(Ob)6 b(ject)38 b(Lo)s(cating)f(Metho)s(ds)
0 2444 y Fp(As)44 b(men)m(tioned)f(earlier,)k(the)d(goal)h(of)f(ob)5
b(ject)45 b(lo)s(cating)e(metho)s(ds)g(is)g(to)i(\014nd)d(a)j(no)s(de)e
(that)i(con)m(tains)f(the)0 2636 y(requested)34 b(ob)5
b(ject)35 b(and)f(is)f(capable)h(of)h(deliv)m(ering)d(it.)52
b(W)-8 b(e)36 b(in)m(v)m(estigate)f(t)m(w)m(o)h(metho)s(ds)d(to)i(lo)s
(cate)g(ob)5 b(jects)35 b(in)0 2828 y(RedHi:)57 b Fk(Local)42
b Fp(and)c Fk(Gl)r(obal)r Fp(.)67 b(With)38 b(Lo)s(cal,)k(when)c(a)h
(no)s(de)g Fk(S)5 b(i)39 b Fp(receiv)m(es)h(a)g(request)f(for)g(an)g
(ob)5 b(ject)40 b Fk(O)s(i)p Fp(,)h(it)0 3020 y(\014rst)29
b(examines)g(if)g Fk(O)s(i)h Fp(is)f(a)m(v)-5 b(ailable)29
b(lo)s(cally)f(and)i(if)e(it)i(has)f(the)h(required)e(serv)m(er)i
(bandwidth)d(to)k(deliv)m(er)e Fk(O)s(i)p Fp(;)h(if)0
3212 y(b)s(oth)g(are)i(true,)f(then)f(the)i(no)s(de)e(resp)s(onds)f(to)
j(the)f(requester)g(declaring)f(itself)g(as)h(a)g(p)s(ossible)e(source)
i(for)g Fk(O)s(i)p Fp(.)0 3404 y(Otherwise,)e(the)i(request)f(is)g
(forw)m(arded)f(to)j Fk(S)5 b(i)p Fp('s)30 b(paren)m(ts.)141
3674 y(Instead,)c(with)d(Global,)i(a)g(no)s(de)f Fk(S)5
b(i)25 b Fp(forw)m(ards)e(the)i(request)g(to)g(its)f(paren)m(ts)g(ev)m
(en)h(if)f Fk(O)s(i)g Fp(is)g(a)m(v)-5 b(ailable)24 b(lo)s(cally)-8
b(.)0 3866 y(By)31 b(doing)f(so,)h(Global)f(hop)s(es)g(to)i(\014nd)d(a)
i(no)s(de,)f(higher)g(in)f(the)i(hierarc)m(h)m(y)-8 b(,)31
b(whic)m(h)f(can)h(deliv)m(er)e Fk(O)s(i)i Fp(at)h(a)f(lo)m(w)m(er)0
4058 y(cost.)141 4328 y(By)i(stopping)e(the)h(searc)m(h)h(after)g(lo)s
(cating)e(the)i(\014rst)e(cop)m(y)i(of)f(the)h(ob)5 b(ject)33
b(in)e(a)h(path,)h(Lo)s(cal)f(attempts)h(to)0 4520 y(utilize)e(ob)5
b(jects)33 b(that)g(are)g(closer)g(to)g(user.)47 b(Retrieving)31
b(closer)i(ob)5 b(jects)33 b(can)g(result)e(in)h(signi\014can)m(t)f
(reduction)0 4712 y(in)j(comm)m(unication)g(cost.)57
b(On)34 b(the)h(other)h(hand,)f(if)f(w)m(e)i(k)m(eep)g(on)f(selecting)g
(ob)5 b(jects)35 b(in)f(the)i(lo)m(w)m(er)f(lev)m(els)g(of)0
4904 y(the)i(hierarc)m(h)m(y)-8 b(,)39 b(w)m(e)e(run)e(the)i(risk)e(of)
i(o)m(v)m(erloading)g(these)g(no)s(des)f(while)f(lea)m(ving)i(no)s(des)
e(in)h(the)h(higher)e(lev)m(el)0 5096 y(under-utilized.)44
b(Global)31 b(attempts)j(to)f(balance)f(the)h(load)f(b)s(et)m(w)m(een)h
(no)s(des)f(at)h(the)g(higher)e(and)h(lo)m(w)m(er)g(lev)m(els)0
5288 y(of)f(the)f(hierarc)m(h)m(y)-8 b(.)1905 5656 y(14)p
eop
%%Page: 15 15
15 14 bop 141 99 a Fp(W)-8 b(e)34 b(ha)m(v)m(e)h(dev)m(elop)s(ed)d
(e\016cien)m(t)h(heuristics)e(to)j(calculate)f(the)g(costs)h(of)f(the)h
(paths,)f(compare)h(these)f(costs)0 290 y(and)h(select)i(the)f(least)h
(exp)s(ensiv)m(e)e(path.)55 b(The)34 b(main)g(structure)h(of)g(the)h
(heuristics)d(is)h(iden)m(tical)g(and)g(can)i(b)s(e)0
482 y(divided)31 b(in)m(to)k(t)m(w)m(o)g(phases:)48 b(up)m(w)m(ard)33
b(\(Fig.)i(2\))g(and)e(do)m(wn)m(w)m(ard)h(\(Fig.)h(3\))g(phases.)51
b(The)34 b(di\013erence)f(b)s(et)m(w)m(een)0 674 y(these)27
b(heuristics)e(is)h(due)g(to)h(their)f(use)h(of)g(di\013eren)m(t)f
(cost)i(functions)d(\(i.e)i(.,)p Fk(F)13 b(r)s(eeB)5
b(W)13 b Fp(,)27 b Fk(U)10 b(ser)s(B)5 b(W)13 b Fp(,)26
b Fk(R)q(atioB)5 b(W)13 b Fp(\).)364 960 y Fq(up)n(w)n(ard\()p
Fd(node)p Fq(,)25 b Fd(<cur)r(r)r(ent)p 1173 960 24 4
v 27 w(cost)p Fq(,)h Fd(obj)t(ect)p Fq(,)g Fd(path>)f
Fq(\))545 1052 y Fc(let)30 b Fd(path)p Fq(=)p Fe(h)p
Fd(v)953 1060 y Ff(0)987 1052 y Fd(;)13 b(::;)h(v)1135
1061 y Fb(k)1173 1052 y Fe(i)p Fq(,)26 b Fc(then)k Fe(9)25
b Fd(i)p Fq(,)h(suc)n(h)g(that)f Fd(node)p Fq(=)p Fd(path)p
Fq(.)p Fd(v)2363 1060 y Fb(i)545 1143 y Fc(let)30 b Fd(bV)17
b(al)q(ue)p Fq(=\()p Fd(node:B)29 b(>)d Fa(Movie)h(Bandwidth)g
Fq(and)e Fd(node)p Fq(.)p Fd(obj)t(ect:F)11 b(l)q(ag)s
Fq(\))545 1234 y Fc(if)31 b Fq(\()p Fd(bV)16 b(al)q(ue)p
Fq(\))727 1326 y Fc(set)30 b Fd(cur)r(r)r(ent)p 1133
1326 V 27 w(cost)p Fq(=max\()p Fd(cur)r(r)r(ent)p 1789
1326 V 26 w(cost)p Fq(,)c(cost-function\()p Fd(node)p
Fq(\)\))727 1417 y Fc(if)k Fq(\(using)c('Lo)r(cal')i(metho)r(d\))909
1508 y(send)d(message)i Fd(<cur)r(r)r(ent)p 1706 1508
V 27 w(cost)p Fq(,)p Fd(obj)t(ect)p Fq(,)p Fd(path)f(>)f
Fq(to)h(no)r(de)g Fd(path)p Fq(.)p Fd(v)2859 1516 y Fb(i)p
Fr(\000)p Ff(1)2989 1508 y Fq(\(i)p Fd(>)p Fq(0\),)1091
1600 y(or)g Fd(node)g Fq(\(i==0\))727 1691 y Fc(if)k
Fq(\(using)c('Global')i(metho)r(d\))909 1782 y Fc(store)i
Fd(cur)r(r)r(ent)p 1395 1782 V 27 w(cost)545 1873 y Fc(if)h
Fq(\(not)25 b Fd(bV)17 b(al)q(ue)p Fq(\))25 b(or)h Fc(if)k
Fq(\(using)c('Global')h(metho)r(d\))727 1965 y Fc(for)j
Fq(\(all)d(the)e Fd(l)q(ink)r(s)i Fq(that)e Fd(l)q(ink)r(:e:u)p
Fq(==)p Fd(node:v)s Fq(\))i(\()p Fc(let)j Fd(e)21 b Fq(=)g(\()p
Fd(u;)13 b(w)r Fq(\)\))909 2056 y Fc(if)30 b Fq(\()p
Fd(l)q(ink)r(:B)h(>)25 b Fa(Movie)j(Bandwidth)p Fq(\))1091
2147 y Fc(set)h Fd(cur)r(r)r(ent)p 1496 2147 V 28 w(cost)p
Fq(=max\()p Fd(cur)r(r)r(ent)p 2153 2147 V 25 w(cost)p
Fq(,cost-function\()p Fd(l)q(ink)r Fq(\)\))1091 2239
y Fc(set)g Fd(path)p Fq(.)p Fd(v)1440 2247 y Fb(i)p Ff(+1)1543
2239 y Fq(=)p Fd(l)q(ink)r(:e:w)1091 2330 y Fq(send)c(message)i
Fd(<cur)r(r)r(ent)p 1888 2330 V 27 w(cost)p Fq(,)p Fd(obj)t(ect)p
Fq(,)p Fd(path>)e Fq(to)h Fd(l)q(ink)r(:e:w)1353 2717
y Fp(Figure)j(2:)42 b(The)29 b(up)m(w)m(ard)h(pro)s(cess)364
3019 y Fq(do)n(wn)n(w)n(ard\()p Fd(node)p Fq(,)c Fd(<cur)r(r)r(ent)p
1265 3019 V 27 w(cost)p Fq(,)g Fd(path)f(>)p Fq(\))545
3111 y Fc(let)30 b Fd(path)p Fq(=)p Fe(h)p Fd(v)953 3119
y Ff(0)987 3111 y Fd(;)13 b(::;)h(v)1135 3120 y Fb(k)1173
3111 y Fe(i)p Fq(,)26 b Fc(then)k Fe(9)25 b Fd(i)p Fq(,)h(suc)n(h)g
(that)f Fd(node)p Fq(=)p Fd(path)p Fq(.)p Fd(v)2363 3119
y Fb(i)545 3202 y Fc(if)31 b Fq(\(there's)25 b('stored)i
Fd(cur)r(r)r(ent)p 1423 3202 V 27 w(cost)p Fq('\))727
3293 y Fc(set)j Fd(cur)r(r)r(ent)p 1133 3293 V 27 w(cost)p
Fq(=min\()p Fd(cur)r(r)r(ent)p 1774 3293 V 26 w(cost)p
Fq(,'stored)d Fd(cur)r(r)r(ent)p 2469 3293 V 27 w(cost)p
Fq('\))545 3384 y Fc(if)k Fq(\(all)26 b(the)f Fd(node)p
Fq('s)i Fd(par)r(ents)d Fq(that)h(should)h(send)f(a)h(message)g(bac)n
(k)g(sen)n(t)f(a)h(message)g(bac)n(k\))727 3476 y(send)g(message)g
Fd(<cur)r(r)r(ent)p 1524 3476 V 27 w(cost)p Fq(,)p Fd(path)f(>)g
Fq(to)h(no)r(de)g Fd(path)p Fq(.)p Fd(v)2453 3484 y Fb(i)p
Fr(\000)p Ff(1)2583 3476 y Fq(\(i)p Fd(>)p Fq(0\),)g(or)g
Fd(node)g Fq(\(i==0\))545 3567 y Fc(else)727 3658 y(store)k
Fd(cur)r(r)r(ent)p 1213 3658 V 28 w(cost)1298 4045 y
Fp(Figure)g(3:)41 b(The)30 b(do)m(wn)m(w)m(ard)g(pro)s(cess)141
4332 y(The)38 b(t)m(w)m(o)i(phases)e(of)g(Lo)s(cal)g(and)g(Global)g
(are)h(iden)m(tical:)55 b(compute)39 b(the)f(cost)i(of)e(the)h(en)m
(tire)f(path)g(\(the)0 4524 y(maxim)m(um)43 b(of)h(costs)g(of)g(its)f
(comp)s(onen)m(ts)h(utilizing)d(one)j(of)g(the)g(cost)h(functions\),)h
(then)d(select)i(the)f(least)0 4716 y(exp)s(ensiv)m(e)27
b(path)h(among)h(the)g(candidate)f(paths)g(as)g(the)h
Fk(desig)s(nated)g Fp(for)f(ob)5 b(ject)29 b(retriev)-5
b(al.)39 b(The)28 b(di\013erence)g(is)0 4908 y(in)e(the)h(w)m(a)m(y)h
(they)g(decide)e(on)h(stoping)g(the)g(up)m(w)m(ard)f(phase)h(and)g
(starting)f(the)i(do)m(wn)m(w)m(ard)f(phase.)39 b(Lo)s(cal)27
b(stops)0 5100 y(after)j(\014nding)d(the)j(\014rst)e(source)i(in)e(the)
h(path)h(capable)f(of)g(deliv)m(ering)f(the)h(ob)5 b(ject,)31
b(where)e(Global)g(stops)g(when)0 5292 y(it)g(\014nds)f(that)i(the)g
(cost)h(could)d(not)i(b)s(e)f(impro)m(v)m(ed)g(b)m(y)h(con)m(tin)m
(uing)e(to)j(go)f(up)m(w)m(ard.)40 b(Global)28 b(stops)i(the)g(up)m(w)m
(ard)1905 5656 y(15)p eop
%%Page: 16 16
16 15 bop 0 99 a Fp(pro)s(cess)30 b(when)f(it)h(either)g(detects)i(a)e
(saturated)h(link)d(or)j(reac)m(hes)g(a)g(ro)s(ot.)141
369 y(Although)e(seems)g(similar)e(to)j(the)g(shortest)f(path)g
(problem)f(in)g(graph)h(theory)59 b([GJ79)q(],)30 b(\014nding)d(the)j
(least)0 561 y(loaded)f(path)h(in)e(RedHi)h(is)g(di\013eren)m(t)h(in)e
(the)i(w)m(a)m(y)h(the)f(path)f(cost)i(is)e(computed.)40
b(The)30 b(cost)g(of)g(a)h(path)e(here)h(is)0 753 y(the)f(maxim)m(um)f
(cost)i(of)f(all)e(the)i(no)s(des)f(and)h(links)d(participating)h(in)h
(that)h(path)g(rather)g(that)g(the)g(summation)0 945
y(of)i(these)f(costs.)42 b(This)29 b(mak)m(es)i(the)f(traditional)f
(shortest)i(path)f(algorithms)f(unapplicable)e(in)j(this)f(case.)141
1215 y(The)34 b(complexit)m(y)g(of)g(the)h(up)m(w)m(ard)e(and)g(do)m
(wn)m(w)m(ard)h(phases)g(of)g(these)h(heuristics)d(are)j
Fk(O)s Fp(\()p Fk(n)22 b Fl(\003)i Fk(p)p Fp(\))34 b(where)f
Fk(n)0 1407 y Fp(is)e(the)i(n)m(um)m(b)s(er)e(of)h(lev)m(els)g(in)e
(the)j(hierarc)m(h)m(y)f(and)f Fk(p)h Fp(is)f(the)i(n)m(um)m(b)s(er)e
(of)h(candidate)g(paths)g(from)f(head-end)h(to)0 1599
y(ro)s(ots.)66 b(Since)37 b Fk(n)h Fp(is)g(not)h(exp)s(ected)g(to)g(b)s
(e)f(high)g(and)g(since)g(the)h(comm)m(unication)f(cost)h(forces)g
Fk(p)g Fp(to)g(b)s(e)f(lo)m(w)0 1791 y(\(Sec.)31 b(3.3\),)h(the)f(comp)
s(exit)m(y)f(of)h(these)g(heuristics)d(is)h(not)i(high.)0
2194 y Fj(5.3)112 b(Resource)38 b(Reserv)-6 b(ation)36
b(P)m(olicies)0 2523 y Fp(When)26 b(a)h(no)s(de)f(is)g(exercising)f
(its)h(option)g(to)i(\014nd)c(the)j(b)s(est)f(p)s(ossible)e(path)j(for)
f(obtaining)f(an)i(ob)5 b(ject,)28 b(it)e(migh)m(t)0
2715 y(reserv)m(e)39 b(all)d(the)i(resources)g(along)g(all)f(the)h
(paths)g(so)g(that)g(other)h(requests)e(do)h(not)g(grab)g(the)g
(resources)g(\(a)0 2907 y Fk(pessimistic)c Fp(approac)m(h\).)52
b(Alternativ)m(ely)-8 b(,)36 b(it)d(migh)m(t)h(not)g(reserv)m(e)h(the)g
(resources)f(hoping)e(that)j(the)f(selected)0 3099 y(path)g(will)e(not)
i(b)s(e)g(o)s(ccupied)f(b)m(y)i(other)f(requests)h(\()p
Fk(optimistic)f Fp(approac)m(h\).)54 b(In)33 b(this)h(section,)h(w)m(e)
g(study)f(the)0 3290 y(adv)-5 b(an)m(tages)27 b(and)d(disadv)-5
b(an)m(tages)26 b(of)f(eac)m(h)h(of)g(these)f(approac)m(hes)h(and)e(ev)
m(en)m(tually)h(prop)s(ose)g(a)g(third)e(approac)m(h,)0
3482 y(termed)30 b Fn(Server-L)-5 b(o)g(ck)31 b Fp(strategy)-8
b(.)141 3753 y(The)30 b(resource)h(reserv)-5 b(ation)31
b(issue)f(can)h(b)s(e)f(b)s(est)g(sho)m(wn)h(b)m(y)f(an)h(example.)42
b(Supp)s(ose)29 b(a)i(request)g Fk(r)3566 3767 y Fm(1)3636
3753 y Fp(arriv)m(es)0 3945 y(at)d(head-end)f(no)s(de)g
Fk(A)h Fp(for)f(ob)5 b(ject)28 b Fk(O)1284 3959 y Fh(i)1340
3945 y Fp(with)f(2)g(Mb/s)h(displa)m(y)e(bandwidth.)37
b(Assume)27 b(no)s(de)f Fk(A)i Fp(determines)f(t)m(w)m(o)0
4137 y(paths)33 b Fk(p)297 4151 y Fm(1)370 4137 y Fp(and)g
Fk(p)596 4151 y Fm(2)668 4137 y Fp(for)h(obtaining)e
Fk(O)1287 4151 y Fh(i)1315 4137 y Fp(.)50 b(Subsequen)m(tly)-8
b(,)33 b Fk(A)h Fp(selects)g Fk(p)2400 4151 y Fm(1)2473
4137 y Fp(o)m(v)m(er)g Fk(p)2716 4151 y Fm(2)2789 4137
y Fp(due)f(to)h(some)g(heuristic.)48 b(No)m(w)0 4328
y(assume)34 b(during)d(this)i(pro)s(cess)g(another)h(request)g(\(sa)m
(y)h Fk(r)2004 4342 y Fm(2)2043 4328 y Fp(\))f(grabs)g(one)g(of)g(the)g
(resources)f(\(sa)m(y)i Fk(B)5 b Fp(\))34 b(of)g Fk(p)3681
4342 y Fm(1)3754 4328 y Fp(and)0 4520 y(saturates)e(it.)45
b(Consequen)m(tly)-8 b(,)32 b Fk(r)1146 4534 y Fm(1)1217
4520 y Fp(m)m(ust)f(no)m(w)h(b)s(e)f(rejected)i(while)d
Fk(p)2387 4534 y Fm(2)2457 4520 y Fp(is)h(still)f(ready)h(to)i(supp)s
(ort)d(the)i(request.)0 4712 y(This)e(is)g(ho)m(w)h(an)h(optimistic)d
(resource)j(reserv)-5 b(ation)31 b(strategy)i(functions.)42
b(That)31 b(is,)g(it)g(do)s(es)g(not)h(reserv)m(e)g(an)m(y)0
4904 y(resources)23 b(during)e(the)i(execution)g(of)g(heuristic,)g
(hoping)e(that)j(no)f(other)g(request)g(needing)f(a)h(resource)g(of)g
(either)0 5096 y Fk(p)46 5110 y Fm(1)121 5096 y Fp(or)36
b Fk(p)284 5110 y Fm(2)359 5096 y Fp(will)d(arriv)m(e)j(un)m(til)e(the)
i(b)s(est)f(path)h(\(i.e.,)i Fk(p)1860 5110 y Fm(1)1899
5096 y Fp(\))e(is)f(selected.)58 b(Alternativ)m(ely)-8
b(,)37 b(a)f(p)s(essimistic)e(strategy)0 5288 y(can)d(reserv)m(e)g(2)g
(Mb/s)g(of)g(all)e(the)i(resources)g(of)g(b)s(oth)f Fk(p)1936
5302 y Fm(1)2005 5288 y Fp(and)g Fk(p)2228 5302 y Fm(2)2298
5288 y Fp(during)f(the)i(execution)f(of)h(the)g(heuristic.)40
b(In)1905 5656 y(16)p eop
%%Page: 17 17
17 16 bop 0 99 a Fp(this)26 b(case,)j(no)d(other)h(request)g(can)g
(saturate)h(an)m(y)f(resource)g(of)g Fk(p)2237 113 y
Fm(1)2303 99 y Fp(b)s(ecause)g(at)h(least)f(2)g(Mb/s)g(is)f(reserv)m
(ed.)39 b(The)0 290 y(disadv)-5 b(an)m(tage)32 b(is)e(that)i(a)g
(request)f(needing)g(a)g(resource)h(of)g Fk(p)2144 304
y Fm(2)2214 290 y Fp(migh)m(t)f(no)m(w)g(get)i(rejected)f(while)d
Fk(p)3444 304 y Fm(2)3515 290 y Fp(will)g(nev)m(er)0
482 y(b)s(e)h(utilized)e(b)m(y)i Fk(r)614 496 y Fm(1)654
482 y Fp(.)141 753 y(T)-8 b(o)28 b(a)m(v)m(oid)h(the)f(disadv)-5
b(an)m(tages)28 b(of)g(b)s(oth)f(p)s(essimistic)e(and)i(optimistic)f
(strategies,)j(the)f(Serv)m(er-Lo)s(c)m(k)h(strat-)0
945 y(egy)46 b(is)f(prop)s(osed.)84 b(With)45 b(this)g(strategy)-8
b(,)51 b(the)46 b(serv)m(er)f(exclusiv)m(ely)f(pro)s(cess)h(one)h
(request)g(at)g(a)g(time)f(\(in)0 1137 y(sequence\),)30
b(un)m(til)c(either)h(a)i(path)f(is)f(c)m(hosen)h(or)g(the)g(request)h
(is)e(rejected.)40 b(Only)27 b(then)h(the)g(serv)m(er)g(can)g(pro)s
(cess)0 1328 y(the)h(next)g(request.)40 b(T)-8 b(o)29
b(observ)m(e,)h(with)e(our)g(previous)f(example,)i(supp)s(ose)f(no)s
(de)g Fk(B)33 b Fp(in)27 b Fk(p)3106 1342 y Fm(1)3174
1328 y Fp(receiv)m(es)j(a)f(message)0 1520 y(from)j Fk(A)h
Fp(asking)g(for)f(2)i(Mb/s.)48 b(No)m(w)33 b Fk(B)38
b Fp(will)30 b(propagate)k(the)f(message)h(up)e(in)f(the)i(hierarc)m(h)
m(y)-8 b(.)49 b(Mean)m(while,)33 b(a)0 1712 y(message)h(generated)f(b)m
(y)f Fk(r)937 1726 y Fm(2)1009 1712 y Fp(reac)m(hes)i
Fk(B)5 b Fp(.)46 b(This)31 b(message)i(will)d(b)s(e)i(queued)f(\(and)i
(not)f(gran)m(ted)h(as)g(in)e(the)i(case)0 1904 y(of)k(optimistic\))e
(un)m(til)g Fk(r)838 1918 y Fm(1)914 1904 y Fp(is)h(completed.)59
b(Note)38 b(that)g(during)c(the)j(pro)s(cessing)e(of)i
Fk(r)2982 1918 y Fm(1)3022 1904 y Fp(,)h(Serv)m(er-Lo)s(c)m(k)g(will)c
(not)0 2096 y Fk(r)s(ej)5 b(ect)36 b Fp(an)m(y)f(request)f(needing)g(a)
h(resource)g(of)f Fk(p)1704 2110 y Fm(2)1778 2096 y Fp(\(as)h(in)f(the)
h(case)g(of)g(p)s(essimistic\).)51 b(Instead,)36 b(it)e(will)e(queue)0
2288 y(the)c(generated)g(message)h(at)f(the)f(b)s(ottlenec)m(k)h(no)s
(de)f(un)m(til)f Fk(r)2082 2302 y Fm(1)2149 2288 y Fp(releases)h
Fk(p)2521 2302 y Fm(2)2588 2288 y Fp(due)f(to)j(its)d(selection)i(of)f
Fk(p)3501 2302 y Fm(1)3540 2288 y Fp(.)40 b(A)m(t)28
b(that)0 2480 y(time)i(the)h(b)s(ottlenec)m(k)g(no)s(de)e(will)f(b)s(e)
i(dedicated)g(to)h(the)f(new)g(request.)0 2949 y Fo(6)135
b(Adaptiv)l(e)45 b(Bu\013ering)g(Mec)l(hanisms)0 3310
y Fp(Un)m(til)37 b(no)m(w,)i(w)m(e)g(assumed)e(a)h(restrict)f(pip)s
(elined)d(ob)5 b(ject)38 b(deliv)m(ery)-8 b(.)62 b(That)38
b(is,)h(a)f(request)f Fk(r)k Fp(referencing)36 b(a)j(2)0
3502 y(hour)f(MPEG-I)s(I)g(mo)m(vie)i(with)d Fk(R)1192
3516 y Fh(c)1266 3502 y Fp(=)i(2)g(Mb/s)g(displa)m(y)e(bandwidth)f
(requiremen)m(t)i(will)f(get)j(accepted)g(only)0 3694
y(if)e(the)i(system)f(can)h(reserv)m(e)g(exactly)g Fk(R)1448
3708 y Fh(c)1522 3694 y Fp(through)f(a)h(path.)67 b(Ho)m(w)m(ev)m(er,)
44 b(using)38 b(memory)h(\(or)h(disk\))e(bu\013ers)0
3886 y(at)h(the)f(clien)m(t)g(side,)h(w)m(e)g(migh)m(t)f(b)s(e)f(able)h
(to)g(relax)g(this)f(assumption.)63 b(T)-8 b(o)38 b(illusterate,)h
(let's)f(denote)h Fk(R)3741 3900 y Fh(p)3819 3886 y Fp(as)0
4078 y(the)c(minim)m(um)d(a)m(v)-5 b(ailable)34 b(bandwidth)d(through)j
(the)h(path.)53 b(T)-8 b(rivially)g(,)34 b Fk(R)2636
4092 y Fh(p)2710 4078 y Fp(determines)f(the)i(total)h(a)m(v)-5
b(ailable)0 4269 y(bandwith)32 b(of)i(the)h(path.)52
b(Assuming)33 b Fk(R)1426 4283 y Fh(p)1497 4269 y Fk(<)f(R)1669
4283 y Fh(c)1703 4269 y Fp(,)k(our)e(restrict)g(pip)s(elined)c(deliv)m
(ery)j(will)f(reject)j Fk(r)s Fp(.)52 b(Ho)m(w)m(ev)m(er,)0
4461 y(if)35 b(w)m(e)i(bu\013er)e(a)i(p)s(ortion)e(of)i(the)f(ob)5
b(ject)37 b(at)g(the)g(clien)m(t)f(side)f(prior)g(to)i(its)e(displa)m
(y)g(initiation,)h(w)m(e)g(w)m(ould)g(b)s(e)0 4653 y(able)f(to)i
(guaran)m(tee)h(uniterrupted)33 b(deliv)m(ery)i(of)h(the)g(ob)5
b(ject)36 b(b)m(y)g(utilizing)d(only)i Fk(R)2936 4667
y Fh(p)3012 4653 y Fp(\()p Fn(L)-5 b(azy)39 b(Pip)-5
b(elining)p Fp(\).)58 b(On)0 4845 y(the)31 b(other)h(hand,)e(if)g
Fk(R)802 4859 y Fh(p)868 4845 y Fk(>)d(R)1035 4859 y
Fh(c)1100 4845 y Fp(w)m(e)32 b(can)g(deliv)m(er)d(the)j(ob)5
b(ject)32 b(faster)f(b)m(y)g(utilizing)e Fk(R)2932 4859
y Fh(p)2971 4845 y Fp(.)43 b(In)31 b(this)f(case,)i(since)f(the)0
5037 y(displa)m(y)i(is)h(restricted)g(b)m(y)h Fk(R)1018
5051 y Fh(c)1052 5037 y Fp(,)h(w)m(e)f(still)e(need)h(some)i(bu\013er)d
(space)i(at)h(the)f(clien)m(t)f(side)g(to)h(store)g(the)g(p)s(ortion)0
5229 y(whic)m(h)d(is)h(deliv)m(ered)f(but)h(not)h(y)m(et)g(dipla)m(y)m
(ed)f(\()p Fn(Eager)i(Pip)-5 b(elining)p Fp(\).)51 b(The)33
b(adv)-5 b(an)m(tage)36 b(is)c(that)i(Eager)g(frees)g(up)1905
5656 y(17)p eop
%%Page: 18 18
18 17 bop 0 99 a Fp(resources)35 b(earlier.)52 b(F)-8
b(or)36 b(the)f(rest)g(of)f(this)g(section,)i(w)m(e)f(describ)s(e)f
(eac)m(h)h(of)g(these)g(metho)s(ds)f(in)g(more)h(details.)0
290 y(Note)d(that)f(restrict)f(pip)s(elining)c(is)j(a)i(sp)s(ecial)e
(case)i(of)g(either)e(Eager)j(or)e(Lazy)h(where)f Fk(R)3093
304 y Fh(p)3158 290 y Fp(=)25 b Fk(R)3323 304 y Fh(c)3357
290 y Fp(.)141 561 y(First,)k(w)m(e)g(start)h(b)m(y)e(describing)f(a)i
(general)g(pip)s(elinig)c(mec)m(hanism)j(whic)m(h)g(is)g(based)g(on)h
([GS94)q(,)g(GDS95)q(])3835 528 y Fm(2)3875 561 y Fp(.)0
753 y(Supp)s(ose)37 b(an)j(ob)5 b(ject)40 b Fk(X)46 b
Fp(is)39 b(splited)e(in)m(to)i Fk(n)g Fp(\014xed)f(size)h(blo)s(c)m(ks)
g(\()p Fk(B)2394 767 y Fm(1)2434 753 y Fp(,)i Fk(B)2569
767 y Fm(2)2609 753 y Fp(,)g(...,)i Fk(B)2887 767 y Fh(n)2934
753 y Fp(\).)67 b(A)40 b(blo)s(c)m(k)e(represen)m(ts)i(a)0
945 y(con)m(tiguous)26 b(p)s(ortion)f(of)i(an)f(ob)5
b(ject)27 b(and)f(determines)f(the)i(unit)e(of)h(transfer)g(from)g(the)
h(serv)m(er)f(to)h(a)g(clien)m(t)f(\(e.g.,)0 1137 y(a)k(\014xed)f(pac)m
(k)m(et)j(size\).)41 b(Brie\015y)-8 b(,)29 b(the)h(pip)s(elining)25
b(mec)m(hanism)30 b(groups)f(the)h(blo)s(c)m(ks)f(of)h(ob)5
b(ject)30 b Fk(X)37 b Fp(in)m(to)30 b Fk(s)f Fp(logical)0
1328 y(slices)35 b(\()p Fk(S)330 1342 y Fh(X)q(;)p Fm(1)448
1328 y Fp(,)j Fk(S)567 1342 y Fh(X)q(;)p Fm(2)685 1328
y Fp(,)g Fk(S)804 1342 y Fh(X)q(;)p Fm(3)922 1328 y Fp(,)f(...,)i
Fk(S)1179 1342 y Fh(X)q(;s)1294 1328 y Fp(\))d(suc)m(h)g(that)g(the)h
(displa)m(y)d(time)h(of)i Fk(S)2633 1342 y Fh(X)q(;)p
Fm(1)2787 1328 y Fp(\()p Fk(T)2875 1343 y Fh(D)r(ispl)q(ay)3128
1328 y Fp(\()p Fk(S)3219 1342 y Fh(X)q(;)p Fm(1)3337
1328 y Fp(\)\))g(eclipses)e(the)0 1520 y(time)d(required)e(to)j
(transfer)f Fk(S)1075 1534 y Fh(X)q(;)p Fm(2)1225 1520
y Fp(\()p Fk(T)1313 1535 y Fh(T)10 b(r)r(ansf)d(er)1623
1520 y Fp(\()p Fk(S)1714 1534 y Fh(X)q(;)p Fm(2)1833
1520 y Fp(\)\),)33 b Fk(T)2014 1535 y Fh(D)r(ispl)q(ay)2267
1520 y Fp(\()p Fk(S)2358 1534 y Fh(X)q(;)p Fm(2)2477
1520 y Fp(\))f(eclipses)f Fk(T)2923 1535 y Fh(T)10 b(r)r(ansf)d(er)3233
1520 y Fp(\()p Fk(S)3324 1534 y Fh(X)q(;)p Fm(3)3442
1520 y Fp(\),)33 b(etc.)48 b(This)0 1712 y(ensures)32
b(a)i(con)m(tin)m(uous)f(displa)m(y)-8 b(.)48 b(The)32
b(time)h(required)f(to)i(transfer)e(an)i(ob)5 b(ject)34
b(\()p Fk(T)2912 1727 y Fh(T)10 b(r)r(ansf)d(er)3222
1712 y Fp(\))33 b(dep)s(ends)f(on)h(the)0 1904 y(a)m(v)-5
b(ailable)25 b(resources)g(\(serv)m(er)h(and)f(link)e(bandwidth\).)37
b(This)24 b(bandwidth)e(remains)i(\014xed)h(for)g(the)h(en)m(tire)f(ob)
5 b(ject)0 2096 y(transfer.)40 b(The)30 b(follo)m(wing)f(algorithm)g
(illustrates)g(this)g(pip)s(elining)d(mec)m(hanism.)111
2387 y(1:)46 b(T)-8 b(ransfer)30 b(the)g(blo)s(c)m(k\(s\))h(that)g
(constitute)g Fk(S)1768 2401 y Fh(X)q(;)p Fm(1)1916 2387
y Fp(to)g(the)g(clien)m(t)f(bu\013er.)111 2575 y(2:)46
b(F)-8 b(or)31 b Fk(i)g Fp(=)f(2)h(to)g Fk(s)f Fp(do)311
2762 y(a.)46 b(Initiate)30 b(the)h(transfer)e(of)i Fk(S)1401
2776 y Fh(X)q(;i)1538 2762 y Fp(from)f(serv)m(er)h(to)g(the)f(clien)m
(t)g(bu\013er.)306 2908 y(b.)45 b(Initiate)30 b(the)h(displa)m(y)d(of)j
Fk(S)1373 2922 y Fh(X)q(;i)p Fg(\000)p Fm(1)1570 2908
y Fp(.)111 3096 y(3:)46 b(Displa)m(y)30 b(the)g(last)h(slice)e(\()p
Fk(S)1172 3110 y Fh(X)q(;s)1288 3096 y Fp(\).)141 3544
y(The)42 b(duration)e(of)i(Step)g(1)g(determines)f(the)h(latency)g
(time)g(observ)m(ed)g(b)m(y)f(the)h(request.)76 b(During)40
b(Step)0 3736 y(2,)g(while)35 b(the)j(subsequen)m(t)e(slices)g(are)i
(transfered)f(from)g(the)g(serv)m(er,)j(the)d(clien)m(t)g(bu\013er)g
(residen)m(t)f(slices)h(are)0 3928 y(displa)m(y)m(ed.)47
b(Step)32 b(2.a)i(and)f(2.b)g(corresp)s(ond)e(to)j(t)m(w)m(o)g
(di\013eren)m(t)f(pro)s(cesses)f(that)i(execute)g(in)e(parallel.)46
b(Step)33 b(3)0 4120 y(displa)m(ys)28 b(the)j(last)f(slice)g
(transfered)f(to)j(the)e(clien)m(t.)141 4390 y(The)40
b(amoun)m(t)h(of)f(required)f(bu\013er)g(at)j(the)e(clien)m(t)g(side)g
(as)g(w)m(ell)g(as)g(the)h(latency)g(time)f(dep)s(end)e(on)j(the)0
4582 y(pro)s(duction)32 b(rate)k Fk(R)727 4596 y Fh(p)801
4582 y Fp(\(the)f(rate)g(the)f(ob)5 b(ject)36 b(is)d(read)h(from)g(the)
h(serv)m(er)g(and)f(transfered)f(o)m(v)m(er)j(the)f(net)m(w)m(ork\))0
4774 y(and)42 b(the)g(consumption)f(rate)i Fk(R)1173
4788 y Fh(c)1250 4774 y Fp(\(displa)m(y)e(bandwidth\).)75
b(The)42 b(detailed)f(calculation)h(to)h(compute)f(these)0
4966 y(v)-5 b(alues)36 b(are)i(pro)m(vided)d(in)h([GS94)q(].)60
b(Here,)40 b(w)m(e)d(assume)g(that)g Fk(R)2259 4980 y
Fh(p)2336 4966 y Fp(is)f(a)h(function)f(of)h(the)g(system)g
(congestion.)p 0 5137 1560 4 v 104 5191 a Ff(2)138 5223
y Fq(In)25 b([GS94)q(,)h(GDS95)q(],)g(the)f(pip)r(elining)h(w)n(as)h
(in)n(tro)r(duced)e(b)r(et)n(w)n(een)h(the)f(tertiary)h(and)f
(secondary)h(storage)h(device.)1905 5656 y Fp(18)p eop
%%Page: 19 19
19 18 bop 283 11 3335 4 v 281 102 4 92 v 332 74 a Fq(Lev)n(el)p
557 102 V 100 w(V)-6 b(ertices)26 b(\()p Fe(V)976 83
y Fb(lev)r(el)1112 74 y Fq(\))p 1190 102 V 1190 102 V
441 w(Serv)n(ers)p 2213 102 V 2213 102 V 1002 w(Links)p
3616 102 V 1191 105 2426 4 v 281 193 4 92 v 557 193 V
1190 193 V 1241 166 a(MaxB\(Mb/s\))p 1735 193 V 101 w(MaxC\(GB\))p
2213 193 V 390 w(edges)p 3071 193 V 389 w(MaxB\(Mb/s\))p
3616 193 V 283 196 3335 4 v 283 213 V 281 304 4 92 v
401 277 a(1)p 557 304 V 378 w Fe(f)p Fq(0)p Fe(g)p 1190
304 V 475 w Fq(384)p 1735 304 V 368 w(583.2)p 2213 304
V 564 w Fe(;)p 3071 304 V 3616 304 V 283 308 3335 4 v
281 399 4 92 v 401 372 a Fq(2)p 557 399 V 319 w Fe(f)p
Fq(1,2,3)p Fe(g)p 1190 399 V 435 w Fq(96)p 1735 399 V
387 w(194.4)p 2213 399 V 332 w Fe(f)p Fq(\()p Fd(i;)14
b Fq(0\))21 b Fe(j)h Fd(i)g Fe(2)f(V)2821 380 y Ff(2)2856
372 y Fe(g)p 3071 399 V 393 w Fq(240)p 3616 399 V 283
402 3335 4 v 281 494 4 92 v 401 466 a(3)p 557 494 V 297
w Fe(f)p Fq(4,..,12)p Fe(g)p 1190 494 V 415 w Fq(48)p
1735 494 V 406 w(64.8)p 2213 494 V 223 w Fe(f)p Fq(\()p
Fd(i;)13 b Fq(\()p Fd(i)18 b Fe(\000)e Fq(1\))p Fd(=)p
Fq(3\))23 b Fe(j)e Fd(i)h Fe(2)g(V)2950 474 y Ff(3)2984
466 y Fe(g)p 3071 494 V 265 w Fq(144)p 3616 494 V 283
497 3335 4 v 281 588 4 92 v 401 561 a(4)p 557 588 V 278
w Fe(f)p Fq(13,..,39)p Fe(g)p 1190 588 V 396 w Fq(24)p
1735 588 V 406 w(21.6)p 2213 588 V 223 w Fe(f)p Fq(\()p
Fd(i;)13 b Fq(\()p Fd(i)18 b Fe(\000)e Fq(1\))p Fd(=)p
Fq(3\))23 b Fe(j)e Fd(i)h Fe(2)g(V)2950 569 y Ff(4)2984
561 y Fe(g)p 3071 588 V 285 w Fq(64)p 3616 588 V 283
592 3335 4 v 1228 846 a Fp(T)-8 b(able)30 b(1:)41 b(Pure)30
b(Hierarc)m(h)m(y)h(P)m(arameters)0 1121 y(Moreo)m(v)m(er,)g(w)m(e)e
(assume)f(that)h Fk(R)1131 1135 y Fh(c)1194 1121 y Fp(is)f(\014xed.)39
b(The)28 b(size)g(of)h(the)f(\014rst)g(slice)f Fk(S)2586
1135 y Fh(X)q(;)p Fm(1)2733 1121 y Fp(is)g(equal)h(to)h
Fk(B)3238 1135 y Fm(1)3306 1121 y Fp(when)e Fk(R)3610
1135 y Fh(p)3675 1121 y Fl(\025)e Fk(R)3840 1135 y Fh(c)3875
1121 y Fp(.)0 1313 y(The)30 b(calculation)f(of)i Fk(S)806
1327 y Fh(X)q(;)p Fm(1)954 1313 y Fp(when)f Fk(R)1261
1327 y Fh(p)1326 1313 y Fk(<)25 b(R)1491 1327 y Fh(c)1556
1313 y Fp(is)k(also)h(a)h(function)e(of)i(b)s(oth)e Fk(R)2648
1327 y Fh(p)2718 1313 y Fp(and)h Fk(R)2964 1327 y Fh(c)3029
1313 y Fp(\(see)i([GS94)q(]\).)141 1583 y(With)43 b(pip)s(elining)c
(approac)m(hes,)47 b(w)m(e)d(assumed)f(that)h(the)f(data)h(is)f
(bu\013ered)f(at)i(the)g(user)f(site.)79 b(These)0 1775
y(approac)m(hes)33 b(can,)g(ho)m(w)m(ev)m(er,)i(b)s(e)c(generalized)h
(b)m(y)g(allo)m(wing)f(an)m(y)i(in)m(termediate)f(serv)m(er)h(no)s(de)e
(along)i(the)f(path)0 1967 y(from)i(the)h(serv)m(er)g(to)h(the)e(user)g
(to)i(bu\013er)e(the)h(data.)54 b(Moreo)m(v)m(er,)38
b(it)c(is)g(imp)s(ortan)m(t)g(to)h(p)s(oin)m(t)f(out)h(that)g(these)0
2159 y(bu\013ering)29 b(tec)m(hniques)h(are)g(indep)s(enden)m(t)e(of)j
(the)g(cac)m(hing)f(tec)m(hniques)g(discussed)f(in)g(Sec.)i(4.)141
2429 y(W)-8 b(e)35 b(describ)s(ed)d(Eager)j(and)f(Lazy)g(pip)s(elining)
c(only)j(as)h Fk(mechanisms)p Fp(.)52 b(A)34 b Fk(pol)r(icy)j
Fp(is)c(required)g(to)i(decide)0 2621 y(when)27 b(the)g(system)h
(should)e(reject)i(a)h(request)e(as)h(opp)s(osed)f(to)h(accept)h(it)f
(utilizing)c Fk(R)2961 2635 y Fh(p)3026 2621 y Fk(<)h(R)3191
2635 y Fh(c)3226 2621 y Fp(.)40 b(Similarly)-8 b(,)25
b(when)0 2813 y Fk(R)69 2827 y Fh(p)151 2813 y Fk(>)41
b(R)332 2827 y Fh(c)367 2813 y Fp(,)i(a)e(p)s(olicy)e(is)g(required)g
(to)i(determine)f(ho)m(w)g(m)m(uc)m(h)h(of)f Fk(R)2457
2827 y Fh(p)2538 2813 y Fp(should)e(b)s(e)i(utilized)e(for)i(serving)g
(the)0 3005 y(request.)i(W)-8 b(e)32 b(cannot)g(ev)-5
b(aluate)31 b(the)g(mec)m(hanisms)g(without)e(ha)m(ving)i(the)g(p)s
(olicies.)40 b(Design)31 b(of)g(these)g(p)s(olicies)0
3197 y(as)g(w)m(ell)e(as)i(their)e(p)s(erformance)h(ev)-5
b(aluation)30 b(are)g(part)h(of)f(our)g(future)f(researc)m(h.)0
3666 y Fo(7)135 b(P)l(erformance)46 b(Ev)-7 b(aluation)0
4026 y Fp(RedHi)39 b(is)h(a)g(complex)g(net)m(w)m(ork)h(that)g(is)e
(di\016cult)f(to)j(analyze)g(theoretically)-8 b(.)70
b(Therefore,)42 b(w)m(e)f(decided)e(to)0 4218 y(conduct)29
b(a)h(n)m(um)m(b)s(er)e(of)h(sim)m(ulation)f(exp)s(erimen)m(ts)g(to)i
(obtain)f(some)g(insigh)m(ts)f(ab)s(out)h(it.)40 b(Our)28
b(main)g(ob)5 b(jectiv)m(e)0 4410 y(is)34 b(to)i(compare)g(RedHi)f(to)h
(a)f(pure)f(hierarc)m(h)m(y)h(with)f(resp)s(ect)h(to)h(fault-tolerance)
g(and)f(load)g(balancing.)54 b(W)-8 b(e)0 4602 y(also)30
b(compared)h(the)f(p)s(erformance)g(of)h(our)e(di\013eren)m(t)h
(replacemen)m(t)h(p)s(olicies)d(and)i(heuristics.)0 5005
y Fj(7.1)112 b(Sim)m(ulation)35 b(Mo)s(del)141 5334 y
Fp(In)c(our)g(sim)m(ulation,)f(the)h(Distributed)f(Serv)m(er)h(Arc)m
(hitecture)h Fl(D)s(S)7 b(A)30 b Fp(has)h(4)h(lev)m(els.)44
b(Similarlly)27 b(pure)j(hier-)1905 5656 y(19)p eop
%%Page: 20 20
20 19 bop 2 110 3897 4 v 0 201 4 92 v 51 174 a Fq(Lev)n(el)p
276 201 V 100 w(V)-6 b(ertices)26 b(\()p Fe(V)695 183
y Fb(lev)r(el)831 174 y Fq(\))p 909 201 V 909 201 V 441
w(Serv)n(ers)p 1932 201 V 1932 201 V 1283 w(Links)p 3897
201 V 910 205 2988 4 v 0 293 4 92 v 276 293 V 909 293
V 960 265 a(MaxB\(Mb/s\))p 1454 293 V 101 w(MaxC\(GB\))p
1932 293 V 1932 293 V 671 w(edges)p 3352 293 V 670 w(MaxB\(Mb/s\))p
3897 293 V 2 296 3897 4 v 2 313 V 0 404 4 92 v 120 377
a(1)p 276 404 V 329 w Fe(f)p Fq(0,40)p Fe(g)p 909 404
V 427 w Fq(192)p 1454 404 V 368 w(583.2)p 1932 404 V
1932 404 V 845 w Fe(;)p 3352 404 V 3897 404 V 2 407 3897
4 v 0 499 4 92 v 120 471 a Fq(2)p 276 499 V 319 w Fe(f)p
Fq(1,2,3)p Fe(g)p 909 499 V 435 w Fq(96)p 1454 499 V
387 w(194.4)p 1932 499 V 204 w Fe(f)p Fq(\()p Fd(i;)13
b(j)t Fq(\))22 b Fe(j)g Fd(i)g Fe(2)f(V)2409 479 y Ff(2)2444
471 y Fd(;)13 b(j)26 b Fe(2)c(V)2655 479 y Ff(1)2689
471 y Fe(g)p 3352 499 V 841 w Fq(120)p 3897 499 V 2 502
3897 4 v 0 685 4 183 v 120 566 a(3)p 276 685 V 297 w
Fe(f)p Fq(4,..,12)p Fe(g)p 909 685 V 415 w Fq(48)p 1454
685 V 406 w(64.8)p 1932 685 V 223 w Fe(f)p Fq(\()p Fd(i;)13
b(j)t Fq(\))40 b Fe(j)f Fd(i)g Fe(2)g(V)2479 574 y Ff(3)2513
566 y Fd(;)13 b(j)44 b Fq(=)38 b(\()p Fd(i)24 b Fe(\000)g
Fq(1\))p Fd(=)p Fq(3)37 b(or)g Fd(j)43 b Fq(=)1984 657
y(\()p Fd(i)17 b Fe(\000)g Fq(1\))p Fd(=)p Fq(3)h(+)f(1)p
Fd(;)26 b Fq(if)g Fd(j)g(>)21 b Fq(3)26 b(then)f Fd(j)h
Fq(=)c(1)p Fe(g)p 3352 685 V 3588 566 a Fq(72)p 3897
685 V 2 688 3897 4 v 0 871 4 183 v 120 752 a(4)p 276
871 V 278 w Fe(f)p Fq(13,..,39)p Fe(g)p 909 871 V 396
w Fq(24)p 1454 871 V 406 w(21.6)p 1932 871 V 223 w Fe(f)p
Fq(\()p Fd(i;)13 b(j)t Fq(\))40 b Fe(j)f Fd(i)g Fe(2)g(V)2479
760 y Ff(4)2513 752 y Fd(;)13 b(j)44 b Fq(=)38 b(\()p
Fd(i)24 b Fe(\000)g Fq(1\))p Fd(=)p Fq(3)37 b(or)g Fd(j)43
b Fq(=)1984 843 y(\()p Fd(i)17 b Fe(\000)g Fq(1\))p Fd(=)p
Fq(3)h(+)f(1)p Fd(;)26 b Fq(if)g Fd(j)g(>)21 b Fq(12)27
b(then)e Fd(j)h Fq(=)21 b(4)p Fe(g)p 3352 871 V 3588
752 a Fq(32)p 3897 871 V 2 874 3897 4 v 1404 1128 a Fp(T)-8
b(able)30 b(2:)41 b(RedHi)30 b(P)m(arameters)0 1385 y(arc)m(h)m(y)g(is)
e(assumed)g(to)i(b)s(e)e(a)i(4-lev)m(el)f(3-ary)h(tree.)41
b(The)29 b(parameters)g(of)g(these)h(hierarc)m(hies)d(are)j(detailed)e
(in)g(the)0 1577 y(T)-8 b(ab.)34 b(1)g(and)f(T)-8 b(ab.)34
b(2.)51 b(It)34 b(is)e(imp)s(ortan)m(t)h(to)i(p)s(oin)m(t)d(out)i(that)
g(the)g(total)h(amoun)m(t)f(of)g(resources)f(\(serv)m(er)i(band-)0
1769 y(width)29 b(and)i(capacit)m(y)h(as)f(w)m(ell)f(as)i(links)c
(bandwidth\))h(assigned)h(to)i(these)f(t)m(w)m(o)i(arc)m(hitectures)e
(w)m(ere)h(iden)m(tical.)0 1961 y(F)-8 b(or)37 b(example,)g(although)f
(with)f(RedHi)g(the)h(n)m(um)m(b)s(er)f(of)h(links)e(is)h(t)m(wice)i
(than)f(that)h(of)f(pure)f(hierarc)m(h)m(y)-8 b(,)38
b(the)0 2153 y(capacit)m(y)32 b(of)e(eac)m(h)i(link)c(of)i(RedHi)g(is)f
(half)h(of)g(the)h(corresp)s(onding)d(link)h(capacit)m(y)i(of)g(pure)e
(hierarc)m(h)m(y)-8 b(.)141 2423 y(A)25 b(static)g(mo)m(vie)f(p)s
(opulation)e(w)m(as)j(assumed:)37 b(all)23 b(mo)m(vies)i(w)m(ere)f
(initially)d(stored)k(at)g(the)f(ro)s(ot)h(no)s(de\(s\),)h(and)0
2615 y(no)i(new)g(mo)m(vie)h(has)g(b)s(een)e(inserted)h(during)e(the)j
(execution)f(of)h(the)g(sim)m(ulation.)38 b(Eac)m(h)29
b(ro)s(ot)g(no)s(de)f(con)m(tains)h(a)0 2807 y(total)i(of)g(324)g(mo)m
(vies.)141 3078 y(F)-8 b(or)33 b(eac)m(h)g(sim)m(ulation)d(exp)s
(erimen)m(t,)i(18000)i(user)d(requests)h(w)m(ere)g(generated.)47
b(P)m(oisson)31 b(distribution)e(w)m(as)0 3269 y(used)20
b(to)i(sim)m(ulate)f(the)g(in)m(ter-arriv)-5 b(al)20
b(p)s(erio)s(d)e(of)k(requests)f(p)s(er)f(eac)m(h)i(head-end.)38
b(T)-8 b(o)21 b(sim)m(ulate)g(mo)m(vie)g(selections,)0
3461 y(Zipf)7 b('s)37 b(la)m(w)i([NPSS95])g(w)m(as)h(emplo)m(y)m(ed.)67
b(All)37 b(the)j(mo)m(vies)f(w)m(ere)g(assumed)f(to)i(ha)m(v)m(e)g
(iden)m(tical)e(lengths)h(and)0 3653 y(bandwidth)30 b(requiremen)m(ts.)
46 b(Without)32 b(loss)g(of)g(generalit)m(y)-8 b(,)34
b(eac)m(h)f(mo)m(vie)g(is)f(a)g(2)h(hour)f(MPEG-2)h(compressed)0
3845 y(with)c(a)i(2)g(Mb/s)f(bandwidth)e(requiremen)m(ts.)0
4248 y Fj(7.2)112 b(Sim)m(ulation)35 b(Results)0 4577
y Fp(A)23 b(request)g(only)f(arriv)m(es)g(at)i(the)f(head-end)f(no)s
(des.)38 b(Subsequen)m(tly)-8 b(,)23 b(a)g(request)g(is)f(either)g
(serv)m(ed)h(immediately)3837 4544 y Fm(3)3875 4577 y
Fp(,)0 4769 y(or)30 b(rejected)h(if)f(its)g(required)e(resources)i
(cannot)h(b)s(e)f(found.)40 b(The)29 b(n)m(um)m(b)s(er)g(of)i(rejected)
g(requests)f(w)m(as)h(used)f(as)0 4961 y(the)36 b(p)s(erformance)g
(measure.)58 b(Eac)m(h)37 b(exp)s(erimen)m(t)e(w)m(as)i(rep)s(eated)f
(m)m(ultiple)e(times)h(with)g(di\013eren)m(t)h(seeds)g(for)p
0 5123 1560 4 v 104 5177 a Ff(3)138 5209 y Fq(W)-6 b(e)26
b(ignored)g(the)g(time)f(required)g(to)i(select)f(and)g(reserv)n(e)g(a)
g(path)g(as)g(w)n(ell)h(as)g(the)e(time)g(elapsed)i(un)n(til)e(the)h
(\014rst)g(blo)r(c)n(k)g(of)g(the)0 5300 y(requested)d(ob)t(ject)i
(reac)n(hes)f(the)g(head-end)e(no)r(de.)34 b(W)-6 b(e)24
b(exp)r(ect)f(that)h(due)f(to)h(fast)h(sp)r(eed)e(of)i(net)n(w)n(ork)f
(links,)g(this)g(dela)n(y)g(is)g(in)g(order)0 5392 y(of)i(seconds.)36
b(W)-6 b(e)25 b(plan)g(to)h(quan)n(tify)f(this)h(as)g(part)g(of)g(our)g
(future)f(researc)n(h.)1905 5656 y Fp(20)p eop
%%Page: 21 21
21 20 bop 50 15 a
 15146677 12314374 3420651 13024788 36245749 39534837 startTexFig
 50 15 a
%%BeginDocument: ptfb-bgfb-num.eps


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  411   121  5991  4836 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Times-Roman /ISOLatin1Encoding 132 FMSR

1 j
c1
   0    0 6912 5184 PR
6 w
DO
4 w
SO
6 w
c0
 898 4612 mt 6254 4612 L
 898  388 mt 6254  388 L
 898 4612 mt  898  388 L
6254 4612 mt 6254  388 L
 898 4612 mt  898 4612 L
6254 4612 mt 6254 4612 L
 898 4612 mt 6254 4612 L
 898 4612 mt  898  388 L
 898 4612 mt  898 4612 L
 898 4612 mt  898 4558 L
 898  388 mt  898  442 L
 832 4765 mt 
(40) s
1434 4612 mt 1434 4558 L
1434  388 mt 1434  442 L
1368 4765 mt 
(60) s
1969 4612 mt 1969 4558 L
1969  388 mt 1969  442 L
1903 4765 mt 
(80) s
2505 4612 mt 2505 4558 L
2505  388 mt 2505  442 L
2406 4765 mt 
(100) s
3040 4612 mt 3040 4558 L
3040  388 mt 3040  442 L
2941 4765 mt 
(120) s
3576 4612 mt 3576 4558 L
3576  388 mt 3576  442 L
3477 4765 mt 
(140) s
4112 4612 mt 4112 4558 L
4112  388 mt 4112  442 L
4013 4765 mt 
(160) s
4647 4612 mt 4647 4558 L
4647  388 mt 4647  442 L
4548 4765 mt 
(180) s
5183 4612 mt 5183 4558 L
5183  388 mt 5183  442 L
5084 4765 mt 
(200) s
5718 4612 mt 5718 4558 L
5718  388 mt 5718  442 L
5619 4765 mt 
(220) s
6254 4612 mt 6254 4558 L
6254  388 mt 6254  442 L
6155 4765 mt 
(240) s
 898 4612 mt  952 4612 L
6254 4612 mt 6200 4612 L
 797 4659 mt 
(0) s
 898 3204 mt  952 3204 L
6254 3204 mt 6200 3204 L
 665 3251 mt 
(500) s
 898 1796 mt  952 1796 L
6254 1796 mt 6200 1796 L
 599 1843 mt 
(1000) s
 898  388 mt  952  388 L
6254  388 mt 6200  388 L
 599  435 mt 
(1500) s
 898 4612 mt 6254 4612 L
 898  388 mt 6254  388 L
 898 4612 mt  898  388 L
6254 4612 mt 6254  388 L
 898  388 mt  898  388 L
6254  388 mt 6254  388 L
gs 898 388 5357 4225 MR c np

gr 
 862 4612 mt  934 4612 L
 898 4576 mt  898 4648 L
 862 4576 mt  934 4648 L
 934 4576 mt  862 4648 L
1398 4612 mt 1470 4612 L
1434 4576 mt 1434 4648 L
1398 4576 mt 1470 4648 L
1470 4576 mt 1398 4648 L
1933 4612 mt 2005 4612 L
1969 4576 mt 1969 4648 L
1933 4576 mt 2005 4648 L
2005 4576 mt 1933 4648 L
2469 4612 mt 2541 4612 L
2505 4576 mt 2505 4648 L
2469 4576 mt 2541 4648 L
2541 4576 mt 2469 4648 L
3004 4612 mt 3076 4612 L
3040 4576 mt 3040 4648 L
3004 4576 mt 3076 4648 L
3076 4576 mt 3004 4648 L
3540 4612 mt 3612 4612 L
3576 4576 mt 3576 4648 L
3540 4576 mt 3612 4648 L
3612 4576 mt 3540 4648 L
4076 4542 mt 4148 4542 L
4112 4506 mt 4112 4578 L
4076 4506 mt 4148 4578 L
4148 4506 mt 4076 4578 L
4611 4249 mt 4683 4249 L
4647 4213 mt 4647 4285 L
4611 4213 mt 4683 4285 L
4683 4213 mt 4611 4285 L
5147 3701 mt 5219 3701 L
5183 3665 mt 5183 3737 L
5147 3665 mt 5219 3737 L
5219 3665 mt 5147 3737 L
5682 2979 mt 5754 2979 L
5718 2943 mt 5718 3015 L
5682 2943 mt 5754 3015 L
5754 2943 mt 5682 3015 L
6218 2098 mt 6290 2098 L
6254 2062 mt 6254 2134 L
6218 2062 mt 6290 2134 L
6290 2062 mt 6218 2134 L
gs 898 388 5357 4225 MR c np
536 -881 535 -722 536 -548 535 -293 536 -70 536 0 535 0 536 0 
535 0 536 0 898 4612 11 MP stroke

gr 
  36   36  898 4612 FO
  36   36 1434 4612 FO
  36   36 1969 4608 FO
  36   36 2505 4607 FO
  36   36 3040 4602 FO
  36   36 3576 4590 FO
  36   36 4112 4482 FO
  36   36 4647 4148 FO
  36   36 5183 3691 FO
  36   36 5718 2902 FO
  36   36 6254 2024 FO
gs 898 388 5357 4225 MR c np
DO
536 -878 535 -789 536 -457 535 -334 536 -108 536 -12 535 -5 536 -1 
535 -4 536 0 898 4612 11 MP stroke
SO

gr 
 862 4576 mt  934 4648 L
 934 4576 mt  862 4648 L
1398 4576 mt 1470 4648 L
1470 4576 mt 1398 4648 L
1933 4576 mt 2005 4648 L
2005 4576 mt 1933 4648 L
2469 4576 mt 2541 4648 L
2541 4576 mt 2469 4648 L
3004 4503 mt 3076 4575 L
3076 4503 mt 3004 4575 L
3540 4187 mt 3612 4259 L
3612 4187 mt 3540 4259 L
4076 3716 mt 4148 3788 L
4148 3716 mt 4076 3788 L
4611 2982 mt 4683 3054 L
4683 2982 mt 4611 3054 L
5147 2137 mt 5219 2209 L
5219 2137 mt 5147 2209 L
5682 1574 mt 5754 1646 L
5754 1574 mt 5682 1646 L
6218  864 mt 6290  936 L
6290  864 mt 6218  936 L
gs 898 388 5357 4225 MR c np
DA
536 -710 535 -563 536 -845 535 -734 536 -471 536 -316 535 -73 536 0 
535 0 536 0 898 4612 11 MP stroke
SO

gr 
 862 4061 mt  934 4061 L
 898 4025 mt  898 4097 L
1398 4035 mt 1470 4035 L
1434 3999 mt 1434 4071 L
1933 4037 mt 2005 4037 L
1969 4001 mt 1969 4073 L
2469 3977 mt 2541 3977 L
2505 3941 mt 2505 4013 L
3004 3993 mt 3076 3993 L
3040 3957 mt 3040 4029 L
3540 3798 mt 3612 3798 L
3576 3762 mt 3576 3834 L
4076 3448 mt 4148 3448 L
4112 3412 mt 4112 3484 L
4611 2716 mt 4683 2716 L
4647 2680 mt 4647 2752 L
5147 1785 mt 5219 1785 L
5183 1749 mt 5183 1821 L
5682 1434 mt 5754 1434 L
5718 1398 mt 5718 1470 L
6218  588 mt 6290  588 L
6254  552 mt 6254  624 L
gs 898 388 5357 4225 MR c np
DD
536 -846 535 -351 536 -931 535 -732 536 -350 536 -195 535 16 536 -60 
535 2 536 -26 898 4061 11 MP stroke

gr 
DD
1434 3952 mt 
(Pure\(with failure\)) s
4674 3079 mt 
(Pure) s
5718 3107 mt 
(RedHi) s
4058 4414 mt 
(RedHi\(with failure\)) s
/Helvetica /ISOLatin1Encoding 144 FMSR

2920 4925 mt 
(Load Percentage\(%\)) s
 545 3108 mt  -90 rotate
(Rejected Requests) s
90 rotate
/Times-Roman /ISOLatin1Encoding 132 FMSR

2895  287 mt 
(Pure Hierarchy vs. RedHi) s
SO

end

eplot

epage
end

showpage

%%EndDocument

 endTexFig
 2068 15 a
 15146677 12314374 3420651 13024788 36245749 39534837 startTexFig
 2068 15 a
%%BeginDocument: bgb-fre-loa-cus.eps


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  411   121  5991  4836 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Times-Roman /ISOLatin1Encoding 132 FMSR

1 j
c1
   0    0 6912 5184 PR
6 w
DO
4 w
SO
6 w
c0
 898 4612 mt 6254 4612 L
 898  388 mt 6254  388 L
 898 4612 mt  898  388 L
6254 4612 mt 6254  388 L
 898 4612 mt  898 4612 L
6254 4612 mt 6254 4612 L
 898 4612 mt 6254 4612 L
 898 4612 mt  898  388 L
 898 4612 mt  898 4612 L
 898 4612 mt  898 4558 L
 898  388 mt  898  442 L
 832 4765 mt 
(40) s
1434 4612 mt 1434 4558 L
1434  388 mt 1434  442 L
1368 4765 mt 
(60) s
1969 4612 mt 1969 4558 L
1969  388 mt 1969  442 L
1903 4765 mt 
(80) s
2505 4612 mt 2505 4558 L
2505  388 mt 2505  442 L
2406 4765 mt 
(100) s
3040 4612 mt 3040 4558 L
3040  388 mt 3040  442 L
2941 4765 mt 
(120) s
3576 4612 mt 3576 4558 L
3576  388 mt 3576  442 L
3477 4765 mt 
(140) s
4112 4612 mt 4112 4558 L
4112  388 mt 4112  442 L
4013 4765 mt 
(160) s
4647 4612 mt 4647 4558 L
4647  388 mt 4647  442 L
4548 4765 mt 
(180) s
5183 4612 mt 5183 4558 L
5183  388 mt 5183  442 L
5084 4765 mt 
(200) s
5718 4612 mt 5718 4558 L
5718  388 mt 5718  442 L
5619 4765 mt 
(220) s
6254 4612 mt 6254 4558 L
6254  388 mt 6254  442 L
6155 4765 mt 
(240) s
 898 4612 mt  952 4612 L
6254 4612 mt 6200 4612 L
 797 4659 mt 
(0) s
 898 3908 mt  952 3908 L
6254 3908 mt 6200 3908 L
 665 3955 mt 
(500) s
 898 3204 mt  952 3204 L
6254 3204 mt 6200 3204 L
 599 3251 mt 
(1000) s
 898 2500 mt  952 2500 L
6254 2500 mt 6200 2500 L
 599 2547 mt 
(1500) s
 898 1796 mt  952 1796 L
6254 1796 mt 6200 1796 L
 599 1843 mt 
(2000) s
 898 1092 mt  952 1092 L
6254 1092 mt 6200 1092 L
 599 1139 mt 
(2500) s
 898  388 mt  952  388 L
6254  388 mt 6200  388 L
 599  435 mt 
(3000) s
 898 4612 mt 6254 4612 L
 898  388 mt 6254  388 L
 898 4612 mt  898  388 L
6254 4612 mt 6254  388 L
 898  388 mt  898  388 L
6254  388 mt 6254  388 L
gs 898 388 5357 4225 MR c np

gr 
 862 4612 mt  934 4612 L
 898 4576 mt  898 4648 L
 862 4576 mt  934 4648 L
 934 4576 mt  862 4648 L
1398 4612 mt 1470 4612 L
1434 4576 mt 1434 4648 L
1398 4576 mt 1470 4648 L
1470 4576 mt 1398 4648 L
1933 4612 mt 2005 4612 L
1969 4576 mt 1969 4648 L
1933 4576 mt 2005 4648 L
2005 4576 mt 1933 4648 L
2469 4612 mt 2541 4612 L
2505 4576 mt 2505 4648 L
2469 4576 mt 2541 4648 L
2541 4576 mt 2469 4648 L
3004 4612 mt 3076 4612 L
3040 4576 mt 3040 4648 L
3004 4576 mt 3076 4648 L
3076 4576 mt 3004 4648 L
3540 4568 mt 3612 4568 L
3576 4532 mt 3576 4604 L
3540 4532 mt 3612 4604 L
3612 4532 mt 3540 4604 L
4076 4275 mt 4148 4275 L
4112 4239 mt 4112 4311 L
4076 4239 mt 4148 4311 L
4148 4239 mt 4076 4311 L
4611 3729 mt 4683 3729 L
4647 3693 mt 4647 3765 L
4611 3693 mt 4683 3765 L
4683 3693 mt 4611 3765 L
5147 2960 mt 5219 2960 L
5183 2924 mt 5183 2996 L
5147 2924 mt 5219 2996 L
5219 2924 mt 5147 2996 L
5682 1898 mt 5754 1898 L
5718 1862 mt 5718 1934 L
5682 1862 mt 5754 1934 L
5754 1862 mt 5682 1934 L
6218  741 mt 6290  741 L
6254  705 mt 6254  777 L
6218  705 mt 6290  777 L
6290  705 mt 6218  777 L
gs 898 388 5357 4225 MR c np
536 -1157 535 -1062 536 -769 535 -546 536 -293 536 -44 535 0 536 0 
535 0 536 0 898 4612 11 MP stroke

gr 
  36   36  898 4612 FO
  36   36 1434 4612 FO
  36   36 1969 4612 FO
  36   36 2505 4612 FO
  36   36 3040 4609 FO
  36   36 3576 4600 FO
  36   36 4112 4463 FO
  36   36 4647 4171 FO
  36   36 5183 3695 FO
  36   36 5718 2530 FO
  36   36 6254 1141 FO
gs 898 388 5357 4225 MR c np
DO
536 -1389 535 -1165 536 -476 535 -292 536 -137 536 -9 535 -3 536 0 
535 0 536 0 898 4612 11 MP stroke
SO

gr 
 862 4576 mt  934 4648 L
 934 4576 mt  862 4648 L
1398 4576 mt 1470 4648 L
1470 4576 mt 1398 4648 L
1933 4576 mt 2005 4648 L
2005 4576 mt 1933 4648 L
2469 4576 mt 2541 4648 L
2541 4576 mt 2469 4648 L
3004 4575 mt 3076 4647 L
3076 4575 mt 3004 4647 L
3540 4558 mt 3612 4630 L
3612 4558 mt 3540 4630 L
4076 4388 mt 4148 4460 L
4148 4388 mt 4076 4460 L
4611 3993 mt 4683 4065 L
4683 3993 mt 4611 4065 L
5147 3465 mt 5219 3537 L
5219 3465 mt 5147 3537 L
5682 2335 mt 5754 2407 L
5754 2335 mt 5682 2407 L
6218 1121 mt 6290 1193 L
6290 1121 mt 6218 1193 L
gs 898 388 5357 4225 MR c np
DA
536 -1214 535 -1130 536 -528 535 -395 536 -170 536 -17 535 -1 536 0 
535 0 536 0 898 4612 11 MP stroke

gr 
DA
5210 3037 mt 
(FreeBW) s
5210 3530 mt 
(UserBW) s
5210 3811 mt 
(RatioBW) s
/Helvetica /ISOLatin1Encoding 144 FMSR

2920 4925 mt 
(Load Percentage\(%\)) s
 545 3108 mt  -90 rotate
(Rejected Requests) s
90 rotate
/Times-Roman /ISOLatin1Encoding 132 FMSR

2241  287 mt 
(Cost Functions: FreeBW, RationBW, and UserBW) s
SO

end

eplot

epage
end

showpage

%%EndDocument

 endTexFig
 736 1688 a Fp(a.)41 b(Arc)m(hitecture)1464 b(b.)40 b(Cost)30
b(F)-8 b(unctions)1269 1877 y(Figure)30 b(4:)41 b(Tw)m(o)31
b(sets)f(of)h(exp)s(erimen)m(ts)0 2251 y(our)36 b(random)g(n)m(um)m(b)s
(er)g(generators.)61 b(The)37 b(system)g(b)s(eha)m(vior)f(w)m(as)h
(recorded)f(under)g(v)-5 b(ariable)35 b(system)i(loads)0
2443 y(with)26 b(all)g(head-end)h(no)s(des)g(receiving)f(iden)m(tical)g
(arriv)-5 b(al)26 b(rate)i(for)g(requests)f(using)f(P)m(oison.)39
b(Hence,)29 b(for)e(all)g(the)0 2635 y(rep)s(orted)i(graphs,)g(the)g
Fk(x)p Fp(-axis)g(is)f(the)i(p)s(ercen)m(tage)h(of)e(the)g(load)g(on)g
(eac)m(h)i(head-end)e(\(v)-5 b(aried)28 b(from)h(40\045)h(up)e(to)0
2827 y(240\045\),)35 b(and)d(the)g Fk(y)s Fp(-axis)g(is)g(the)h(n)m(um)
m(b)s(er)e(of)i(rejected)g(requests.)47 b(Eac)m(h)33
b(exp)s(erimen)m(t)f(had)f(a)i(w)m(arm)m(up)f(p)s(erio)s(d)0
3019 y(for)24 b(2000)j(requests)d(during)e(whic)m(h)h(the)i(ob)5
b(jects)25 b(w)m(ere)g(migrated/replicated)f(from)g(the)h(ro)s(ot\(s\))
g(to)h(other)e(lev)m(els)0 3211 y(of)31 b(the)f(hierarc)m(h)m(y)-8
b(.)41 b(The)30 b(results)f(are)i(only)e(rep)s(orted)h(for)g(the)g(p)s
(ost-w)m(arm)m(up)g(p)s(erio)s(d.)141 3481 y(The)g(follo)m(wing)e(four)
h(sets)i(of)f(sim)m(ulation)e(results)h(will)e(b)s(e)j(detailed:)39
b(1\))31 b(Arc)m(hietecture:)41 b(Pure)30 b(Hierarc)m(h)m(y)0
3673 y(vs.)38 b(RedHi,)25 b(2\))g(Cost)g(F)-8 b(unctions:)37
b(F)-8 b(reeBW,)26 b(RatioBW)g(and)d(UserBW,)j(3\))f(Ob)5
b(ject)24 b(Lo)s(cating)g(Metho)s(d:)38 b(Lo)s(cal)0
3865 y(vs.)i(Global,)27 b(4\))i(Replacemen)m(t)f(P)m(olicy:)39
b(LR)m(U)28 b(vs.)40 b(LFU.)28 b(Unless)e(stated)j(otherwise,)f(the)g
(default)f(parameters)0 4057 y(for)36 b(all)g(of)h(these)g(sim)m
(ulation)d(exp)s(erimen)m(ts)i(w)m(ere:)53 b(Optimistic)35
b(\(Resource)i(Reserv)-5 b(ation)37 b(P)m(olicy\),)h(F)-8
b(reeBW)0 4249 y(\(cost)32 b(function\),)d(LFU)i(\(replacemen)m(t)g(p)s
(olicy\),)f(Lo)s(cal)g(\(Ob)5 b(ject)31 b(Lo)s(cating)f(Metho)s(d\).)0
4647 y Fi(7.2.1)105 b(Pure)36 b(Hierarc)m(h)m(y)f(vs.)47
b(RedHi)141 4976 y Fp(In)26 b(normal)f(mo)s(de)h(of)g(op)s(eration,)h
(few)m(er)f(requests)g(w)m(ere)h(rejected)g(b)m(y)f(RedHi)g(than)g(b)m
(y)g(the)g(pure)f(hierarc)m(h)m(y)0 5167 y(\(see)f(Fig.)f(4a\).)40
b(T)-8 b(rivially)g(,)22 b(under)g(lo)m(w)h(system)g(load)g(\()p
Fl(\024)i Fp(120\045\),)h(the)d(n)m(um)m(b)s(er)f(of)i(rejected)f
(requests)h(is)e(v)m(ery)h(lo)m(w)0 5359 y(with)g(b)s(oth)h(arc)m
(hitectures.)39 b(Under)24 b(higher)f(load)h(\()p Fk(>)i
Fp(120\045\),)h(ho)m(w)m(ev)m(er,)g(the)e(sup)s(eriorit)m(y)d(of)j
(RedHi)f(is)f(ob)m(vious.)1905 5656 y(21)p eop
%%Page: 22 22
22 21 bop 0 99 a Fp(F)-8 b(or)36 b(example,)g(when)f(the)g(system)h
(load)f(w)m(as)g(200\045,)j(pure)c(hierarc)m(h)m(y)h(rejected)h
(168\045)h(more)e(requests)g(than)0 290 y(RedHi.)54 b(The)35
b(load)g(balancing)e(capabilit)m(y)h(of)i(RedHi)e(enabled)g(it)h(to)h
(function)d(m)m(uc)m(h)i(b)s(etter)h(under)d(higher)0
482 y(system)e(load.)141 753 y(T)-8 b(o)23 b(sim)m(ulate)e(a)i(link)d
(failure,)i(w)m(e)h(disabled)d(a)i(link)f(\(selected)i(at)g(random\))e
(connecting)i(a)f(head-end)g(to)h(a)g(one)0 945 y(lev)m(el)i(higher)f
(no)s(de)g(after)i(serving)e(9000)j(requests.)39 b(The)25
b(impact)g(of)g(this)f(failure)g(w)m(as)h(analyzed)g(b)m(y)h(comparing)
0 1137 y(the)j(p)s(erformance)f(of)h(the)g(system)g(with)f(and)g
(without)g(the)h(failure.)38 b(Fig.)29 b(4a)h(sho)m(w)m(es)f(that)g
(RedHi)f(p)s(erformed)0 1328 y(almost)f(iden)m(tically)e(with)h(and)g
(without)g(failure.)38 b(The)26 b(p)s(erformance)h(of)g(pure)f(hierarc)
m(h)m(y)-8 b(,)28 b(ho)m(w)m(ev)m(er,)h(degraded)0 1520
y(signi\014can)m(tly)34 b(due)i(to)h(the)g(link)d(failure.)56
b(An)36 b(in)m(teresting)g(observ)-5 b(ation)36 b(is)f(that)i(RedHi)e
(did)g(not)h(reject)i(an)m(y)0 1712 y(request)e(when)f
Fk(l)r(oad)g Fl(\024)f Fp(100\045)j(while)d(pure)h(hierarc)m(h)m(y)h
(rejected)g(2)p Fk(:)p Fp(5\045)h(of)f(the)h(9000)g(requests)f(arriv)m
(ed)f(after)0 1904 y(the)h(link)d(failure.)55 b(W)-8
b(e)36 b(also)g(compared)g(RedHi)e(with)h(Pure)f(hierarc)m(h)m(y)i(in)e
(the)i(presece)g(of)f(t)m(w)m(o)i(failures.)55 b(In)0
2096 y(the)32 b(presence)g(of)g(t)m(w)m(o)h(link)c(failures)h(\(not)i
(sho)m(wn)f(in)g(the)h(graph\))f(the)h(p)s(erformnce)f(of)h(RedHi)e
(still)g(remained)0 2288 y(almost)g(unc)m(hanged,)h(while)d(with)h
Fk(l)r(oad)d Fl(\024)f Fp(100\045)31 b(pure)e(hierarc)m(h)m(y)h
(rejected)i(5\045)e(of)h(the)f(9000)i(requests.)0 2686
y Fi(7.2.2)105 b(Cost)35 b(F)-9 b(unctions)0 3015 y Fp(Cost)33
b(functions)f(are)i(imp)s(ortan)m(t)e(parts)h(of)g(our)g(ob)5
b(ject)34 b(lo)s(cating)e(and)h(retriev)-5 b(al)32 b(heuristics.)47
b(The)33 b(three)g(cost)0 3207 y(functions)e(presen)m(ted)h(in)f(Sec.)i
(5)g(w)m(ere)f(compared.)47 b(Fig.)33 b(4b)f(sho)m(ws)g(that)h
Fk(R)q(atioB)5 b(W)44 b Fp(and)32 b Fk(U)10 b(ser)s(B)5
b(W)43 b Fp(consis-)0 3398 y(ten)m(tly)29 b(outp)s(erformed)f
Fk(F)13 b(r)s(eeB)5 b(W)13 b Fp(.)39 b(F)-8 b(or)30 b(example,)f(when)f
Fk(l)r(oad)e Fp(=)f(200\045,)30 b Fk(R)q(atioB)5 b(W)41
b Fp(rejected)30 b(21\045)f(and)f(80\045)0 3590 y(less)e(requests)h(as)
g(compared)g(to)h Fk(U)10 b(ser)s(B)5 b(W)38 b Fp(and)26
b Fk(F)13 b(r)s(eeB)5 b(W)13 b Fp(,)27 b(resp)s(ectiv)m(ely)-8
b(.)40 b(As)27 b(men)m(tioned)f(earlier,)h Fk(F)13 b(r)s(eeB)5
b(W)0 3782 y Fp(has)36 b(a)g(tendency)g(to)h(retriev)m(e)f(ob)5
b(jects)37 b(from)f(the)g(higher)f(lev)m(els)g(of)i(the)f(hierarc)m(h)m
(y)-8 b(.)58 b(Therefore,)37 b(more)f(links)0 3974 y(b)s(ecome)31
b(o)s(ccupied)e(to)i(retriev)m(e)g(these)g(ob)5 b(jects)31
b(resulting)d(in)h(bad)h(load)g(balancing.)0 4372 y Fi(7.2.3)105
b(Ob)6 b(ject)35 b(Lo)s(cating)g(Metho)s(ds:)47 b(Lo)s(cal)35
b(vs.)47 b(Global)141 4701 y Fp(Fig.)30 b(5a)h(depicts)f(the)g
(comparison)f(b)s(et)m(w)m(een)i(Global)e(and)h(Lo)s(cal.)40
b(W)-8 b(e)31 b(exp)s(ected)g(to)g(see)f(a)h(b)s(etter)f(p)s(erfor-)0
4893 y(mance)25 b(for)f(Global)f(since)h(it)g(attempts)h(to)g(\014nd)d
(the)j(least)f(exp)s(ensiv)m(e)g(path)g(globally)-8 b(.)38
b(Instead,)25 b(our)f(sim)m(ulation)0 5085 y(results)j(sho)m(w)g(the)h
(in)m(v)m(erse)g(to)h(b)s(e)e(true.)40 b(This)26 b(is)h(b)s(ecause)g
(Global)h(b)m(y)f(selecting)h(more)g(higher)f(lev)m(el)g(\(closer)h(to)
0 5277 y Fk(r)s(oot)p Fp(\))j(no)s(des)f(to)h(deliv)m(er)f(ob)5
b(jects)31 b(o)s(ccupies)f(more)h(links)e(\(similar)g(to)i(the)g
(problem)e(observ)m(ed)i(b)m(y)g Fk(F)13 b(r)s(eeB)5
b(W)13 b Fp(\).)1905 5656 y(22)p eop
%%Page: 23 23
23 22 bop 50 15 a
 15146677 12314374 3420651 13024788 36245749 39534837 startTexFig
 50 15 a
%%BeginDocument: bgb-loc-glo.eps


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  411   121  5991  4836 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Times-Roman /ISOLatin1Encoding 132 FMSR

1 j
c1
   0    0 6912 5184 PR
6 w
DO
4 w
SO
6 w
c0
 898 4612 mt 6254 4612 L
 898  388 mt 6254  388 L
 898 4612 mt  898  388 L
6254 4612 mt 6254  388 L
 898 4612 mt  898 4612 L
6254 4612 mt 6254 4612 L
 898 4612 mt 6254 4612 L
 898 4612 mt  898  388 L
 898 4612 mt  898 4612 L
 898 4612 mt  898 4558 L
 898  388 mt  898  442 L
 832 4765 mt 
(40) s
1434 4612 mt 1434 4558 L
1434  388 mt 1434  442 L
1368 4765 mt 
(60) s
1969 4612 mt 1969 4558 L
1969  388 mt 1969  442 L
1903 4765 mt 
(80) s
2505 4612 mt 2505 4558 L
2505  388 mt 2505  442 L
2406 4765 mt 
(100) s
3040 4612 mt 3040 4558 L
3040  388 mt 3040  442 L
2941 4765 mt 
(120) s
3576 4612 mt 3576 4558 L
3576  388 mt 3576  442 L
3477 4765 mt 
(140) s
4112 4612 mt 4112 4558 L
4112  388 mt 4112  442 L
4013 4765 mt 
(160) s
4647 4612 mt 4647 4558 L
4647  388 mt 4647  442 L
4548 4765 mt 
(180) s
5183 4612 mt 5183 4558 L
5183  388 mt 5183  442 L
5084 4765 mt 
(200) s
5718 4612 mt 5718 4558 L
5718  388 mt 5718  442 L
5619 4765 mt 
(220) s
6254 4612 mt 6254 4558 L
6254  388 mt 6254  442 L
6155 4765 mt 
(240) s
 898 4612 mt  952 4612 L
6254 4612 mt 6200 4612 L
 797 4659 mt 
(0) s
 898 4009 mt  952 4009 L
6254 4009 mt 6200 4009 L
 665 4056 mt 
(500) s
 898 3405 mt  952 3405 L
6254 3405 mt 6200 3405 L
 599 3452 mt 
(1000) s
 898 2802 mt  952 2802 L
6254 2802 mt 6200 2802 L
 599 2849 mt 
(1500) s
 898 2198 mt  952 2198 L
6254 2198 mt 6200 2198 L
 599 2245 mt 
(2000) s
 898 1595 mt  952 1595 L
6254 1595 mt 6200 1595 L
 599 1642 mt 
(2500) s
 898  991 mt  952  991 L
6254  991 mt 6200  991 L
 599 1038 mt 
(3000) s
 898  388 mt  952  388 L
6254  388 mt 6200  388 L
 599  435 mt 
(3500) s
 898 4612 mt 6254 4612 L
 898  388 mt 6254  388 L
 898 4612 mt  898  388 L
6254 4612 mt 6254  388 L
 898  388 mt  898  388 L
6254  388 mt 6254  388 L
gs 898 388 5357 4225 MR c np

gr 
 862 4612 mt  934 4612 L
 898 4576 mt  898 4648 L
 862 4576 mt  934 4648 L
 934 4576 mt  862 4648 L
1398 4612 mt 1470 4612 L
1434 4576 mt 1434 4648 L
1398 4576 mt 1470 4648 L
1470 4576 mt 1398 4648 L
1933 4612 mt 2005 4612 L
1969 4576 mt 1969 4648 L
1933 4576 mt 2005 4648 L
2005 4576 mt 1933 4648 L
2469 4612 mt 2541 4612 L
2505 4576 mt 2505 4648 L
2469 4576 mt 2541 4648 L
2541 4576 mt 2469 4648 L
3004 4612 mt 3076 4612 L
3040 4576 mt 3040 4648 L
3004 4576 mt 3076 4648 L
3076 4576 mt 3004 4648 L
3540 4574 mt 3612 4574 L
3576 4538 mt 3576 4610 L
3540 4538 mt 3612 4610 L
3612 4538 mt 3540 4610 L
4076 4323 mt 4148 4323 L
4112 4287 mt 4112 4359 L
4076 4287 mt 4148 4359 L
4148 4287 mt 4076 4359 L
4611 3855 mt 4683 3855 L
4647 3819 mt 4647 3891 L
4611 3819 mt 4683 3891 L
4683 3819 mt 4611 3891 L
5147 3196 mt 5219 3196 L
5183 3160 mt 5183 3232 L
5147 3160 mt 5219 3232 L
5219 3160 mt 5147 3232 L
5682 2286 mt 5754 2286 L
5718 2250 mt 5718 2322 L
5682 2250 mt 5754 2322 L
5754 2250 mt 5682 2322 L
6218 1294 mt 6290 1294 L
6254 1258 mt 6254 1330 L
6218 1258 mt 6290 1330 L
6290 1258 mt 6218 1330 L
gs 898 388 5357 4225 MR c np
536 -992 535 -910 536 -659 535 -468 536 -251 536 -38 535 0 536 0 
535 0 536 0 898 4612 11 MP stroke

gr 
  36   36  898 4612 FO
  36   36 1434 4612 FO
  36   36 1969 4612 FO
  36   36 2505 4612 FO
  36   36 3040 4591 FO
  36   36 3576 4438 FO
  36   36 4112 4115 FO
  36   36 4647 3498 FO
  36   36 5183 2568 FO
  36   36 5718 1648 FO
  36   36 6254  567 FO
gs 898 388 5357 4225 MR c np
DO
536 -1081 535 -920 536 -930 535 -617 536 -323 536 -153 535 -21 536 0 
535 0 536 0 898 4612 11 MP stroke

gr 
DO
5183 2665 mt 
(Global) s
5183 3328 mt 
(Local) s
/Helvetica /ISOLatin1Encoding 144 FMSR

2920 4925 mt 
(Load Percentage\(%\)) s
 545 3108 mt  -90 rotate
(Rejected Requests) s
90 rotate
/Times-Roman /ISOLatin1Encoding 132 FMSR

2676  287 mt 
(Object Locating: Global vs. Local) s
SO

end

eplot

epage
end

showpage

%%EndDocument

 endTexFig
 2068 15 a
 15146677 12314374 3420651 13024788 36245749 39534837 startTexFig
 2068 15 a
%%BeginDocument: bgb-lru-lfu.eps


% MathWorks dictionary
/MathWorks 150 dict begin

% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef

% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
/rm /rmoveto ldef
/rl /rlineto ldef
/s /show ldef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef

% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef

% orientation switch
/portraitMode 	0 def
/landscapeMode 	1 def

% coordinate system mappings
/dpi2point 0 def

% font control
/FontSize 0 def
/FMS {
	/FontSize xstore		%save size off stack
	findfont
	[FontSize 0 0 FontSize neg 0 0]
	makefont
	setfont
	}bdef

/reencode {
exch dup where
{pop load} {pop StandardEncoding} ifelse
exch
dup 3 1 roll
findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def
  currentdict
end
definefont pop
} bdef

/isroman {
findfont /CharStrings get
/Agrave known
} bdef

/FMSR {
3 1 roll 1 index
dup isroman
{reencode} {pop pop} ifelse
exch FMS
} bdef

/csm {
	1 dpi2point div -1 dpi2point div scale
	neg translate
	landscapeMode eq {90 rotate} if
	} bdef

% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4 dpi2point mul] 0 setdash } bdef

% macros for lines and objects
/L {
	lineto
	stroke
	} bdef
/MP {
	3 1 roll moveto
	1 sub {rlineto} repeat
	} bdef
/AP {
	{rlineto} repeat
	} bdef
/PP {
	closepath fill
	} bdef
/DP {
	closepath stroke
	} bdef
/MR {
	4 -2 roll moveto
	dup  0 exch rlineto
	exch 0 rlineto
	neg  0 exch rlineto
	closepath
	} bdef
/FR {
	MR stroke
	} bdef
/PR {
	MR fill
	} bdef
/L1i {
	{ currentfile picstr readhexstring pop } image
	} bdef

/tMatrix matrix def
/MakeOval {
	newpath
	tMatrix currentmatrix pop
	translate scale
	0 0 1 0 360 arc
	tMatrix setmatrix
	} bdef
/FO {
	MakeOval
	stroke
	} bdef
/PO {
	MakeOval
	fill
	} bdef

/PD {
	2 copy moveto lineto stroke
	} bdef


currentdict end def

MathWorks begin

0 cap

end

MathWorks begin
bpage

bplot

/dpi2point 12 def
portraitMode 0216 7344 csm

  411   121  5991  4836 MR c np
76 dict begin %Colortable dictionary
/c0 { 0 0 0 sr} bdef
/c1 { 1 1 1 sr} bdef
/c2 { 1 0 0 sr} bdef
/c3 { 0 1 0 sr} bdef
/c4 { 0 0 1 sr} bdef
/c5 { 1 1 0 sr} bdef
/c6 { 1 0 1 sr} bdef
/c7 { 0 1 1 sr} bdef
/Times-Roman /ISOLatin1Encoding 132 FMSR

1 j
c1
   0    0 6912 5184 PR
6 w
DO
4 w
SO
6 w
c0
 898 4612 mt 6254 4612 L
 898  388 mt 6254  388 L
 898 4612 mt  898  388 L
6254 4612 mt 6254  388 L
 898 4612 mt  898 4612 L
6254 4612 mt 6254 4612 L
 898 4612 mt 6254 4612 L
 898 4612 mt  898  388 L
 898 4612 mt  898 4612 L
 898 4612 mt  898 4558 L
 898  388 mt  898  442 L
 832 4765 mt 
(40) s
1434 4612 mt 1434 4558 L
1434  388 mt 1434  442 L
1368 4765 mt 
(60) s
1969 4612 mt 1969 4558 L
1969  388 mt 1969  442 L
1903 4765 mt 
(80) s
2505 4612 mt 2505 4558 L
2505  388 mt 2505  442 L
2406 4765 mt 
(100) s
3040 4612 mt 3040 4558 L
3040  388 mt 3040  442 L
2941 4765 mt 
(120) s
3576 4612 mt 3576 4558 L
3576  388 mt 3576  442 L
3477 4765 mt 
(140) s
4112 4612 mt 4112 4558 L
4112  388 mt 4112  442 L
4013 4765 mt 
(160) s
4647 4612 mt 4647 4558 L
4647  388 mt 4647  442 L
4548 4765 mt 
(180) s
5183 4612 mt 5183 4558 L
5183  388 mt 5183  442 L
5084 4765 mt 
(200) s
5718 4612 mt 5718 4558 L
5718  388 mt 5718  442 L
5619 4765 mt 
(220) s
6254 4612 mt 6254 4558 L
6254  388 mt 6254  442 L
6155 4765 mt 
(240) s
 898 4612 mt  952 4612 L
6254 4612 mt 6200 4612 L
 797 4659 mt 
(0) s
 898 4009 mt  952 4009 L
6254 4009 mt 6200 4009 L
 599 4056 mt 
(1000) s
 898 3405 mt  952 3405 L
6254 3405 mt 6200 3405 L
 599 3452 mt 
(2000) s
 898 2802 mt  952 2802 L
6254 2802 mt 6200 2802 L
 599 2849 mt 
(3000) s
 898 2198 mt  952 2198 L
6254 2198 mt 6200 2198 L
 599 2245 mt 
(4000) s
 898 1595 mt  952 1595 L
6254 1595 mt 6200 1595 L
 599 1642 mt 
(5000) s
 898  991 mt  952  991 L
6254  991 mt 6200  991 L
 599 1038 mt 
(6000) s
 898  388 mt  952  388 L
6254  388 mt 6200  388 L
 599  435 mt 
(7000) s
 898 4612 mt 6254 4612 L
 898  388 mt 6254  388 L
 898 4612 mt  898  388 L
6254 4612 mt 6254  388 L
 898  388 mt  898  388 L
6254  388 mt 6254  388 L
gs 898 388 5357 4225 MR c np

gr 
 862 4612 mt  934 4612 L
 898 4576 mt  898 4648 L
 862 4576 mt  934 4648 L
 934 4576 mt  862 4648 L
1398 4612 mt 1470 4612 L
1434 4576 mt 1434 4648 L
1398 4576 mt 1470 4648 L
1470 4576 mt 1398 4648 L
1933 4570 mt 2005 4570 L
1969 4534 mt 1969 4606 L
1933 4534 mt 2005 4606 L
2005 4534 mt 1933 4606 L
2469 4265 mt 2541 4265 L
2505 4229 mt 2505 4301 L
2469 4229 mt 2541 4301 L
2541 4229 mt 2469 4301 L
3004 3740 mt 3076 3740 L
3040 3704 mt 3040 3776 L
3004 3704 mt 3076 3776 L
3076 3704 mt 3004 3776 L
3540 3170 mt 3612 3170 L
3576 3134 mt 3576 3206 L
3540 3134 mt 3612 3206 L
3612 3134 mt 3540 3206 L
4076 2570 mt 4148 2570 L
4112 2534 mt 4112 2606 L
4076 2534 mt 4148 2606 L
4148 2534 mt 4076 2606 L
4611 2109 mt 4683 2109 L
4647 2073 mt 4647 2145 L
4611 2073 mt 4683 2145 L
4683 2073 mt 4611 2145 L
5147 1723 mt 5219 1723 L
5183 1687 mt 5183 1759 L
5147 1687 mt 5219 1759 L
5219 1687 mt 5147 1759 L
5682 1325 mt 5754 1325 L
5718 1289 mt 5718 1361 L
5682 1289 mt 5754 1361 L
5754 1289 mt 5682 1361 L
6218  914 mt 6290  914 L
6254  878 mt 6254  950 L
6218  878 mt 6290  950 L
6290  878 mt 6218  950 L
gs 898 388 5357 4225 MR c np
536 -411 535 -398 536 -386 535 -461 536 -600 536 -570 535 -525 536 -305 
535 -42 536 0 898 4612 11 MP stroke

gr 
  36   36  898 4612 FO
  36   36 1434 4612 FO
  36   36 1969 4612 FO
  36   36 2505 4612 FO
  36   36 3040 4612 FO
  36   36 3576 4593 FO
  36   36 4112 4468 FO
  36   36 4647 4234 FO
  36   36 5183 3904 FO
  36   36 5718 3449 FO
  36   36 6254 2953 FO
gs 898 388 5357 4225 MR c np
DO
536 -496 535 -455 536 -330 535 -234 536 -125 536 -19 535 0 536 0 
535 0 536 0 898 4612 11 MP stroke

gr 
DO
4647 2212 mt 
(LRU) s
4647 4384 mt 
(LFU) s
/Helvetica /ISOLatin1Encoding 144 FMSR

2920 4925 mt 
(Load Percentage\(%\)) s
 545 3108 mt  -90 rotate
(Rejected Requests) s
90 rotate
/Times-Roman /ISOLatin1Encoding 132 FMSR

2651  287 mt 
(Replacement Policy: LRU vs. LFU) s
SO

end

eplot

epage
end

showpage

%%EndDocument

 endTexFig
 443 1688 a Fp(a.)41 b(Ob)5 b(ject)30 b(Lo)s(cating)h(Metho)s(ds)1107
b(b.)40 b(Replacemen)m(t)32 b(P)m(olicy)1154 1877 y(Figure)e(5:)41
b(Other)30 b(t)m(w)m(o)i(sets)e(of)h(exp)s(erimen)m(ts)0
2251 y(This)k(means)i(that)h(the)f(system)g(will)d(use)j(more)g
(resources)g(to)h(deliv)m(er)e(the)h(same)g(n)m(um)m(b)s(er)f(of)h(ob)5
b(jects.)61 b(Al-)0 2443 y(though)24 b(these)g(resources)g(w)m(ere)h
(less)e(loaded)g(\(according)i(to)f(the)h(cost)g(function\))e(at)h(the)
g(time)g(that)h(the)f(request)0 2635 y(arriv)m(ed,)38
b(using)e(more)i(resources)f(to)h(deliv)m(er)e(ob)5 b(jects)38
b(in)e(the)i(long)f(run)e(yields)h(more)h(rejections.)62
b(As)37 b(a)h(re-)0 2827 y(sult,)33 b(Lo)s(cal)f(outp)s(erformed)g
(Global)g(\(e.g.,)k(47\045)d(less)g(rejection)g(with)e(Lo)s(cal)i(as)g
(compared)g(to)h(Global)e(when)0 3019 y Fk(l)r(oad)26
b Fp(=)f(180\045\).)0 3417 y Fi(7.2.4)105 b(Replacemen)m(t)35
b(P)m(olicy:)48 b(LR)m(U)36 b(&)f(LFU)0 3746 y Fp(Finally)-8
b(,)38 b(w)m(e)h(compared)e(the)h(p)s(erformance)g(of)g(the)g
(replacemen)m(t)g(p)s(olicies.)61 b(A)38 b(large)g(margin)e(of)i
(di\013erence)0 3938 y(b)s(et)m(w)m(een)27 b(the)f(p)s(erformance)g(of)
g(LR)m(U)h(and)e(LFU)i(w)m(as)f(observ)m(ed)h(\(see)g(Fig.)f(5b\).)40
b(This)24 b(is)i(b)s(ecause)g(LFU)g(is)g(v)m(ery)0 4129
y(consisten)m(t)31 b(with)e(the)h(emplo)m(ymen)m(t)h(of)g(Zipf)7
b('s)28 b(la)m(w.)141 4400 y(W)-8 b(e)36 b(did)d(not)i(compare)g(the)g
(p)s(erformance)f(of)h(the)g(three)g(resource)f(reserv)-5
b(ation)35 b(strategies)g(discussed)e(in)0 4592 y(Sec.)26
b(5.3.)40 b(W)-8 b(e)26 b(w)m(ere)g(not)f(able)g(to)h(in)m(v)m
(estigate)g(the)f(p)s(erformance)g(of)g(these)h(strategies)g(due)e(to)i
(the)g(fact)g(that)f(w)m(e)0 4784 y(assumed)h(a)g(zero)h(message)h
(dela)m(y)e(in)f(our)h(sim)m(ulation)e(mo)s(del.)38 b(Curren)m(tly)-8
b(,)26 b(w)m(e)h(are)f(mo)s(difying)e(our)i(sim)m(ulation)0
4976 y(mo)s(del)j(to)i(incorp)s(orate)f(these)h(message)g(dela)m(ys.)
1905 5656 y(23)p eop
%%Page: 24 24
24 23 bop 0 99 a Fo(8)135 b(Conclusions)0 459 y Fp(In)23
b(this)g(pap)s(er,)h(w)m(e)g(prop)s(osed)f(a)h(redundan)m(t)e(hierarc)m
(hical)h(\(RedHi\))g(arc)m(hitecture)i(for)e(distributed)e(con)m(tin)m
(uous)0 651 y(media)28 b(serv)m(ers.)41 b(W)-8 b(e)30
b(sho)m(w)m(ed)f(that)h(RedHi)e(has)h(a)g(b)s(etter)h(fault-tolerance)f
(and)f(load)h(balancing)f(capabilities.)0 843 y(With)44
b(RedHi,)j(the)d(task)h(of)f(lo)s(cating)g(an)g(ob)5
b(ject)45 b(and)e(the)i(decision)d(to)j(where)f(to)h(retriev)m(e)f(it)g
(from)g(are)0 1035 y(p)s(erformed)34 b(in)h(a)h(distributed)c(manner.)
56 b(Distributed)34 b(ob)5 b(ject)36 b(managemen)m(t)i(eliminates)c
(the)i(p)s(ossibilit)m(y)c(of)0 1227 y(b)s(ottlenec)m(ks)f(and)f(mak)m
(es)h(the)f(system)h(more)f(fault-toleran)m(t.)141 1497
y(W)-8 b(e)44 b(conducted)e(a)h(set)g(of)f(exp)s(erimen)m(ts)f(to)j
(illustrate)c(RedHi's)i(fault-tolerance)h(and)e(load)h(balancing)0
1689 y(capabilities.)h(W)-8 b(e)33 b(observ)m(ed)f(that)h(under)d(the)i
(same)h(load)e(conditions,)g(RedHi)g(can)h(serv)m(e)h(more)f(requests)g
(as)0 1881 y(compared)e(to)i(the)e(pure)f(hierarc)m(h)m(y)-8
b(.)41 b(W)-8 b(e)32 b(also)e(observ)m(ed)h(that)g(a)f(link)f(failure)f
(degraded)i(the)h(p)s(erformance)f(of)0 2073 y(the)h(pure)e(hierarc)m
(h)m(y)h(while)e(ha)m(ving)i(almost)h(no)f(e\013ect)i(on)e(the)h(p)s
(erformance)e(of)i(RedHi.)141 2343 y(Other)25 b(exp)s(erimen)m(ts)f(w)m
(ere)i(p)s(erformed)e(to)i(gain)f(some)h(insigh)m(ts)e(ab)s(out)h
(RedHi.)38 b(When)25 b(comparing)g(ob)5 b(ject)0 2535
y(lo)s(cating)36 b(metho)s(ds,)h(it)f(w)m(as)g(observ)m(ed)h(that)f(Lo)
s(cal)g(consisten)m(tly)g(outp)s(erformed)f(Global.)58
b(Moreo)m(v)m(er,)40 b(LFU)0 2727 y(replacemen)m(t)31
b(p)s(olicy)f(w)m(as)h(found)f(to)h(b)s(e)g(sup)s(erior)d(to)k(LR)m(U.)
g(Out)e(of)h(the)h(three)f(cost)h(functions)d(presen)m(ted)i(in)0
2919 y(this)e(pap)s(er,)h Fk(R)q(atioB)5 b(W)42 b Fp(sho)m(w)m(ed)31
b(the)f(b)s(est)g(p)s(erformance)g(while)e Fk(F)13 b(r)s(eeB)5
b(W)43 b Fp(w)m(as)31 b(the)f(w)m(orst.)141 3189 y(This)38
b(study)g(can)h(b)s(e)g(extended)g(in)f(man)m(y)h(w)m(a)m(ys.)68
b(As)40 b(short)e(term)i(plans,)g(w)m(e)g(in)m(tend)e(to)i(consider)e
(the)0 3381 y(net)m(w)m(ork)i(dela)m(y)-8 b(.)68 b(Consequen)m(tly)-8
b(,)41 b(w)m(e)e(can)h(compare)g(the)f(impact)g(of)g(our)g(resource)g
(reserv)-5 b(ation)39 b(strategies)0 3573 y(\(Sequen)m(tial,)28
b(Optimistic,)e(and)i(P)m(essimistic\).)38 b(Once)28
b(net)m(w)m(ork)h(dela)m(y)f(is)f(in)m(tro)s(duced,)g(w)m(e)h(also)g
(in)m(tend)f(to)i(add)0 3765 y(a)39 b(new)g(cost)h(function)e(whic)m(h)
g(tak)m(es)i(in)m(to)f(the)h(accoun)m(t)g(the)g(length)e(of)h(a)h(path)
f(for)g(ob)5 b(ject)40 b(retriev)-5 b(al.)66 b(W)-8 b(e)0
3957 y(also)33 b(plan)e(to)j(design)e(and)g(ev)-5 b(aluate)33
b(p)s(olicies)e(to)i(study)f(the)h(impact)g(of)g(emplo)m(ying)f(the)h
(adaptiv)m(e)g(bu\013ering)0 4149 y(mec)m(hanisms)26
b(on)h(the)g(system)h(p)s(erformance.)39 b(Finally)-8
b(,)26 b(w)m(e)i(in)m(tend)e(to)h(in)m(v)m(estigate)i(partial)d(ob)5
b(ject)28 b(replication)0 4341 y(and)j(migration)g(as)h(w)m(ell)f(as)h
(dynamic)f(request)h(migration.)44 b(As)32 b(a)g(long)g(term)g(plan,)f
(w)m(e)h(w)m(an)m(t)h(to)g(in)m(v)m(estigate)0 4533 y(new)26
b(c)m(hallenges)g(in)m(tro)s(duced)f(b)m(y)h(other)h(applications)d
(when)h(assuming)g(RedHi.)39 b(F)-8 b(or)27 b(example,)g(the)g(temp)s
(oral)0 4724 y(relationships)40 b(in)m(tro)s(duced)g(b)m(y)j(digital)e
(editing)g(applications)f([CGS95)q(])j(or)f(query)g(scripts)f(in)m(tro)
s(duced)g(b)m(y)0 4916 y(MM-DBMS)32 b([SDG97)q(])f(applications.)1905
5656 y(24)p eop
%%Page: 25 25
25 24 bop 0 99 a Fo(References)0 280 y Fq([BP96])179
b(C.)26 b(Bisdikian)g(and)f(B.)g(P)n(atel.)34 b(Cost-Based)27
b(Program)e(Allo)r(cation)i(for)f(Distributed)e(Multimedia-on-Demand)f
(Sys-)403 372 y(tems.)34 b Fa(IEEE)27 b(MultiMe)l(dia)p
Fq(,)f(pages)g(62{72,)i(F)-6 b(all)26 b(1996.)0 496 y([CGS95])127
b(S.)27 b(Chaudh)n(uri,)h(S.)f(Ghandeharizadeh,)h(and)f(C.)h(Shahabi.)
38 b(Av)n(oiding)27 b(retriev)l(al)h(con)n(ten)n(tion)f(for)h(comp)r
(osite)f(m)n(ulti-)403 588 y(media)e(ob)t(jects.)36 b(In)25
b Fa(Pr)l(o)l(c)l(e)l(e)l(dings)30 b(of)d(the)h(International)h(Confer)
l(enc)l(e)g(on)f(V)-6 b(ery)28 b(L)l(ar)l(ge)h(Datab)l(ases)p
Fq(,)g(1995.)0 712 y([CL93])182 b(Huang-Jen)20 b(Chen)h(and)f(Thomas)h
(D.)g(C.)g(Little.)27 b(Ph)n(ysical)21 b(storage)h(organizations)h(for)
e(time-dep)r(enden)n(t)d(m)n(ultimedia)403 803 y(data.)35
b(In)25 b Fa(F)n(ODO)p Fq(,)h(1993.)0 928 y([D)n(VV94])112
b(D.)38 b(Delo)r(ddere,)k(W.)d(V)-6 b(erbiest,)41 b(and)d(H.)g(V)-6
b(erhille.)72 b(In)n(teractiv)n(e)37 b(Video)i(on)f(Demand.)70
b Fa(IEEE)39 b(Communic)l(ation)403 1019 y(Magazine)p
Fq(,)27 b(pages)g(82{88,)g(Ma)n(y)f(1994.)0 1144 y([GDS95])123
b(S.)22 b(Ghandeharizadeh,)i(A.)e(Dash)n(ti,)h(and)e(C.)i(Shahabi.)28
b(A)22 b(Pip)r(elining)h(Mec)n(hanism)f(to)g(Minimize)h(the)e(Latency)h
(Time)403 1235 y(in)k(Hierarc)n(hical)h(Multimedia)f(Storage)g
(Managers.)36 b Fa(Computer)29 b(Communic)l(ations)p
Fq(,)e(Marc)n(h)f(1995.)0 1360 y([GJ79])186 b(M.)29 b(Garey)g(and)f(D.)
h(Johnson.)43 b Fa(Computers)32 b(and)e(Intr)l(actability:)42
b(A)30 b(Guide)h(to)f(the)h(The)l(ory)h(of)d(NP-Completeness)p
Fq(.)403 1451 y(W.H.)d(F)-6 b(reeman)25 b(and)g(Compan)n(y)-6
b(,)25 b(New)g(Y)-6 b(ork,)26 b(1979.)0 1576 y([GS94])182
b(S.)18 b(Ghandeharizadeh)g(and)g(C.)g(Shahabi.)j(On)c(Multimedia)h
(Rep)r(ositories,)k(Personal)d(Ccomputers,)g(and)f(Hierarc)n(hical)403
1667 y(Storage)27 b(Systems.)33 b(In)25 b Fa(Pr)l(o)l(c)l(e)l(e)l
(dings)30 b(of)d(A)n(CM)g(Multime)l(dia)g(Confer)l(enc)l(e)p
Fq(,)h(1994.)0 1791 y([GVK)199 1760 y Ff(+)250 1791 y
Fq(95])56 b(D.)26 b(J.)g(Gemmell,)f(H.)g(M.)h(Vin,)g(D.)f(D.)h
(Kandlur,)f(P)-6 b(.)25 b(V.)h(Rangan,)g(and)f(L.)g(A.)h(Ro)n(w)n(e.)34
b(Multimedia)26 b(Storage)g(Serv)n(ers:)403 1883 y(A)g(Tutorial.)35
b Fa(IEEE)27 b(Computer)p Fq(,)h(Ma)n(y)d(1995.)0 2007
y([GZS)171 1976 y Ff(+)222 2007 y Fq(97])84 b(S.)30 b(Ghandeharizadeh,)
i(R.)e(Zimmermann,)e(W.)i(Shi,)h(R.)f(Rejaie,)i(D.)e(Ierardi,)i(and)e
(T.W.)h(Li.)47 b(Mitra:)d(A)30 b(Scalable)403 2099 y(Con)n(tin)n(uous)c
(Media)h(Serv)n(er.)33 b Fa(Kluwer)28 b(Multime)l(dia)f(T)-6
b(o)l(ols)28 b(and)g(Applic)l(ations)p Fq(,)f(Jan)n(uary)e(1997.)0
2223 y([HLLD97])72 b(Jen)n(w)n(ei)34 b(Hsieh,)h(Meng)r(jou)g(Lin,)g
(Jonathan)e(C.L.)h(Liu,)h(and)e(Da)n(vid)f(H.C.)i(Du.)56
b(Performance)33 b(of)h(a)g(mass)e(storage)403 2314 y(system)21
b(for)i(video-on-demand.)i Fa(T)-6 b(o)25 b(app)l(e)l(ar)g(on)f
(Journal)h(of)e(Par)l(al)t(lel)h(and)g(Distribute)l(d)i(Computing)e(on)
g(Multime)l(dia)403 2406 y(Pr)l(o)l(c)l(essing)30 b(and)e(T)-6
b(e)l(chnolo)l(gy)p Fq(,)27 b(1997.)0 2530 y([IA93])199
b(R.)31 b(Izmailo)n(v)f(and)g(E.)g(Ay)n(anoglu.)49 b(Prioriy)31
b(Statical)g(Multiplexing)g(of)g(Mixed)g(VBR)f(Video)g(and)g(CBR)h
(Tra\016c)g(in)403 2622 y(B-ISDN/ATM)25 b(With)h(a)g(Threshold)g
(Algorithm.)34 b(In)25 b Fa(IEEE)i(INF)n(OCOM)p Fq(,)e(Marc)n(h)h
(1993.)0 2746 y([LLQW96])50 b(Victor)29 b(O.)e(K.)h(Li,)h(W)-6
b(anjiun)28 b(Liao,)i(Xiao)n(xin)e(Qiu,)g(and)g(Eric)g(W.)h(M.)f(W)-6
b(ong.)41 b(Performance)29 b(Mo)r(del)g(of)f(In)n(teractiv)n(e)403
2838 y(Video-on-Demand)c(systems.)34 b Fa(IEEE)27 b(Journal)h(on)g
(Sele)l(cte)l(d)h(A)n(r)l(e)l(as)g(in)e(Communic)l(ations)p
Fq(,)g(August)e(1996.)0 2962 y([LPS94])142 b(P)-6 b(.)28
b(Lougher,)g(D.)f(P)n(egler,)i(and)d(D.)h(Shepherd.)38
b(Scalable)28 b(Storage)g(Serv)n(ers)e(for)i(Digital)h(Audio)d(and)h
(Video.)39 b(In)26 b Fa(IEE)403 3053 y(International)j(Confer)l(enc)l
(e)g(on)e(Stor)l(age)j(and)d(R)l(e)l(c)l(or)l(ding)i(Systems)g(1994)p
Fq(,)e(Univ)n(ersit)n(y)d(of)i(Keele,)h(Keele,)f(UK,)f(April)403
3145 y(1994.)0 3269 y([L)-9 b(V94])188 b(T.)29 b(Little)f(and)f(D.)g(V)
-6 b(enk)l(atesh.)39 b(Prosp)r(ects)29 b(for)f(in)n(tractiv)n(e)g
(video-on-demand.)38 b Fa(IEEE)28 b(MultiMe)l(dia)p Fq(,)g(pages)h
(14{24,)403 3361 y(F)-6 b(all)27 b(1994.)0 3485 y([MNO)209
3453 y Ff(+)260 3485 y Fq(97])46 b(Martin,)33 b(P)-6
b(.S.)31 b(Nara)n(y)n(an,)h(B.)g(Ozden,)f(R.)g(Rastogi,)j(and)c(A.)h
(Silb)r(ersc)n(hatz.)50 b(The)31 b(Fellini)h(m)n(ultimedia)d(storage.)
51 b Fa(to)403 3576 y(app)l(e)l(ar)29 b(Journal)g(of)e(Digital)g(Libr)l
(aries)p Fq(,)g(1997.)0 3701 y([NPSS95])89 b(J.)31 b(Nussbaumer,)f(B.)g
(P)n(atel,)i(F.)e(Sc)n(ha\013a,)h(and)e(J.)i(Sterb)r(enz.)46
b(Net)n(w)n(ork)29 b(Requiremen)n(ts)f(for)j(In)n(teractiv)n(e)e(Video)
h(on)403 3792 y(Demand.)j Fa(IEEE)27 b(Jornal)i(on)e(Sele)l(cte)l(d)i
(A)n(r)l(e)l(as)g(in)e(Communic)l(ations)p Fq(,)g(13\(5\):779{787,)j
(June)c(1995.)0 3917 y([NS94])184 b(J.)24 b(Nussbaumer)e(and)g(F.)i(Sc)
n(ha\013a.)30 b(Capacit)n(y)23 b(Analysis)g(of)h(CATV)f(for)h
(On-Demand)c(Multimedia)k(Distribution.)30 b(In)403 4008
y Fa(First)f(ISMM)d(International)j(Confer)l(enc)l(e)g(on)f
(Ditrtribute)l(d)h(Multime)l(dia)e(System)i(Applic)l(aions)p
Fq(,)d(August)f(1994.)0 4133 y([Pry95])162 b(M.)32 b(Pryc)n(k)n(er.)51
b Fa(Asynchr)l(onous)36 b(Tr)l(ansfer)d(Mo)l(de)h(:Solution)e(for)h(Br)
l(o)l(adb)l(and)i(ISDN)p Fq(.)51 b(Pren)n(tice)32 b(Hall)g(In)n
(ternational)403 4224 y(UK,)26 b(1995.)0 4349 y([RRM)205
4317 y Ff(+)255 4349 y Fq(93])51 b(D.)34 b(Reiniger,)i(D.)d(Ra)n(yc)n
(haudh)n(uri,)h(B.)g(Melamed,)i(B.)e(Sengupta,)h(and)e(J.)h(Hill.)58
b(Statical)34 b(Multiplexing)g(of)h(VBR)403 4440 y(MPEG)27
b(Compressed)f(Video)g(on)f(ATM)h(Net)n(w)n(ork.)34 b(In)25
b Fa(IEEE)i(INF)n(OCOM)p Fq(,)e(Marc)n(h)h(1993.)0 4564
y([R)-9 b(VR92])122 b(P)-6 b(.)26 b(Rangan,)g(H.)g(Vin,)f(and)h(S.)f
(Ramanathan.)34 b(Designing)26 b(an)g(On-Demand)d(Multimeida)j
(Service.)35 b Fa(IEEE)27 b(Commu-)403 4656 y(nic)l(ations)i(Magazine)p
Fq(,)d(30\(7\),)h(July)f(1992.)0 4780 y([SDG97])123 b(C.)27
b(Shahabi,)e(A.)h(Dash)n(ti,)g(and)f(S.)h(Ghandeharizadeh.)34
b(Pro\014le)27 b(a)n(w)n(are)g(retriev)l(al)f(optimizer)f(for)i(con)n
(tin)n(uous)e(media.)403 4872 y Fa(submitte)l(d)k(to)g(VLDB)p
Fq(,)c(1997.)0 4996 y([Sim96])156 b(Errol)30 b(Simon.)41
b Fa(Distribute)l(d)32 b(information)e(systems)h(:)40
b(fr)l(om)30 b(client/server)i(to)f(distribute)l(d)h(multime)l(dia)p
Fq(.)42 b(McGra)n(w-)403 5087 y(Hill,)27 b(1996.)1905
5656 y Fp(25)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF



From charley@catarina.usc.edu Tue Apr  8 14:54:23 1997
Return-Path: <charley@catarina.usc.edu>
Received: from usc.edu (usc.edu [128.125.253.136])
	by pollux.usc.edu (8.8.4/8.8.4/usc) with ESMTP
	id OAA03614 for <cstr@cs.usc.edu>; Tue, 8 Apr 1997 14:54:08 -0700 (PDT)
Received: from catarina.usc.edu (catarina.usc.edu [128.125.51.47])
	by usc.edu (8.8.4/8.7.2/usc) with SMTP
	id OAA22020 for <cstr@usc.edu>; Tue, 8 Apr 1997 14:53:57 -0700 (PDT)
Received: from manhattan.usc.edu (manhattan.usc.edu [128.125.51.74]) by catarina.usc.edu (8.6.10/8.6.9) with SMTP id OAA04243 for <cstr@usc.edu>; Tue, 8 Apr 1997 14:53:53 -0700
Message-Id: <199704082153.OAA04243@catarina.usc.edu>
X-Authentication-Warning: catarina.usc.edu: Host manhattan.usc.edu didn't use HELO protocol
X-Mailer: exmh version 1.6 4/21/95
To: cstr@usc.edu
Subject: Techical Report Submission
From: Charley Liu <charley@catarina.usc.edu>
Reply-To: charley@catarina.usc.edu
X-Phone: +1 213 740 7287
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Date: Tue, 08 Apr 1997 14:53:47 -0700
Sender: charley@catarina.usc.edu
Status: RO
X-Status: 

a) Title : Local Error Recovery in SRM : Comparison of Two Approaches

b) Authors : Ching-Gung Liu (USC),
             Deborah Estrin (USC/ISI),
             Scott Shenker (Xerox),
             Lixia Zhang (UCLA/Xerox)

c) Number of Pages : 23

d) Keywords : SRM,
              Scalable Reliable Multicast,
              reliable multicast,
              local error recovery,
              local recovery group,
              error fingerprint

e) Abstract (text or latex) :

SRM is a generic framework for reliable multicast delivery.  In order to
maximize the collaboration among the group members in error recovery,
both retransmission requests and replies are multicast to the entire
group. SRM uses random timers to effectively suppress duplicate requests
and replies. However, a few members with frequent losses can still cause
frequent retransmissions to all the group members.

To further improve the scalability of SRM, one must localize the scope
of error recovery traffic. In this paper we present two approaches to
local recovery: hop-based scope control and use of local recovery groups.
The first approach uses hop count to limit the distance requests and
replies travel, whereas the second approach confines error recovery traffic to
be within local recovery groups.
The local recovery groups and hop count settings
are automatically created and
dynamically adjusted based on observed loss patterns. We use simulation
experiments to examine the performance of both approaches.

f) Paper (postscript) or a pointer to an ftp location of the paper :

%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: sigcomm97.dvi
%%Pages: 23
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSCommandLine: dvips sigcomm97
%DVIPSParameters: dpi=600, compressed, comments removed
%DVIPSSource:  TeX output 1997.04.08:1438
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 40258431 52099146 1000 600 600 (sigcomm97.dvi)
@start /Fa 1 1 df<B712C0A322037A8D30>0 D E /Fb 2 121
df<1338137CA2137813701300A7EA0780EA1FC0EA38E01230EA60F0EAC1E0A3EA03C0A3
EA0780A2EA0F0013041306EA1E0CA21318121CEA1E70EA0FE0EA07800F237DA116>105
D<3801F01E3907FC7F80390E1CE1C038180F8100301383007013071260EC0380D8001EC7
FCA45BA21580003014C0397878018012F8EC030038F0FC0638E19C1C387F0FF8381E03E0
1A177D9523>120 D E /Fc 2 89 df<BB12FC86A3D87FC0C9001F7FF0007F6C6C17076C
6C050113806C6CEF007F1A1F6C6CF00FC06C6C18076C6C1803F201E06C6D17006D6C1860
013F19706E18306D7E6D6C18181B006D7E6D7E6D7EA26D7F6E7E6E7EA26E7E6E7E6E7EA2
6E7E6E7E80826F7E6F7EA26F7E6F7E6F5A5EA24B5A5E4BCBFC153E157E5D5D4A5A4A5A14
075D4A5A4ACCFC143E147E147C5C4948181801031930495A4A18704948186049CC12E049
1801017EF003C0017C180749180F4848F01F800003197F49EF01FF484805071300484817
3F48CA000FB5FC48BA5AA25ABB5AA24D537B7F58>80 D<BF12E08AA38A6C90CCFC090080
6C6D19076C6D07007F6C6D1A1F1D076C6DF201FF6C6D747E6C6DF33F801E0F6C6D1B076D
6CF303C06D6D1A01F600E06D7F6D6D1B706D1D30816D6D1B186D6D1B007F816E7E6E7FA2
6E7F6E7F6E7FA26E7F6E7F6E7FA26F7E6F7F6F7FA26F7F6F7F81836F7F6F7F167F83707F
707F8284707F707FA2707F82715A60173F715A604D5A4DCDFC17FEA24C5A4C5A4C5A4C5A
4C5A5F163F4CCEFC16FE4B5A4B5A4B5AA24B5A4B5A4B5A4BCFFC15FEA24A5A4A5A4A481B
184A481B304A5A4B1B70023F1C604ACF12E002FE1B014948F303C049481B074948F30F80
1E1F49481B7F4948F3FF0049481A0349CE120F01FEF37FFEF403FF48481A7F4848077FB5
5A48BEFC48655AA248655ABFFC666D747B7F78>88 D E /Fd 2 113
df<DB0FF81318DB7FFF13380203B5EAC078913A0FFC03E0F091393FC000F102FFC7123B
D901FC141FD907F815E04948140F49481407EB3F80017F16C049C81203485A5B00031780
485A485AA248481600A2485A94C7FC127F5BA312FF90CBFCA4480207B512C05DA2923900
07F8005FA2160FA25F127F161FA26C6C5D163F6C7E6C6C4A5A6C6C14FF6C6CEB01CFD801
FEEB07872800FFC03F07C7FC90393FFFFC03010F01F0C8FC0101138035377CB43C>71
D<011F131F90397FC07FE09039E3E1E0F09039C3E380783A01C1F7007CD981FE133CD983
FC133E00035BEB03F0163FEA0707120600025B1200010F147F167E5CA2011F14FE16FC5C
A2013FEB01F8A291380003F016E0491307ED0FC002801380ED1F009038FFC03E9038FEE0
F89038FC7FE0EC1F80000190C8FCA25BA21203A25BA21207A25BB57EA3283083A027>
112 D E /Fe 43 122 df<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0
EA07C00F0F788E1F>46 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003B3B3AD
B712FCA5264177C038>49 D<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC0313
FE3A0FE0007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F17F8
81A46C5A6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A4B5A
4A90C7FC4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F0495A49
5A49C8FC017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<ECFF
F0010713FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D138013
FE001F16C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F1380902607
FFFEC7FC15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A217F8
A3EA0FC0EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81FF049
1300D80FFEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>I<16
3FA25E5E5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E147E
147C14F8EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B48C7
FC123E5A12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<0007150301E0
143F01FFEB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF001C1
B5FC01C714C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C0497F6C
4815E0C8FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B007EC7
4813C0123E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D013F14
80010F01FCC7FC010113C02D427BC038>I<4AB47E021F13F0027F13FC49B6FC01079038
807F8090390FFC001FD93FF014C04948137F4948EBFFE048495A5A1400485A120FA24848
6D13C0EE7F80EE1E00003F92C7FCA25B127FA2EC07FC91381FFF8000FF017F13E091B512
F89039F9F01FFC9039FBC007FE9039FF8003FF17804A6C13C05B6F13E0A24915F0A317F8
5BA4127FA5123FA217F07F121FA2000F4A13E0A26C6C15C06D4913806C018014006C6D48
5A6C9038E01FFC6DB55A011F5C010714C0010191C7FC9038003FF02D427BC038>I<121E
121F13FC90B712FEA45A17FC17F817F017E017C0A2481680007EC8EA3F00007C157E5E00
785D15014B5A00F84A5A484A5A5E151FC848C7FC157E5DA24A5A14035D14074A5AA2141F
5D143FA2147F5D14FFA25BA35B92C8FCA35BA55BAA6D5A6D5A6D5A2F447AC238>I<DCFF
F01470031F01FF14F04AB6EAE0010207EDF803023FEDFE0791B539E001FF0F4949C7EA3F
9F010701F0EC0FFF4901C0804990C87E4948814948814948167F4849163F4849161F5A4A
160F485B19074890CAFC19035A5BA2007F1801A34994C7FC12FFAE127F7F1AF0A2123FA2
7F6C18011AE06C7F19036C6D17C06E16077E6C6DEE0F806C6DEE1F006D6C5E6D6C167E6D
6C6C5D6D6D4A5A6D01F0EC07F0010101FEEC1FE06D903AFFF001FF80023F90B6C7FC0207
15FC020115F0DA001F1480030001F8C8FC44467AC451>67 D<B9FC18F018FE727E19E026
003FFEC7001F13F805017F9438003FFF060F7F727F727F727F84737E737EA2737EA2737E
A21B80A2851BC0A51BE0AD1BC0A51B8061A21B006162193F624F5A19FF624E5B06075B4E
5B063F90C7FC4DB45A050F13F8BA5A19C04EC8FC18F095C9FC4B447CC356>I<BA12F8A4
85D8001F90C71201EF003F180F180318011800A2197E193EA3191EA21778A285A405F890
C7FCA316011603161F92B5FCA5ED001F160316011600A2F101E01778A2F103C0A494C7FC
1907A21A80A2190FA2191FA2193FF17F0061601807181F4DB5FCBBFC61A443447DC34A>
I<DCFFF01470031F01FF14F04AB6EAE0010207EDF803023FEDFE0791B539E001FF0F4949
C7EA3F9F010701F0EC0FFF4901C0804990C87E4948814948814948167F4849163F484916
1F5A4A160F485B19074890CAFC19035A5BA2007F1801A34994C8FC12FFAD057FB612F012
7F7FA3003FDC0001EBF000A27F7EA26C7FA26C7F807E6C7F6C7F6D7E6D6C5D6D6C7E6D6D
5C6D01F05C010101FE143F6D903AFFF001FF9F023F90B6120F0207EDFC030201EDF000DA
001F02C01330030001FCC9FC4C467AC458>71 D<B7D88003B612FEA526003FFEC9EBF800
B3A791B9FCA54AC9FCB3AAB7D88003B612FEA54F447CC358>I<0107B7FCA590C7001F13
00B3B3A9EA1FE0487E487EA2487EA44B5AA26C48495A495C6C4813FF6C48485B260FFC07
13C06CB65A6C4AC7FCC66C13F8010F138030457DC33A>74 D<B712F0A526003FFECAFCB3
B1F00780A4180F1900A460A360A2187EA218FE170117031707171F177FEE03FFB95AA539
447CC343>76 D<B500FE067FB512806E95B6FCA26F5EA2D8003F50C7FC013D6DEE03DFA2
013C6DEE079FA26E6CEE0F1FA26E6C161EA26E6C163CA36E6C1678A26E6C16F0A26E6DEC
01E0A26E6DEC03C0A36E6DEC0780A26F6CEC0F00A26F6C141EA26F6C5CA36F6C5CA26F6C
5CA26F6D485AA26F6D485AA26F6D485AA3706C48C7FCA293383FF81EA2706C5AA2706C5A
A3706C5AA2705BA2705BA2705BA2B6057FB6128071C7FCA2173E171C61447CC36A>I<B6
4BB512FE8181A281D8003F6D91C7EA780081013D7F81133C6E7E6E7F6E7F6E7F6E7F8280
6E7F6E7F6F7E6F7F83816F7F6F7F6F7F6F7F6F7F8382707F707F707F707F8482707F707F
717E7113807113C019E0837113F07113F87113FC7113FE19FF847213F884848484A28484
197F193F191FA2190F1907B61603190119001A78A24F447CC358>I<923807FFC092B512
FE0207ECFFC0021F15F091267FFE0013FC902601FFF0EB1FFF01070180010313C04990C7
6C7FD91FFC6E6C7E49486F7E49486F7E01FF8348496F7E48496F1380A248496F13C0A248
90C96C13E0A24819F04982003F19F8A3007F19FC49177FA400FF19FEAD007F19FC6D17FF
A3003F19F8A26D5E6C19F0A26E5D6C19E0A26C6D4B13C06C19806E5D6C6D4B13006C6D4B
5A6D6C4B5A6D6C4B5A6D6C4A5B6D01C001075B6D01F0011F5B010101FE90B5C7FC6D90B6
5A023F15F8020715C002004AC8FC030713C047467AC454>I<B9FC18F018FE727E19E0D8
001F90C7000F7F05017F716C7E727E727E721380A21AC084A21AE0A91AC0A24E1380A21A
00604E5A4E5A4D485A050F5B92B712C096C7FC18FC18C092CBFCB3A7B712E0A543447DC3
4D>I<B812F8EFFFC018F818FE727ED8001F90C7003F13E005037F05007F727E727E727E
A28684A286A762A24E90C7FCA24E5A61187F943801FFF005075B053F138092B7C8FC18F8
18E018F892C77FEF3FFF050F7F717F717FA2717FA2717FA785A61B0F85A2187F73131F72
141EB700E06DEB803E72EBE0FC72EBFFF8060114F0726C13E0CC0007138050457DC354>
82 D<DAFFE0131C010701FE133C013F9038FF807C90B6EAE0FC4815F9489038801FFF39
07FC00014848EB007F4848143F4848140F491407007F15035B1601160012FF177CA27FA2
6D153C7F7F6D92C7FC6C7EEBFFE014FE6CEBFFF015FF6C15E016FC6C816C6F7E6C826C82
6C6C81011F810107811300020F80140003077FED007F82040F1380828212F082A282A27E
A218007EA26C5D6C5E6D14036D5D6D140701F84A5A01FFEC3FF002F8EBFFE0486CB65AD8
FC1F92C7FCD8F80714FC48C614F0480107138031467AC43E>I<003FBA12E0A59026FE00
0FEB8003D87FE09338003FF049171F90C71607A2007E1803007C1801A300781800A400F8
19F8481978A5C81700B3B3A20107B8FCA545437CC24E>I<903801FFE0011F13FE017F6D
7E48B612E03A03FE007FF84848EB1FFC6D6D7E486C6D7EA26F7FA36F7F6C5A6C5AEA00F0
90C7FCA40203B5FC91B6FC1307013F13F19038FFFC01000313E0000F1380381FFE00485A
5B127F5B12FF5BA35DA26D5B6C6C5B4B13F0D83FFE013EEBFFC03A1FFF80FC7F0007EBFF
F86CECE01FC66CEB8007D90FFCC9FC322F7DAD36>97 D<EB7FC0B5FCA512037EB1ED0FF8
92B57E02C314E002CF14F89139DFC03FFC9139FF000FFE02FCEB03FF4A6D13804A15C04A
6D13E05CEF7FF0A218F8173FA318FCAC18F8A2177F18F0A3EFFFE06E15C06E5B6E491380
027C491300496C495A903AFC1FC07FFC496CB512F0D9F00314C049C691C7FCC8EA1FF036
467DC43E>I<EC3FFC49B512C0010F14F0013F14FC90397FF003FE9039FFC001FF000349
5A48494813805B120F485AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C7EA312
3F6DEC03C0A26C6C1407000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007FFC03F8
6DB55A010F14C0010391C7FC9038003FF82A2F7CAD32>I<EC3FF80103B57E010F14E001
3F8090397FF83FF89039FFC007FC48496C7E48496C7E48486D1380485A001FED7FC05B00
3FED3FE0A2127F5B17F0161F12FFA290B7FCA401F0C9FCA5127FA27FA2123F17F06C7E16
016C6C15E06C6C14036C6DEB07C06C6DEB0F806C01F0EB3F0090397FFE01FE011FB55A01
0714F0010114C09026001FFEC7FC2C2F7DAD33>101 D<DAFFE0137E010F9039FE03FF80
013FEBFF8F90B812C048D9C07F133F489038001FF84848EB0FFC4848903907FE1F80001F
9238FF0F00496D90C7FCA2003F82A8001F93C7FCA26D5B000F5D6C6C495A6C6C495A6C90
38C07FF04890B55A1680D8078F49C8FC018013E0000F90CAFCA47F7F7F90B612C016FC6C
EDFF8017E06C826C16FC7E000382000F82D81FF0C77ED83FC014074848020113808248C9
FC177FA46D15FF007F17006D5C6C6C4A5A6C6C4A5AD80FFEEC3FF83B07FFC001FFF00001
90B612C06C6C92C7FC010F14F8D9007F90C8FC32427DAC38>103
D<EB7FC0B5FCA512037EB1ED07FE92383FFF8092B512E002C114F89139C7F03FFC9138CF
801F9139DF000FFE14DE14FC4A6D7E5CA25CA35CB3A7B60083B512FEA537457CC43E>I<
137C48B4FC4813804813C0A24813E0A56C13C0A26C13806C1300EA007C90C7FCAAEB7FC0
EA7FFFA512037EB3AFB6FCA518467CC520>I<EB7FC0B5FCA512037EB3B3B3A3B61280A5
19457CC420>108 D<90277F8007FEEC0FFCB590263FFFC090387FFF8092B5D8F001B512
E002816E4880913D87F01FFC0FE03FF8913D8FC00FFE1F801FFC0003D99F009026FF3E00
7F6C019E6D013C130F02BC5D02F86D496D7EA24A5D4A5DA34A5DB3A7B60081B60003B512
FEA5572D7CAC5E>I<90397F8007FEB590383FFF8092B512E0028114F8913987F03FFC91
388F801F000390399F000FFE6C139E14BC02F86D7E5CA25CA35CB3A7B60083B512FEA537
2D7CAC3E>I<EC1FFC49B512C0010714F0011F14FC90397FF80FFF9026FFC0017F48496C
7F4848C7EA3FE000078248486E7E49140F001F82A2003F82491407007F82A400FF1780AA
007F1700A46C6C4A5AA2001F5E6D141F000F5E6C6C4A5AA26C6C6CEBFFE06C6D485B2700
7FF80F90C7FC6DB55A010F14F8010114C09026001FFCC8FC312F7DAD38>I<90397FC00F
F8B590B57E02C314E002CF14F89139DFC03FFC9139FF001FFE000301FCEB07FF6C496D13
804A15C04A6D13E05C7013F0A2EF7FF8A4EF3FFCACEF7FF8A318F017FFA24C13E06E15C0
6E5B6E4913806E4913006E495A9139DFC07FFC02CFB512F002C314C002C091C7FCED1FF0
92C9FCADB67EA536407DAC3E>I<DA3FE0131E902603FFFC133E010F01FF137E013F1480
903AFFF80FE0FE489038E003F148EBC0014890388000FB4890C7127F49143F001F151F48
5A160F5B127FA3485AAC6C7EA46C7EA26C6C141F163F6C6C147F6C15FF6C6D5A6C9038E0
03EF6C9038F01FCF6DB5128F011FEBFE0F010313F89038007FC091C7FCAD0307B512FCA5
36407CAC3B>I<90387F807FB53881FFE0028313F0028F13F8ED8FFC91389F1FFE000313
BE6C13BC14F8A214F0ED0FFC9138E007F8ED01E092C7FCA35CB3A5B612E0A5272D7DAC2E
>I<90391FFC038090B51287000314FF120F381FF003383FC00049133F48C7121F127E00
FE140FA215077EA27F01E090C7FC13FE387FFFF014FF6C14C015F06C14FC6C800003806C
15806C7E010F14C0EB003F020313E0140000F0143FA26C141F150FA27EA26C15C06C141F
A26DEB3F8001E0EB7F009038F803FE90B55A00FC5CD8F03F13E026E007FEC7FC232F7CAD
2C>I<EB01E0A51303A41307A2130FA2131FA2133F137F13FF1203000F90B51280B7FCA4
C601E0C7FCB3A3ED01E0A9150302F013C0137F150790393FF80F8090391FFC1F006DB5FC
6D13FC01015B9038003FE023407EBE2C>I<D97FC049B4FCB50103B5FCA50003EC000F6C
81B3A85EA25EA25E7E6E491380017FD901F713FE9138F807E76DB512C7010F1407010313
FE9026007FF0EBFC00372E7CAC3E>I<B6903803FFFCA5000101E09038003E006C163C80
017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13076D5DED800F6D92C7FC15C05E
6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15FD021F5B15FF6E5BA36E5BA26E
90C8FCA26E5AA26E5AA21578362C7EAB3B>I<B5D8FE1FB539801FFFF0A500019027C000
3FE0C7EA7C007114786E17F86C6F6C5C6E1601017F6E6C5CA26E011F1403013F6F5C6E01
3F1407011F6F5CA26E0179140F010F048090C7FC6E01F95C6D02F0EBC01E15806D902681
E07F5B18E003C3157C6D9139C03FF07815E76DDA801F5B18F803FF14F96E9039000FFDE0
18FF6E486D5BA36E486D5BA26E486D90C8FCA24B7F02075DA26E48147C4B143C4C2C7EAB
51>I<B500FE90383FFFF0A5C601F0903803E0006D6C495A013F4A5A6D6C49C7FC6E5B6D
6C137E6DEB807C6D6D5A6DEBC1F0EDE3E06DEBF7C06EB45A806E90C8FC5D6E7E6E7F6E7F
A24A7F4A7F8291381F3FFCEC3E1F027C7F4A6C7E49486C7F01036D7F49487E02C0804948
6C7F49C76C7E013E6E7E017E141FB500E090B512FCA5362C7EAB3B>I<B6903803FFFCA5
000101E09038003E006C163C80017F5D8017F8013F5D6E1301011F5D6E1303010F5D6E13
076D5DED800F6D92C7FC15C05E6DEBE01E163E6D143CEDF07C027F1378EDF8F8023F5B15
FD021F5B15FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA21578A215F85D14015D001F1303
D83F805B387FC007D8FFE05B140F92C9FC5C143E495A387FC1F8EB07F06CB45A6C5B0007
90CAFCEA01FC36407EAB3B>I E /Ff 2 2 df<B812C0A32A037A9137>0
D<123C127E12FFA4127E123C08087A9414>I E /Fg 14 121 df<EB03F8EB0FFE90383E
0780EBF803D801F013C03803E001EA07C0000F1303D81F8013801407393F000F00141E38
7F01FCEBFFF091C7FC007EC8FC12FE5AA4127C156015E0EC01C06CEB0380EC0F006C131C
380F81F83803FFE0C648C7FC1B1F7D9D21>101 D<157C4AB4FC913807C380EC0F87150F
EC1F1FA391383E0E0092C7FCA3147E147CA414FC90383FFFF8A2D900F8C7FCA313015CA4
13035CA413075CA5130F5CA4131F91C8FCA4133EA3EA383C12FC5BA25B12F0EAE1E0EA7F
C0001FC9FC213D7CAE22>I<14FCEB03FF90380F839C90381F01BC013E13FCEB7C005B12
01485A15F8485A1401120F01C013F0A21403121F018013E0A21407A215C0A2000F130F14
1F0007EB3F80EBC07F3803E1FF3800FF9F90383E1F0013005CA2143EA2147E0038137C00
FC13FC5C495A38F807E038F00F80D87FFEC7FCEA1FF81E2C7E9D22>I<1307EB0F80EB1F
C0A2EB0F80EB070090C7FCA9EA01E0EA07F8EA0E3CEA1C3E123812301270EA607EEAE07C
12C013FC485A120012015B12035BA21207EBC04014C0120F13801381381F01801303EB07
00EA0F06131EEA07F8EA01F0122E7EAC18>105 D<131FEA03FFA2EA003FA2133EA2137E
A2137CA213FCA25BA2120115F89038F003FCEC0F0E0003EB1C1EEC387EEBE07014E03807
E1C09038E3803849C7FC13CEEA0FDC13F8A2EBFF80381F9FE0EB83F0EB01F81300481404
150C123EA2007E141C1518007CEBF038ECF83000FC1470EC78E048EB3FC00070EB0F801F
2F7DAD25>107 D<3907C007E0391FE03FF83918F8783E393879E01E39307B801F38707F
00126013FEEAE0FC12C05B00815C0001143E5BA20003147E157C5B15FC0007ECF8081618
EBC00115F0000F1538913803E0300180147016E0001F010113C015E390C7EAFF00000E14
3E251F7E9D2B>110 D<90387C01F89038FE07FE3901CF8E0F3A03879C0780D907B813C0
000713F000069038E003E0EB0FC0000E1380120CA2D8081F130712001400A249130F16C0
133EA2017EEB1F80A2017C14005D01FC133E5D15FC6D485A3901FF03E09038FB87C0D9F1
FFC7FCEBF0FC000390C8FCA25BA21207A25BA2120FA2EAFFFCA2232B829D24>112
D<903807E03090381FF87090387C1CF0EBF80D3801F00F3903E007E0EA07C0000F130338
1F800715C0EA3F00A248130F007E1480A300FE131F481400A35C143E5A147E007C13FE5C
1301EA3E07EA1F0E380FFCF8EA03F0C7FC13015CA313035CA21307A2EBFFFEA21C2B7D9D
20>I<3807C01F390FF07FC0391CF8E0E0383879C138307B8738707F07EA607E13FC00E0
EB03804848C7FCA2128112015BA21203A25BA21207A25BA2120FA25BA2121FA290C8FC12
0E1B1F7E9D20>I<EB07E0EB3FF8EB781EEBF0063801E0073803C00F141FA20007131E14
0CEBE00013F8EBFF806C13E06C13F06C13F8EB3FFC13011300147C0078133C12FCA2147C
48137800E013F814F0386001E0387807C0381FFF00EA07F8181F7C9D21>I<130E131FA2
5BA2133EA2137EA2137CA213FCA2B512F8A23801F800A25BA21203A25BA21207A25BA212
0FA25BA2001F1310143013001470146014E0381E01C0EB0380381F0700EA0F0EEA07FCEA
01F0152B7EA919>I<EA01E0D807F8130ED80E3C131FD81C3E5B0038143E12301270D860
7E137ED8E07C137C12C013FC484813FC00005C12015B140100035C13E0A2020313200007
ECE06013C0A216E0020713C00003EB0FC09038E01FC191383BE1803901F071E33A007FE0
FF0090381F803C231F7E9D29>I<D801E01370D807F813F8380E3C01D81C3E13FC123800
3013000070147CEA607ED8E07C133812C013FC485A0000143012015B1570000314605B15
E015C01207EBC00115801403EC070000031306EBE00E00015BEBF07838007FE0EB1F801E
1F7E9D22>I<013F137C9038FFC1FF3A01C1E383803A0380F703C0390700F60F000E13FE
4813FC12180038EC0700003049C7FCA2EA200100005BA313035CA301075B5D14C000385C
D87C0F130600FC140E011F130C011B131C39F03BE038D8707113F0393FE0FFC0260F803F
C7FC221F7E9D28>120 D E /Fh 41 123 df<EC1FE0ECFFFC903803F01E90390FC00780
EB1F8090393F000FC0017E131F5BA2485AED0F8092C7FCA9ED0FC0B7FCA33901F8001F15
0FB3A6486CEB1FE0267FFFC1B5FCA328357FB42B>12 D<EC1FF891B512C0903803F00F90
380FC01FEB1F80EB3F00137E5B150F485AACB7FCA33901F8000FB3A7486CEB1FE0267FFF
E3B5FCA328357FB42B>I<123C127EB4FCA21380A2127F123D1201A412031300A25A1206
120E120C121C5A5A126009177A8715>44 D<B512F0A514057F921A>I<123C127E12FFA4
127E123C08087A8715>I<15E0A34A7EA24A7EA34A7EA3EC0DFE140CA2EC187FA34A6C7E
A202707FEC601FA202E07FECC00FA2D901807F1507A249486C7EA301066D7EA2010E8001
0FB5FCA249800118C77EA24981163FA2496E7EA3496E7EA20001821607487ED81FF04A7E
D8FFFE49B512E0A333367DB53A>65 D<B81280A3D803FCC7FC0001151FEE07C01603A216
01A21600A41760150CA31700A2151CA2153C15FC90B5FCA3EBFC00153C151CA2150CA592
C8FCAB487EB512FEA32B337DB232>70 D<DA03FE130C91393FFF801C91B512E0903A03FE
01F83C903A0FF0003C7CD91FC0EB0EFCD97F80130701FEC7120348481401000315005B48
48157C485A173C485A171C123F5B007F160CA390C9FC4893C7FCAA0303B512E07E7F9239
0003FE00705A123F7F121FA26C7E7F12076C7E7F6C6C14036C7E6D6C1307D91FC0EB0E7C
D90FF0EB1C3CD903FEEBF81C0100B5EAF00C023F01C0C7FCDA03FEC8FC33377CB43C>I<
B512FEA3000113006C5AB3B3A7487EB512FEA317337EB21C>73 D<D8FFFC923801FFF86D
5DA20003EFFE00D801BFED06FCA3D99F80140CA2D98FC01418A3D987E01430A2D983F014
60A3D981F814C0A3D980FCEB0180A2027EEB0300A36E1306A26E6C5AA36E6C5AA36E6C5A
A26E6C5AA36E6C5AA3913800FD80A2037FC7FCA3486C133ED80FF04B7EB5011C90387FFF
F8A33D337CB246>77 D<B612FEEDFFC016F03A03FC0007FC0001EC00FE167FEE3F80EE1F
C017E0160FA217F0A617E0A2EE1FC0A2EE3F80EE7F0016FEED07F890B65A168001FCC9FC
B3A2487EB512F8A32C337DB234>80 D<B612FCEDFF8016F03A01FE0007FC0000EC01FEED
007F707E707E83160F83A65FA24C5AA24C5A047EC7FC4B5AED0FF090B612C093C8FC9039
FE001FC0ED07F06F7E6F7E150082167E167FA583A5180C17C0A2043F131C486C1618B500
FEEB1FE0040F1338933807F070C93801FFE09338003F8036357EB239>82
D<90381FE00390387FFC0748B5FC3907F01FCF390F8003FF48C7FC003E80814880A20078
8000F880A46C80A27E92C7FC127F13C0EA3FF013FF6C13F06C13FF6C14C06C14F0C68001
3F7F01037F9038003FFF140302001380157F153FED1FC0150F12C0A21507A37EA26CEC0F
80A26C15006C5C6C143E6C147E01C05B39F1FC03F800E0B512E0011F138026C003FEC7FC
22377CB42B>I<007FB712FEA390398007F001D87C00EC003E0078161E0070160EA20060
160600E01607A3481603A6C71500B3AB4A7E011FB512FCA330337DB237>I<B500FE9038
1FFFF8A3000190C813006C48153C1718B3AF1738017F1530A217706D6C1460011F15E06E
495A010F14036D6C495A6D6C49C7FCD901FC131E6DB413FC91383FFFF0020F13C0020190
C8FC35357EB23A>I<B5D8F007B539800FFFF0A3000390C7273FF000011300D801FC6E48
EB007C1A386D140F00001930836D020715706D1860A26E496C14E0013F60A26ED919FC13
01011F60A26ED930FE1303010F95C7FCA26ED9607F5B01071706A26E9039C03F800E0103
170CA2913BFC01801FC01C01011718A2913BFE03000FE03801001730A2DAFF06EB07F002
7F5EA2038CEB03F8023F5EA203D8EB01FC021FEDFD80A203F0EB00FF020F93C8FCA24B80
0207157EA24B143E0203153CA24B141C020115184C357FB24F>87
D<EB7F803803FFF0380F80FC381C003E003F133F6D6C7E6E7EA26E7EEA1F00C7FCA4EB01
FF131FEBFF873803FC07EA0FF0EA1FC0EA3F80127F13004815C05AA3140FA26C131F6C13
3B3A3F8071F180391FC1E1FF2607FFC013003900FE003C22237DA126>97
D<EA03F012FFA312071203AEEC3F80ECFFE09038F3C0F89038F7007E01FE7F49EB1F8049
EB0FC05BED07E016F0A2150316F8AA16F0150716E0A2ED0FC07F6DEB1F8001ECEB3F0001
CF137C90388381F8903801FFE0C76CC7FC25357EB32B>I<EB07F8EB3FFF9038FC07C039
01F000E03903E003F03807C007120FEA1F80123F90380003E04890C7FCA2127E12FEAA12
7FA26C14187F001F14386D1330000F14706C6C13E03903F001C03900FC0F8090383FFE00
EB07F01D237EA122>I<153FEC0FFFA3EC007F81AEEB07F0EB3FFCEBFC0F3901F003BF39
07E001FF48487E48487F8148C7FCA25A127E12FEAA127E127FA27E6C6C5BA26C6C5B6C6C
4813803A03F007BFFC3900F81E3FEB3FFCD90FE0130026357DB32B>I<EB0FE0EB7FFCEB
F83F3903F00F80D807E013C0390FC007E0381F800315F0EA3F0014014814F8127EA212FE
A2B6FCA248C8FCA5127E127FA26C1418A26C6C1338000F14306D13706C6C13E03901F003
C03900FC0F00EB3FFEEB07F01D237EA122>I<EB01FCEB07FF90381F078090383E0FC0EB
7C1F13FCEA01F8A20003EB070049C7FCACB512F0A3D803F0C7FCB3A7487E387FFFE0A31A
357FB417>I<151F90391FC07F809039FFF8E3C03901F07FC73907E03F033A0FC01F8380
9039800F8000001F80EB00074880A66C5CEB800F000F5CEBC01F6C6C48C7FCEBF07C380E
FFF8380C1FC0001CC9FCA3121EA2121F380FFFFEECFFC06C14F06C14FC4880381F000100
3EEB007F4880ED1F8048140FA56C141F007C15006C143E6C5C390FC001F83903F007E0C6
B51280D91FFCC7FC22337EA126>I<EA03F012FFA312071203AEEC1FC0EC7FF09038F1E0
FC9038F3807C9038F7007E13FE497FA25BA25BB3486CEB7F80B538C7FFFCA326347EB32B
>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCAAEA07E012FFA3120F1207B3A6EA0FF0
B5FCA310337EB215>I<EA03F012FFA312071203AF913803FFE0A36E1300EC00F8EC01E0
5D4A5A020FC7FC141C5C5C14F0EBF3F8EBF7FC13FEEBFC7EEBF87F496C7E141F6E7E8114
076E7E8114016E7E81486CEBFF80B500C313F0A324347EB329>107
D<EA07E012FFA3120F1207B3B3A7EA0FF0B5FCA310347EB315>I<2703F01FE013FF00FF
90267FF80313C0903BF1E07C0F03E0903BF3803E1C01F02807F7003F387FD803FE147049
6D486C7EA2495CA2495CB3486C496C487EB53BC7FFFE3FFFF0A33C217EA041>I<3903F0
1FC000FFEB7FF09038F1E0FC9038F3807C3907F7007EEA03FE497FA25BA25BB3486CEB7F
80B538C7FFFCA326217EA02B>I<EB07F0EB3FFE9038FC1F803901F007C03903C001E000
078048486C7E48C7127CA248147E003E143E007E143FA300FE1580A8007E1500A36C147E
A26C147C6D13FC6C6C485A00075C3903F007E03900FC1F80D93FFEC7FCEB07F021237EA1
26>I<3903F03F8000FFEBFFE09038F3C0F89038F7007ED807FE7F6C48EB1F804914C049
130F16E0ED07F0A3ED03F8A9150716F0A216E0150F16C06D131F6DEB3F80160001FF13FC
9038F381F89038F1FFE0D9F07FC7FC91C8FCAA487EB512C0A325307EA02B>I<903807F0
0390383FFC07EBFC0F3901F8038F3807E001000F14DF48486CB4FC497F123F90C77E5AA2
5A5AA9127FA36C6C5B121F6D5B000F5B3907E003BF3903F0073F3800F81EEB3FF8EB0FE0
90C7FCAAED7F8091380FFFFCA326307DA029>I<3803E07C38FFE1FF9038E38F809038E7
1FC0EA07EEEA03ECA29038FC0F8049C7FCA35BB2487EB512E0A31A217FA01E>I<EBFF06
000713CE381F00FE003C133E48131E140E5A1406A27EA200FE90C7FC6C7EEA7FFC383FFF
C014F0000F7F6C7FC67FEB0FFF1300EC3F8000C0131F140F6C1307A37E15006C5B6C130E
6C5B38F7807838E1FFE038C07F8019237EA11E>I<1330A51370A313F0A21201A2120312
07381FFFFEB5FCA23803F000AF1403A814073801F806A23800FC0EEB7E1CEB1FF8EB07E0
182F7FAD1E>I<D803F0133F00FFEB0FFFA30007EB007F000380B35DA35D12016D481380
0000903803BFFC90387E073FEB1FFED907F8130026227EA02B>I<B5EBFFF0A3D80FF0EB
3F800007EC1F000003140E150C6D131C00011418A26C6C5BA26D1370017E1360137F6D5B
A290381F8180A214C3010F90C7FCA2EB07E6A214FE6D5AA26D5AA36D5AA2146024217E9F
29>I<B53A1FFF81FFF0A33C07F801FC003F8001F049EB1E0000030100141C816C6C017C
1318A26D017E1338000002FE1330A290267E01FF5B159F168090263F030F5BA216C0903A
1F8607C180A202C613E390260FCC0390C7FCA2D907FC13F6ECF80116FE6D486C5AA36D48
1378A36D48133034217F9F37>I<B53801FFF8A32603FE0013806C48EB7C000000147801
7E1370017F5B90383F81C090381F8380D90FC3C7FCEB07E614FE6D5A6D5A6D7E80805B90
38039F809038071FC09038060FE0EB0C0790381C03F0496C7E01707FEBF000000180000F
ECFF8026FFFC0313FCA326207F9F29>I<3A7FFF807FF8A33A07F8001FC00003EC0F8000
01EC070015066C6C5BA26D131C017E1318A26D5BA2EC8070011F1360ECC0E0010F5BA290
3807E180A214F3010390C7FC14FBEB01FEA26D5AA31478A21430A25CA214E05CA2495A12
78D8FC03C8FCA21306130EEA701CEA7838EA1FF0EA0FC025307F9F29>I<003FB512F0A2
EB000F003C14E00038EB1FC00030EB3F800070137F1500006013FE495A13035CC6485A49
5AA2495A495A49C7FC153013FE485A12035B48481370485A001F14604913E0485A387F00
0348130F90B5FCA21C207E9F22>I E /Fi 10 58 df<13FF000313C0380781E0380F00F0
001E137848133CA248131EA400F8131FAD0078131EA2007C133E003C133CA26C13786C13
F0380781E03803FFC0C6130018227DA01E>48 D<13E01201120712FF12F91201B3A7487E
B512C0A212217AA01E>I<EA01FC3807FF80381C0FC0383003E0386001F0EB00F812F86C
13FCA2147C1278003013FCC7FC14F8A2EB01F0EB03E014C0EB0780EB0F00131E13385B5B
3801C00CEA0380380600185A5A383FFFF85AB512F0A216217CA01E>I<13FF000313C038
0F03E0381C00F014F8003E13FC147CA2001E13FC120CC712F8A2EB01F0EB03E0EB0FC038
01FF00A2380003E0EB00F01478147C143E143F1230127812FCA2143E48137E0060137C00
3813F8381E03F0380FFFC00001130018227DA01E>I<14E01301A213031307A2130D131D
13391331136113E113C1EA01811203EA07011206120C121C12181230127012E0B6FCA238
0001E0A6EB03F0EB3FFFA218227DA11E>I<00101330381E01F0381FFFE014C01480EBFE
00EA1BF00018C7FCA513FE381BFF80381F03C0381C01E0381800F014F8C71278A2147CA2
1230127812F8A214784813F8006013F0387001E01238381E07803807FF00EA01F816227C
A01E>I<EB0FC0EB7FF03801F0383803C0183807803C380F007C121E001C1338003C1300
A2127C1278EB7FC038F9FFE038FB80F038FE0038143C48131EA248131FA41278A36C131E
A2001C133C001E13386C1370380781E03801FFC038007F0018227DA01E>I<1230123C00
3FB5FCA24813FE14FC3860001C143814704813E014C0EA0001EB0380EB07001306130E5B
A25BA21378A35BA41201A76C5A18237CA11E>I<137F3803FFC0380781E0380E00704813
380018131C1238A3123C003F1338381FC078EBE0F0380FF9E03807FF80120114C0000713
F0380F0FF8381C03FC383801FE3870007E141F48130F1407A314060070130E0078130C6C
1338001F13F03807FFC0C6130018227DA01E>I<13FE3803FFC0380781E0380E00704813
78003C133848133CA200F8131EA3141FA40078133FA26C137F121C380F01DF3807FF9F38
03FE1EC7FCA2143E143C001C1338003E13781470003C13E0381801C0381C0780380FFE00
EA03F818227DA01E>I E /Fj 10 107 df<007FB812FEBAFCA26C17FE3804799847>0
D<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A799B19>I<180E183F18FFEF03FEEF0F
F8EF3FE0EFFF80933803FE00EE1FF8EE7FE0923801FF80DB07FEC7FCED1FF0ED7FC04A48
C8FCEC07FCEC3FF0ECFFC0010390C9FCEB0FFCEB3FE0EBFF80D803FECAFCEA0FF8EA3FE0
EAFF8048CBFC6C7EEA7FE0EA0FF8EA03FEC66C7EEB3FE0EB0FFCEB03FF010013C0EC3FF0
EC07FCEC01FF9138007FC0ED1FF0ED07FE923801FF809238007FE0EE1FF8EE03FE933800
FF80EF3FE0EF0FF8EF03FEEF00FF183F180E1800AE007FB812FEBAFCA26C17FE384779B9
47>20 D<D91FE01620D97FF816703801FFFE486D7E48804814F09038E01FF8271F8007FC
15F0273E0001FE15E0003CD9007F1401007CDA3FC013030078DA0FE014C00070DA07F813
0700F0DA03FEEB1F8048913A01FF807F006F90B5FC043F5B705B04075B040113E0004092
38007F803C157BA047>24 D<D91FE01620D97FFC167048B5FC4814C048804814F8271FE0
1FFC15F0273F8003FE15E0003EC76C6C130148DA3FC013030078DA1FF0EB07C00070DA07
FC131F00F0913A03FF807F80486E90B512006F6C5B705B040F5B040313E000409238007F
80CDFCB0007FB912E0BA12F0A26C18E03C277BA947>39 D<0203B512F8023F14FC91B6FC
010315F8D90FFEC8FCEB1FE0EB7F8001FEC9FCEA01F8485A485A485A5B48CAFCA2123EA2
5AA21278A212F8A25AA2B812F817FCA217F800F0CAFCA27EA21278A2127CA27EA27EA26C
7E7F6C7E6C7E6C7EEA00FEEB7F80EB1FE0EB0FFE0103B612F8010015FC143F020314F82E
3679B13D>50 D<0060EE018000F0EE03C06C1607A200781780007C160FA2003C1700003E
5EA26C163EA26C163C6D157CA2000716786D15F8A26C6C4A5AA200015E6D140390B7FC6C
5EA3017CC7EA0F80A2013C92C7FC013E5CA2011E141E011F143EA26D6C5BA2010714786E
13F8A26D6C485AA201015CECF003A201005CECF807A291387C0F80A2023C90C8FCEC3E1F
A2EC1E1EEC1F3EA2EC0FFCA26E5AA36E5AA36E5A6E5A324180BE33>56
D<153FEC03FFEC0FE0EC3F80EC7E00495A5C495AA2495AB3AA130F5C131F495A91C7FC13
FEEA03F8EA7FE048C8FCEA7FE0EA03F8EA00FE133F806D7E130F801307B3AA6D7EA26D7E
80EB007EEC3F80EC0FE0EC03FFEC003F205B7AC32D>102 D<12FCEAFFC0EA07F0EA01FC
EA007E6D7E131F6D7EA26D7EB3AA801303806D7E1300147FEC1FC0EC07FEEC00FFEC07FE
EC1FC0EC7F0014FC1301495A5C13075CB3AA495AA2495A133F017EC7FC485AEA07F0EAFF
C000FCC8FC205B7AC32D>I<126012F0B3B3B3B3B11260045B76C319>106
D E /Fk 28 121 df<EC01C0EC0FFF023F13E0027913F0ECE03F903801C00FEC8007ED01
E0010390C7FCA280130180A280A26D7E80A2147E147F6E7EA26E7E81140FEC7FF0903801
F7F8EB07C790381F83FCEB3E03EB7C0101F87F12013803F000485AA24848137E485AA212
3F90C7FCA25A127EA300FE147C5A15FCA25D1401A25D007C13035DA26C495A4A5A6C91C7
FC6C131E6C6C5A3803E0783800FFE0EB3F8024427CC028>14 D<011FB612FE017F15FF48
B8FC5A4816FE3B0FC03801C000EA1F00003E1403003C01785B4813705AECF0075AC712E0
010191C7FCA25DEB03C0A313071480A2010F5BA2EB1F0082A2133EA2137E825B150F0001
815B120315075BC648EB038030287DA634>25 D<ED1FC0EDFFF0913803E07C91380F803E
4A487E023E14804AEB0FC05C494814E01303495A5C130F494814F0A2133F91C7FCEE1FE0
5B137EA201FE143F17C05BA20001ED7F80A24915005E00035D4B5AA24B5A486C495A4B5A
6D5C01EEEB3F80D80FE7017EC7FC9038E3C1F89038C1FFE0D9C07FC8FC001F90C9FCA25B
A2123FA290CAFCA25AA2127EA212FEA25AA35A12702C3C7EA72F>I<121EEA7F80A2EAFF
C0A4EA7F80A2EA1E000A0A798919>58 D<121EEA7F8012FF13C0A213E0A3127FEA1E6012
00A413E013C0A312011380120313005A120E5A1218123812300B1C798919>I<1806181F
187FEF01FFEF07FCEF1FF0EF7FC0933801FF00EE07FCEE3FF0EEFFC0030390C7FCED0FFC
ED3FE0EDFF80DA03FEC8FCEC0FF8EC7FE0903801FF80D907FEC9FCEB1FF8EB7FC04848CA
FCEA07FCEA1FF0EA7FC048CBFCA2EA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF8EB07FE
903801FF809038007FE0EC0FF8EC03FE913800FF80ED3FE0ED0FFCED03FF030013C0EE3F
F0EE07FCEE01FF9338007FC0EF1FF0EF07FCEF01FFEF007F181F1806383679B147>I<17
075F84171FA2173F177FA217FFA25E5EA24C6C7EA2EE0E3F161E161C1638A21670A216E0
ED01C084ED0380171FED07005D150E5DA25D157815705D844A5A170F4A5A4AC7FC92B6FC
5CA2021CC7120F143C14384A81A24A140713015C495AA249C8FC5B130E131E4982137C13
FED807FFED1FFEB500F00107B512FCA219F83E417DC044>65 D<49B712F818FF19E09026
0001FEC7EA3FF0F007F84B6E7E727E850203815D1A80A20207167F4B15FFA3020F17004B
5C611803021F5E4B4A5A180FF01FE0023F4B5A4B4A5ADD01FEC7FCEF07F8027FEC7FE092
B6C8FC18E092C7EA07F84AEC01FE4A6E7E727E727E13014A82181FA213034A82A301075F
4A153FA261010F167F4A5E18FF4D90C7FC011F5E4A14034D5A013FED1FF04D5A4AECFFC0
017F020790C8FCB812FC17F094C9FC413E7DBD45>I<DC3FF0130E923803FFFE031F9038
FF801C923A7FF00FC03C913B01FF0001E07CDA07FC903800F0FCDA0FF0EC79F8DA3FC014
3F4A48141F4AC8120FD903FC16F0495A49481507495A013F17E04A1503495A49C9FC4818
C05B1203485A1980485AA2485A95C7FC123F5BA2127F5BA312FF5BA3043FB512E0A290C8
FC9339001FF800170F60A2171FA260A26C6C153FA2606C7E177F121F6D5E6C6C15FF0007
5D6C6C5C6C6CDA07BFC7FC6CB4EC1F1FD97FC0EB7E0F90391FF803F80107B5EAE0060101
0280C8FC9026001FF8C9FC3F427BBF48>71 D<49B612F0A3D900010180C7FC93C8FC5DA3
14035DA314075DA3140F5DA3141F5DA3143F5DA3147F5DA314FF92C9FCA35B5C180C181E
0103161C5C183C183813074A1578187018F0130F4AEC01E0A21703011FED07C04A140F17
1F013FED3F8017FF4A1303017F021F1300B9FCA25F373E7DBD3E>76
D<48B912FCA25A913A0003FE000F01F84A1301D807E0EE00F8491307491778000F5D90C7
FC001E140FA2001C4B1470123C0038141FA200785D1270033F15F000F018E0485DC81600
157FA25EA215FFA293C9FCA25CA25DA21403A25DA21407A25DA2140FA25DA2141FA25DA2
143FA25DA2147FA214FF497F001FB612FCA25E3E3D7FBC35>84 D<EC1F80ECFFE0903903
F0707090390FC039F890381F801D90383F000F017E5C5B00011407485A48485CA2485A00
1F140F5E485AA2151F007F5D5BA2153F00FF92C7FC90C7FCA25D92387E03805AA215FEED
FC07007E0101140014035E6C0107130E140E3A1F801C7C1C000F13783A07C1F03E383A01
FFC01FF03A007F0007C029297DA730>97 D<EB1FC0EA0FFF5CA2EA003FA291C8FCA25BA2
137EA213FEA25BA21201A25BA21203A25BEC3F800007EBFFE09038F3C1F849C67E01FE13
7E4848133E49133F5B491480001F141F5B5BED3FC0123FA290C7FCA248147F1680127EA2
15FF00FE15005AA24A5AA25D1403485C1407007C5C4A5A5D003C495A003E49C7FC001E13
7E6C13F8380783F03803FFC0C648C8FC22407CBE27>I<163EEEFFC0923803E1E0923807
C0F0ED0F811687ED1F8F160F153FA217E092387E038093C7FCA45DA514015DA30103B512
FCA390260003F0C7FCA314075DA4140F5DA5141F5DA4143F92C8FCA45C147EA414FE5CA4
13015CA4495AA35CEA1E07127F5C12FF495AA200FE90C9FCEAF81EEA703EEA7878EA1FF0
EA07C02C537CBF2D>102 D<EB01FC13FF5CA21303A25CA21307A25CA2130FA25CA2131F
A25CA2133FA291C9FC15FE90397F07FFC091381F03E090397E3801F09138F000F8EBFFE0
4A7F5C91C7FC485AA25BA2484813015E5BA2000714035E5B1507120F5E49130F5E121F03
1F1370491480A2003F023F13F0EE00E090C7FC160148023E13C01603007E1680EE070000
FE5DED1F1E48EC0FF80038EC03E02C407CBE34>104 D<143C14FEA21301A314FCEB0070
1400AD137E3801FF803803C7C0EA0703000F13E0120E121C13071238A2EA780F007013C0
A2EAF01F14801200133F14005B137EA213FE5BA212015B0003130E13F0A20007131EEBE0
1CA2143CEBC0381478147014E013C13803E3C03801FF00EA007C173E7EBC1F>I<EB01FC
13FF5CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C9FC16FC49EB03FE
92380F0780017EEB3C0FED703F01FE13E0913801C07F9038FC0380EC07000001010E1400
4A131C494890C7FC5C00035BEBF9C0495A01FFC9FC5A14F0EBE3FE9038E07F80000FEB1F
C06E7EEBC00781001F1303160E1380A2003F151E0207131C010013E0A2485DA2007E0103
1378167000FE01015B15F1489038007F800038023EC7FC29407CBE2F>107
D<D801F0D90FF0EB03F8D807FCD93FFEEB1FFFD80F1FD9F01F90387C0F80000E903C03C0
0F80E007C0271E0F87009039C3C003E0001C018E903807C780003C01DCDAEF007F003801
F814EE4A14FCD8781F5D00705B4A5CA200F04949481307013F60000090C75BA2041F140F
4960017E5D191F043F5D13FE4992C7123F97C7FC5E000195387F01C049027E147EA204FE
ECFE03000306FC1380495C1A07030103F81300000761494A150E620303163C000FF07C78
494AEC3FE0D80380D900E0EC0F804A297EA750>109 D<D801F0EB0FF0D807FCEB3FFED8
0F1FEBF01F000E903903C00F80271E0F87007F001C018E1307003C01DC80003813F85CEA
781F00705B5CA200F049130F013F5D000090C7FCA2161F495D137E163F94C7FC13FE495C
167EA200019238FE03804914FCA203011307000303F813005B5FEEF00E0007161E49151C
5F1778000F6E6C5A49EC7FC0D80380021FC7FC31297EA737>I<D907C013FE903A0FF003
FF80903A1C7C0F07E0903A383C1C03F0903A783E7801F80170EBF0009026F03FE013FC01
E05B4B13FE0001017F147E01C090C7FC147E17FF000313FEA2C75AA201015C17FE5CA201
03140317FC5CA20107EC07F8A24A14F0160F010F15E0161F17C0EE3F80011F15006E137E
5E9138B801F890393FBC03E091389E0FC0DA07FFC7FCEC01F849C9FCA2137EA213FEA25B
A21201A25BA21203A2B512E0A3303A84A72E>112 D<91381F800C9138FFE01C903903F0
707C90390FC0387890391F801CF890383F000F137E4914F000011407485A485A16E0485A
121F150F484814C0A3007F141F491480A300FF143F90C71300A35D48147EA315FE007E49
5A1403A26C13074A5A381F801D000F13793807C1F33901FFC3F038007F03130014075DA3
140F5DA3141F5DA2143F147F90381FFFFE5BA2263A7DA729>I<D801F0EB3F80D807FCEB
FFE03A0F1F03C0F0000E90380F00F8391E0F9E03001C13BC003CEBF807003813F0A22678
1FE013F000709038C001C092C7FC5C12F0133F000090C8FCA35B137EA313FE5BA312015B
A312035BA312075BA3120F5BEA038025297EA729>I<EC1FC0ECFFF8903803E03C903807
800E90381E0007168049130F49131F153FA201F81400A2151C6D90C7FC7FEBFFE014FE90
387FFFC06D7F6D13F86D7F13039038001FFE14031400157E000C143E123F487EA248C712
3CA25D12FC00F05C0070495A0078495A6C495A260F803EC7FC3803FFF838007FC021297C
A72B>I<147014FC1301A25CA21303A25CA21307A25CA2130FA25CA2007FB512F0B6FC15
E039001F8000133FA291C7FCA25BA2137EA213FEA25BA21201A25BA21203A25BA21207EC
01C013E01403000F1480A2EBC0071500140E141E5C000713385C3803E1E03801FF80D800
3EC7FC1C3A7EB821>I<137C48B4EC03802603C7C0EB0FC0EA0703000F7F000E151F121C
010715801238163FEA780F0070491400A2D8F01F5C5C0000157E133F91C712FEA2495C13
7E150113FE495CA215030001161C4914F0A21507173CEEE038150F031F1378000016706D
133F017C017313F0017E01E313E0903A3F03C1F1C0903A0FFF007F80D901FCEB1F002E29
7EA734>I<017E147848B4EB01FC2603C7C013FED807031303000F13E0120E121C010713
0100381400167ED8780F143E00705B161EEAF01F4A131C1200133F91C7123C16385B137E
167801FE14705B16F016E0120149EB01C0A2ED0380A2ED0700A20000140E5D6D133C017C
5B6D5B90381F03C0903807FF80D901FCC7FC27297EA72C>I<017CEE038048B40207EB0F
E02603C7C090391F801FF0EA0703000F7F000E153F001C16000107160F003817074C1303
D8780F027E130100705B1800D8F01F14FE4A4914E01200133FDA000114014C14C05B137E
0303140301FE4A14805BA2F0070000011407494A5B180EA260A2030F5C12006D011F5C01
7C496C5B017E0139495A6D903870F80390281F81E07C0FC7FC903A07FFC01FFE01009038
0007F03C297EA741>I<D901F8133FD907FEEBFFE0903A1E0F83C0F0903A3807C780F890
397003CF0301E013FED801C0EBFC071203018013F8D8070015F0EE01C0000E4AC7FCA200
1E1307A2C75BA2140F5DA3141F5DA3143F92380001C0A34A1303001E1680003F017E1307
267F80FE14005ED8FF81141ED901DF131CD8FE035C3A7C078F80F03A3C0F07C1E03A1FFC
03FF802707F0007EC7FC2D297EA734>I E /Fl 17 112 df<13031307130E131C133813
7013F0EA01E013C01203EA0780A2EA0F00A2121EA35AA45AA512F8A25AAB7EA21278A57E
A47EA37EA2EA0780A2EA03C0120113E0EA00F013701338131C130E1307130310437AB11B
>40 D<12C07E12707E7E7E120FEA0780120313C0EA01E0A2EA00F0A21378A3133CA4131E
A5131FA2130FAB131FA2131EA5133CA41378A313F0A2EA01E0A2EA03C013801207EA0F00
120E5A5A5A5A5A10437CB11B>I<EC0380B3A4B812FCA3C7D80380C7FCB3A42E2F7CA737>
43 D<EB3FC0EBFFF03803E07C48487E48487E497E001EEB0780A2003E14C0A248EB03E0
A500FC14F0B0007C14E0A3007E1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0
FC3800FFF0EB3FC01C2D7DAB23>48 D<130C133C137CEA03FC12FFEAFC7C1200B3B113FE
387FFFFEA2172C7AAB23>I<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A
0060EB07E012F000FC14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F0014
7E147C5C495A495A495A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E000
1FB5FC5A4814C0B6FCA21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F
80003F14C0A2EB800F1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0
EB00FC143FEC1F8015C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C000
70131F6C1480001EEB3F00380780FC3801FFF038007FC01C2D7DAB23>I<140EA2141E14
3EA2147E14FEA2EB01BE1303143E1306130E130C131813381330136013E013C0EA018012
0313001206120E120C5A123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D
7EAC23>I<000CEB0180380FC01F90B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0
EB7FF8380DE07C380F801F01001380000E130F000CEB07C0C713E0A2140315F0A4127812
FCA448EB07E012E0006014C00070130F6C14806CEB1F006C133E380780F83801FFE03800
7F801C2D7DAB23>I<EB03F8EB0FFE90383E0780EBF8013901F007C03803E00FEA07C0EA
0F80A2391F00078091C7FC123EA2127EA2127CEB0FC038FC3FF0EBF07C38FDC01EB4487E
01001380EC07C04814E0A214034814F0A4127CA3127EA2003E14E01407121E001F14C06C
EB0F803907801F003803C03E6C6C5A38007FF0EB1FC01C2D7DAB23>I<1230123C003FB5
12F8A215F05A15E039700001C000601480140348EB0700140E140CC7121C5C143014705C
495AA2495AA249C7FCA25B130E131EA2133EA3133C137CA413FCA913781D2E7CAC23>I<
EB1FC0EBFFF03803E07C3807801E48487E001EEB0780A248EB03C0A4123E1407003F1480
381FC00F01E01300EBF81E6C6C5A3807FFF86C13E0C6FCEB3FF8EBFFFC3803C7FFD80783
1380D81F0013C0001E133F48EB1FE0007C13070078EB03F012F84813011400A46C14E000
781301007C14C0003C13036CEB0780390F800F003807E03C3801FFF038003FC01C2D7DAB
23>I<EB3F80EBFFF03803E0783807C03E48487E48487E003E14801407007E14C0127C00
FC14E01403A315F0A5007C1307127EA2003E130F7E6C131F3807803B3803E0F33800FFC3
90383F03E013001407A215C0A2140F001E1480003F14005C143E143C003E5B001C5B380E
03E03807FF80D801FEC7FC1C2D7DAB23>I<007FB712F8B812FCA2CBFCADB812FCA26C16
F82E137C9937>61 D<013F13F89038FFC3FE3903E1FF1E3807807C000F140C391F003E00
A2003E7FA76C133EA26C6C5A00071378380FE1F0380CFFC0D81C3FC7FC90C8FCA3121E12
1F380FFFF814FF6C14C04814F0391E0007F848130048147C12F848143CA46C147C007C14
F86CEB01F06CEB03E03907E01F803901FFFE0038003FF01F2D7E9D23>103
D<EA07C012FFA2120F1207B3B3A3EA0FE0EAFFFEA20F2E7EAD14>108
D<EB1FE0EB7FF83801F03E3803C00F3907800780390F0003C04814E0003EEB01F0A248EB
00F8A300FC14FCA9007C14F8A26CEB01F0A26CEB03E0A2390F8007C03907C00F803901F0
3E0038007FF8EB1FE01E207E9E23>111 D E /Fm 62 122 df<933807FF80043F13E093
38FE00F8DB01F0133EDB07E0130E4B48131F4C137F031F14FF4BC7FCA218FE157E187818
0015FE5DA31401A25DA414030103B712F0A218E0903A0003F000070207140F4B14C0A317
1F020F15805DA2173F1800141F5D5F177EA2143F92C712FE5FA34A1301027EECF81CA316
0302FEECF03C4A1538A21878187013014A010113F018E0933800F1C0EF7F804948EC1F00
94C7FCA35C1307A2001E5B127F130F00FF5BA249CAFC12FEEAF81EEA703CEA7878EA1FF0
EA07C0385383BF33>12 D<D801E013F03907F803FC000F130701FC13FE001F130FA4000F
13073903D801EC390018000CA20138131C01301318017013380160133001E01370491360
000114E039038001C001001380481303000EEB070048130E485B485B485B4813601F1C70
BE2F>34 D<EA01E0EA07F8120F13FC121FA4120FEA03D8EA0018A2133813301370136013
E013C01201EA038013005A120E5A5A5A5A5A0E1C6DBE1C>39 D<ED01801507ED0F00151C
5D5D5D14014A5A4A5A4AC7FC141E143E5C14785C1301495AA2495A5C130F49C8FCA2133E
A25BA213FC5B12015BA212035B1207A25B120FA25BA2121FA290C9FCA25AA2123EA2127E
A2127CA65AAB1278A67EA47EA2120E120F7EA26C7EA26C7E6C7E1360215A73C325>I<14
031580A2EC01C0EC00E0A21570A215781538153CA3151EA4151FA2150FA7151FA9153FA2
153EA3157EA2157CA215FCA215F8A21401A215F0A2140315E0A2140715C0A2EC0F80A214
1F15005C143EA25CA25CA2495A5C1303495A5C130F49C7FC131E5B137C5B5B485A485A48
5A48C8FC121E5A12705A5A205A7FC325>I<EA01E0EA07F8120FA2EA1FFCA4EA0FF8EA07
98EA001813381330A21370136013E013C01201EA0380EA07001206120E5A5A5A5A5A0E1C
7A891C>44 D<387FFFFEA3B5FCA21705799521>I<120FEA3FC0127FA212FFA31380EA7F
00123C0A0A77891C>I<1838187CA218F8170118F0EF03E0A2EF07C0A2EF0F80171F1800
173EA25FA25F16015F4C5AA24C5AA24C5A161F94C7FC163EA25EA25E15015E4B5AA24B5A
A24B5A151F93C8FC153EA25DA25D14015D4A5AA24A5AA24A5A141F92C9FC143EA25CA25C
13015C495AA2495AA2495A131F91CAFC133EA25BA25B12015B485AA2485AA2485A121F90
CBFC123EA25AA25AA25A5A365B7FC32E>I<15FE913807FF8091381F07C091387C01F0EC
F000494813F8494813780107147C495A49C7FC167E133E137EA25BA2485AA2000315FEA2
5B000715FCA2491301120FA34848EB03F8A44848EB07F0A448C7EA0FE0A316C0007E141F
12FE1680153FA2481500A2157EA25DA25D4813015D6C495A127C4A5A4A5A6C49C7FC143E
6C5B380FC1F03803FFC0C648C8FC273F76BC2E>I<15031507150F151F151E153E157EEC
01FEEC03FC1407141FEB01FF90380FFBF8EB1FC3EB0E07130015F0A2140FA215E0A2141F
A215C0A2143FA21580A2147FA21500A25CA25CA21301A25CA21303A25CA21307A25CA213
0FA25CA2131FA25CEB7FE0B612F0A215E0203D77BC2E>I<15FE913803FFC091380F01F0
91383C00F84A137C4A7F4948133F49487F4A148049C7FC5BEB0E0C011E15C0EB1C0EEB3C
06133813781370020E133FD9F00C148013E0141C0218137F00011600EBC0384A13FEEC60
0102E05B3A00E3C003F89039FF0007F0013C495A90C7485A5E037FC7FC15FC4A5A4A5AEC
0FC04AC8FC147E14F8EB03E0495A011FC9FC133E49141801F0143C48481438485A167848
5A48C85A120E001E4A5AD83FE0130301FF495A397C3FF01FD8780FB55AD8700391C7FCD8
F0015B486C6C5A6E5AEC07C02A3F79BC2E>I<ED7F80913803FFE091380F80F891383C00
7C02F87FD901E07F494814804948130F49C7FC010E15C0131EEB1C18EB3C1CEB380C0178
141F17801370A2021C133F6D4814004A5BD91FE0137ED90F805B90C8FC4B5A4B5A4B5AED
1F8003FFC7FCECFFFC15F0A2EC00FC153E153F8182150F82A4151FA2121E127F153F485D
A3484AC7FC12F800E014FE5D14016C495A0070495A0078EB0FC00038495A6C017EC8FC38
0F01F83803FFE0C690C9FC2A3F78BC2E>I<1638167E16FE16FCA3150116F8A3150316F0
A2150716E0A2ED0FC0A3ED1F80A216005DA2157EA2157C15FC5D14015D14035D4A5AA24A
5AA24AC7FC143EED038091387C0FC014F8ECF01F01011480EB03E014C0903807803F010F
1400EB1F00133E495B49137E485A485A484813FE48B46C5A4813F04813FE267C00FF1308
00F090380FFFFC00601301C714E0913803F8005DA314075DA3140F5DA3141F5DA3020EC7
FC274F7DBC2E>I<02C0EB018002F0130FD901FEEB7F0091B512FE5E5E4914E016804BC7
FCECBFF8D90780C8FC91C9FCA35B130EA3131E131CA3133C9038381FC0ECFFF090383BE0
7C90387F003E017E133F017C7F0178805B498090C7FCA6153FA4001F147F486C5C487EA2
4913FF00FF92C7FC90C7FC48495A12E04A5A5D6C495A140F00705C0078495A6C495A003E
01FEC8FC381F03FC380FFFF0000313C0C648C9FC293F77BC2E>I<ED0FE0ED7FF8913801
F01C913807C00E91381F800F91383E00074A131F4A137F494813FF1303495A494813FE13
1F4948137891C8FC5B13FEA2485AA212035B0007EB1FC0EC7FF0390FF1E07C9038F3803E
EBF700D81FFE7F4914805B49EB0FC0123F5B151F4914E0127FA25BED3FC0A248C7FCA215
7F16805AA215FF1600A24A5AA2485C007C495AA2007E495A4A5A003E495A003F495A261F
807EC7FC380FC1FC6CB45A6C13E0C66CC8FC283F76BC2E>I<D9703FEB01C09138FF8003
01F3158001EFEBC00790B5EB0F0048151E14832603FE015B01F8147C2607F0005B49EBE3
F04848137F496D5A48C71201001E4A5A1507485D0038140F007892C7FC00705C00F0143E
5A5DC8FC5DA24A5AA214035D14074A5AA2141F5DA24AC8FCA25C147E14FEA2495AA3495A
A313075C130FA25C131FA35C133FA35C91C9FC131E2A3F73BC2E>I<157F913801FFE091
3807C0F091381F007C023C133C4A133E4A131F1301495A5C1307A2495AA2163F011F143E
A2167E6E137C16F8ECE00102F013F09138F803E09138FC07C090390FFE0F00ECFFBE6D13
F86D5B7F6D7F8101037F90380F9FFFD91F0F1380D97C0713C0497E48486C13E03903E000
7F4848133F4848131F001F140F90C7FC003E1407A2127E127CA200FC15C05AA2ED0F80A2
ED1F00153E007C143C157C007E5C6CEB03F0391F8007C0390FE03F802607FFFEC7FC0001
13F838003FC0283F78BC2E>I<15FF020713C091381F81E091383E00F002FC13F8494813
7C495A4948137E010F143E495A133F4A133F017F147F91C7FC5BA2485AA216FF12035B16
FE150112075B1503A216FC491307A20003140F16F8151F12016D133F0000EC7FF015EF90
387C01CF90393E079FE090380FFE1FD903F813C090C7123FA21680157F160015FEA24A5A
001C5C007F1303485C4A5A4A5A4A5A4849C7FC00F8137E00E05B6C485A387C07E0383FFF
C06C90C8FCEA03F8283F77BC2E>I<171C173C177CA217FCA216011603A21607A24C7EA2
161DA216391679167116E1A2ED01C1A2ED038115071601150EA2031C7FA24B7EA25D15F0
5D4A5AA24A5AA24AC7FC5C140E5C021FB6FC4A81A20270C7127FA25C13015C495AA249C8
FCA2130E131E131C133C5B01F882487ED807FEEC01FFB500E0017FEBFF80A25C39417BC0
44>65 D<49B712C018F818FE903B0003FC0001FF9438007F804BEC3FC0A2F01FE014074B
15F0180FA2140F5D181FA2021F16E05D183F19C0023FED7F804B14FF19004D5A027F4A5A
92C7EA07F0EF1FE0EF7F804AD903FEC7FC92B512F017FE4AC7EA3F800101ED1FE04A6E7E
17078401036F7E5CA30107825CA3010F5E4A1407A260011F150F5C4D5A60013F153F4A4A
5A4D5A017F4A90C7FC4C5A91C7EA0FF849EC3FF0B812C094C8FC16F83C3E7BBD40>I<93
39FF8001C0030F13E0033F9038F803809239FF807E07913A03FC001F0FDA0FF0EB071FDA
1FC0ECBF00DA7F806DB4FC4AC77E495AD903F86E5A495A130F4948157E4948157C495A13
FF91C9FC4848167812035B1207491670120FA2485A95C7FC485AA3127F5BA312FF5BA490
CCFCA2170FA2170EA2171E171C173C173817786C16706D15F04C5A003F5E6D1403001F4B
5A6D4AC8FC000F151E6C6C5C6C6C14F86C6C495A6C6CEB07C090397FC03F8090261FFFFE
C9FC010713F0010013803A4272BF41>I<49B712C018F818FE903B0003FE0003FF943800
7F804BEC1FC0F00FE0F007F014074BEC03F8F001FCA2140F4BEC00FEA3141F4B15FFA314
3F5DA3027F5D5DA219FE14FF92C81203A34917FC4A1507A219F813034A150F19F0A20107
EE1FE05CF03FC0A2010FEE7F804A16006060011F4B5A4A4A5A4D5AA2013F4B5A4AEC3FC0
4DC7FC017F15FEEE03FC4AEB0FF001FFEC7FE0B8128004FCC8FC16E0403E7BBD45>I<49
B812F8A390260003FEC7121F18074B14031801F000F014075DA3140F5D19E0A2141F4B13
38A2EF7801023F027013C04B91C7FCA217F0027F5CED80011603160F91B65AA3ED001F49
EC07805CA3010392C8FC5CF003804C13070107020E14005C93C75A180E010F161E4A151C
183CA2011F5E5C60A2013F15014A4A5A1707017F150F4D5A4A147F01FF913807FF80B9FC
A295C7FC3D3E7BBD3E>I<49B812F0A390260003FEC7123F180F4B1403A2F001E014075D
A3140F5D19C0A2141F5D1770EFF003023F02E013804B91C7FCA21601027F5CED8003A216
0702FFEB1F8092B5FCA349D9003FC8FC4A7F82A20103140E5CA2161E0107141C5CA293C9
FC130F5CA3131F5CA3133F5CA2137FA25C497EB612E0A33C3E7BBD3B>I<DCFF8013E003
0713F0033F9038FC01C09239FFC03E03913A03FC000F07DA0FF0EB078F4A48903803DF80
DA7F80EB01FF4AC8FC495A4948ED7F00495A495A4948814948153E495A13FF91C9FC4848
163C12035B1207491638120FA2485A95C7FC485AA3127F5BA312FF5BA34BB512FE90C7FC
A292C71380A295C7FCA25EA25FA216037E6D5DA2003F15077F001F5E6D140F6C6C141F00
07153F6C6CEC7BF0D801FE14F16C6CEB03E090393FE01F806DB5EA0060010701F890C8FC
9038007FC03B4273BF46>I<49B6FC5BA2D9000313005D5DA314075DA3140F5DA3141F5D
A3143F5DA3147F5DA314FF92C7FCA35B5CA313035CA313075CA3130F5CA3131F5CA3133F
5CA2137FA25C497EB67EA3283E7BBD23>73 D<4AB61280A2180091C713C0167F5FA216FF
94C7FCA35D5EA315035EA315075EA3150F5EA3151F5EA3153F5EA3157FA25EA215FFA293
C8FCA25CA25DA2380F8003EA3FC0D87FE05BA21407D8FFC05B140F01805B49485A12FC00
70495A4A5A6C01FEC9FC383C01FC380F07F03807FFC0C648CAFC314079BD30>I<49B593
3807FFFC496062D90003F0FC00505ADBBF805E1A771AEF1407033F923801CFE0A2F1039F
020FEE071F020E606F6C140E1A3F021E161C021C04385BA2F1707F143C023804E090C7FC
F001C0629126780FE0495A02705FF00700F00E0114F002E0031C5BA2F03803010116704A
6C6C5D18E019070103ED01C00280DA03805BA2943807000F13070200020E5C5FDB03F814
1F495D010E4B5CA24D133F131E011CDAF9C05CEEFB80197F013C6DB4C7FC013895C8FC5E
01784A5C13F8486C4A5CD807FE4C7EB500F04948B512FE16E01500563E7BBD52>77
D<902601FFFE020FB5FC496D5CA2D900016D010013C04AEE3F00193E70141C193CEC07BF
DB3FE01438151F1978020F7FDA0E0F15708219F0EC1E07021C6D5CA203031401023C7FDA
38015DA2701303EC7800027002805BA2047F130702F014C04A013F91C7FCA2715A010114
1F4AECF00EA2040F131E010315F84A151C1607EFFC3C0107140391C7143817FE04011378
4915FF010E16708218F0131E011C6F5AA2173F133C01385E171F137813F8486C6F5AEA07
FEB500F01407A295C8FC483E7BBD44>I<EEFFC0030713F892383F80FE9238FC003FDA03
F0EB0F804A486D7EDA1F80804AC76C7E027E6E7E4A81494814004948811307495A494815
7F133F5C49C9FC4917805B1201485AA212075B000F17FFA25B121F190048485DA448484B
5AA34D5AA25B4D5A12FF60171F60007F163F604D5AA24DC7FC5F003F15014C5A6D5D001F
4B5A4C5A6C6C4A5A4C5A6C6C4AC8FC000315FC6C6C495A6C6CEB07E0017FEB1F8090261F
C07EC9FC903807FFF801001380394273BF46>I<49B77E18F018FC903B0003FE0003FEEF
00FF4BEC7F80F03FC00207151F19E05DA2020F16F0A25DA2141FF03FE05DA2023F16C018
7F4B1580A2027FEDFF00604B495A4D5A02FF4A5A4D5A92C7EA3FC04CB4C7FC4990B512FC
17E04ACAFCA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA25CA2137FA25C49
7EB67EA33C3E7BBD3E>I<49B612FCEFFF8018F0903B0003FE000FF8EF03FE4BEB00FF84
19800207ED3FC05DA219E0140F5DA3021FED7FC05DA2F0FF80143F4B15004D5A60027F4A
5A4B495A4D5AEF3F8002FF02FEC7FC92380007F892B512E01780499038000FE04A6D7E70
7E707E0103814A130083A213075CA25E130F5C5F1603131F5CA3013F020714404A16E05F
017F160119C04A01031303496C1680B6D8800113079438FE0F009338007E1ECAEA3FFCEF
07F03B407BBD42>82 D<92390FF001C0ED7FFE4AB5EA0380913907F80FC791390FC003EF
91391F8001FF4AC71300027E805C495A4948143EA2495AA2010F153C5CA3011F1538A380
94C7FC80A214FC6DB4FC15F015FE6DEBFFC06D14F06D14FC6D80143F020F7F020180EC00
1F150303007F167F163FA2161FA212075A5F120EA2001E153F94C7FCA2163E003E157E16
7C003F15FC4B5A486C5C4B5A6D495AD87DE0EB1F80D8F8F849C8FC017F13FE39F03FFFF8
D8E00F13E048C690C9FC32427ABF33>I<48B9FCA25A903AFE001FF00101F89138E0007F
D807E0163E49013F141E5B48C75BA2001E147FA2001C4B131C123C003814FFA2007892C7
FC12704A153C00F01738485CC716001403A25DA21407A25DA2140FA25DA2141FA25DA214
3FA25DA2147FA25DA214FFA292C9FCA25BA25CA21303A25CEB0FFE003FB67E5AA2383D71
BC41>I<001FB500F090B512F0485DA226003FF0C7380FFC004AEC03F04A5D715A017F15
03A24A5DA201FF150795C7FC91C8FCA2485E170E5BA20003161E171C5BA20007163C1738
5BA2000F167817705BA2001F16F05F5BA2003F1501A2495DA2007F1503A2495DA2160794
C8FC48C8FC5E160E161E6C151C163C5E5E5E6C6C13014B5A001F4A5A6C6C011FC9FC6D13
3E6C6C13F83903FC07F0C6B512C0013F90CAFCEB07F83C406FBD44>I<B500FE91387FFF
E094B5FC19C00003018091380FFC0049C8EA07F000015F606095C7FC170EA25F173C1738
6D5DA26C5E16015F4C5AA24CC8FC5E160E5E805E137F5E5EA24B5AA24B5A150793C9FCEC
C00EA2013F5B153C15385DA25D14C15DECC38014E302E7CAFCEB1FEF14EE14FCA25CA25C
A25C5C130F5CA291CBFC130E3B406DBD44>I<277FFFFE01B500FC90B512E0B5FCA20003
902680000790C7380FFC006C90C701FCEC07F049725A04035EA26350C7FCA20407150EA2
040F5D1A3C041F153862163B6216734F5A6D14E303014B5A6C15C303034BC8FC1683DB07
03140E191E030E151C61031C7F61ED380161157003F04A5A15E002014B5A15C0DA03804A
C9FC60DA0700140E60140E605C029C5D14B8D97FF85D5C715A5C4A5DA24A92CAFC5F91C7
FC705A137E5F137C5F137801705D53406EBD5B>I<027FB612FEA3913AFFF80007FC03C0
14F892C7EA0FF0D901FC141F4AEC3FE04AEC7FC04A15800103EDFF004A5B4C5A4948495A
5F91C7485A49141F010E4A5A4C5A5F011E4AC7FC90C75A4B5A4B5A5E4B5A151F4B5A4B5A
5E15FF4A90C8FC4A5A4A5A5D140F4A5A4A5A4A48130E4B131E02FF141C4990C7FC495A49
48143C4A1438010F1578495A49481470494814F05C01FF4A5A4890C7FC48481403484814
07494A5A000F151F4848143F4848ECFF804848130F90B7FCB8FC94C7FC373E79BD38>90
D<147E49B47E903907C1C38090391F80EFC090383F00FF017E137F4914804848133F485A
A248481400120F5B001F5C157E485AA215FE007F5C90C7FCA21401485C5AA21403EDF038
5AA21407EDE078020F1370127C021F13F0007E013F13E0003E137FECF3E1261F01E313C0
3A0F8781E3803A03FF00FF00D800FC133E252977A72E>97 D<EB1FC0EA0FFF5CA2EA003F
A291C7FCA25BA2137EA213FEA25BA21201A25BA21203A25B147E3907F1FF809038F783E0
9038EF01F013FE390FF800F8A24913FC49137C485A157E5B15FE123FA290C7FCA2481301
15FC127EA2140300FE14F85AA2EC07F0A215E048130F15C0141F15800078EB3F00127C14
7E003C5B383E01F8381E03E06C485A6CB4C7FCEA01F81F4076BE2A>I<EC1FE0ECFFF890
3803F03E903807C00F90381F8007D93F001380017E131F49137F485A485A000715005B00
0F147E484890C7FCA2485AA3127F90C9FCA35A5AA6481403007E5C5D151E003E5C5D6C5C
EC03E0390F800F802603E07EC7FC3801FFF838003FC0212977A72A>I<EE3F80ED1FFF17
00A2ED007FA2167EA216FEA25EA21501A25EA21503A25EA21507A25E147E903801FF8F90
3807C1CF90391F80EFC090383F00FF017E137F5B48486D5A485AA2485A000F92C7FC5B00
1F5CA24848137EA215FE127F90C75AA214015A485CA2140316384814F0A2140716789138
0FE070127C021F13F0007E013F5B003E137FECF3E1261F01E35B3A0F8781E3802703FF00
FFC7FCD800FC133E294077BE2E>I<EC3F80903801FFE0903807E0F890381F803CEB3E00
01FC131E485A485A12074848133E49133C121F4848137C15F8EC03F0397F000FE0ECFF80
B5EAFC0014C048C8FCA45AA61506150E151E007C143C15786C14F0EC01E06CEB07C0390F
801F003807C0FC3801FFF038007F801F2976A72A>I<167C4BB4FC923807C78092380F83
C0ED1F87161FED3F3FA2157EA21780EE0E004BC7FCA414015DA414035DA30103B512F8A3
90260007E0C7FCA3140F5DA5141F5DA4143F92C8FCA45C147EA414FE5CA413015CA4495A
A4495AA4495A121E127F5C12FF49C9FCA2EAFE1EEAF83C1270EA7878EA3FE0EA0F802A53
83BF1C>I<EC03F0EC0FFC91383E0E1C9138FC077E903901F003FE1303903807E001D90F
C013FCEB1F80A2EB3F004914F8137E01FE1303A2484814F0A2150712034914E0A2150F12
074914C0A2151FA216805B153F1203ED7F006D5BA200015B0000495A9038F80F7E90387C
1EFEEB1FF8903807E0FC90C7FC1401A25DA21403A25D001C1307007F5C48130F5D4A5A4A
C7FC48137E00F85B387C03F0381FFFC0D803FEC8FC273B7CA72A>I<EB01FC13FF5CA213
03A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C8FCEC03F890387F0FFE91383E
0F80D97E7813C0ECE007D9FFC013E014801400A2485A5BA25B0003140F16C05BA2000714
1F16805BA2000F143F16005B5D001F147EEDFE074913FCA2003F0101130FEDF80E130016
1E48ECF01CA2007E1538A200FE1570020013E048EC7FC00038EC1F0028407ABE2E>I<14
78EB01FCA21303A314F8EB00E01400AD137C48B4FC38038F80EA0707000E13C0121E121C
EA3C0F1238A2EA781F00701380A2EAF03F140012005B137E13FE5BA212015BA212035B14
38120713E0000F1378EBC070A214F0EB80E0A2EB81C01383148038078700EA03FEEA00F8
163E79BC1C>I<EB01FC13FF5CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133F
A291C8FCED03E049EB0FF8ED3C3C017EEB707CEDE1FC9038FE01C1EC03839038FC070314
0E0001011C13F891383800E0494813001460000313E0EBF9C0EBF78001FEC8FC1207EBFF
E0EBE7F8EBE0FE000F137F6E7EEBC01F6E7E121F16701380A2003F15F0021F13E0010013
80A248148116C0007EEB0F83168000FE14879138078F0048EB03FE0038EB00F826407ABE
2A>107 D<EB07F0EA03FF14E0A2EA000FA214C0A2131FA21480A2133FA21400A25BA213
7EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA25BA2123FA290
C7FCA25A1307127EA2EAFE0F130E12FCA2131E131CA2EA7C381378EA3C70EA1FE0EA0780
144079BE17>I<D801F0D93F80137F3D07FC01FFE003FFC03D0F3E07C1F80F83F03D0E1F
0F00FC1E01F8001E011C90387C3800001C49D97E707F003C01F05C0038157F4A5C26783F
C05C12704A91C7FC91C7127E00F003FE1301494A5CEA007EA20301140301FE5F495CA203
031407000160495C180F03075D0003051F13E0494A1480A2030FEC3F810007F001C0495C
A2031F91383E0380120F494AEC0700A2033F150E001FEF1E1C4991C7EA0FF80007C7000E
EC03E0432979A74A>I<D801F0EB3F803A07FC01FFE03A0F3E07C1F83A0E1F0F00FC001E
011C137C001C49137E003C13F012385C38783FC012705C91C7FC00F015FE495CEA007EA2
150101FE5C5BA2150300015D5B15075E0003020F13704914C0A2031F13F00007ED80E05B
1681EE01C0120F49EC0380A2EE0700001FEC0F0E49EB07FC0007C7EA01F02C2979A733>
I<EC1FC0ECFFF8903803F07C90380FC01FEB1F8090393F000F80017E14C0491307484814
E0485A12075B000F15F0485AA2485AA2ED0FE0127F90C7FCA2151F4815C05AA2ED3F80A2
ED7F00A248147E007C5C007E13015D4A5A003E495A6C495A4A5A260F803EC7FC3807C0FC
3801FFF038003F80242977A72E>I<903903E001F890390FF807FE903A1E7C1E0F80903A
1C3E3C07C0013C137801389038E003E0EB783F017001C013F0ED80019038F07F0001E015
F8147E1603000113FEA2C75AA20101140717F05CA20103140F17E05CA20107EC1FC0A24A
1480163F010F15005E167E5E131F4B5A6E485A4B5A90393FB80F80DA9C1FC7FCEC0FFCEC
03E049C9FCA2137EA213FEA25BA21201A25BA21203A2387FFFE0B5FCA22D3A80A72E>I<
D801F013FC3A07FC07FF803A0F3E0F03C0260E1F1C13E0001EEB380F001C1370003CEBE0
1F123814C0D8783F14C00070903880070092C7FC91C8FC12F05BEA007EA313FE5BA31201
5BA312035BA312075BA3120F5BA3121F5B0007C9FC232979A726>114
D<EC7F80903801FFE0903807C0F890381F003C013E131C013C131E017C133E49137E15FE
A2000114FCA215706D13007FEBFFC014FC6C13FF15806D13C06D13E0010F13F01300140F
14071403120C123F387F80011403D8FF0013E0A300FCEB07C000F0EB0F8012700078EB1F
006C133C381F01F83807FFE0C690C7FC1F297AA725>I<EB01C0EB03F01307A25CA2130F
A25CA2131FA25CA2133FA291C7FCA2007FB51280B6FC1500D8007EC7FC13FEA25BA21201
A25BA21203A25BA21207A25BA2120FA25BA2121F141C1380A2003F133C1438EB00781470
14F05C495AEA1F03495A6C48C7FCEA07FCEA01F0193A78B81E>I<137C48B4141C26038F
80137EEA0707000E7F001E15FE121CD83C0F5C12381501EA781F007001805BA2D8F03F13
03140000005D5B017E1307A201FE5C5B150F1201495CA2151F0003EDC1C0491481A2153F
1683EE0380A2ED7F07000102FF13005C01F8EBDF0F00009038079F0E90397C0F0F1C9039
1FFC07F8903907F001F02A2979A731>I<017CEB01C048B4EB07F038038F80EA0707000E
01C013F8121E001C1403EA3C0F0038EC01F0A2D8781F130000705BA2EAF03F91C712E012
005B017E130116C013FE5B1503000115805BA2ED07001203495B150EA25DA25D15780001
14706D5B0000495A6D485AD97E0FC7FCEB1FFEEB03F0252979A72A>I<017C167048B491
387001FC3A038F8001F8EA0707000E01C015FE001E1403001CEDF000EA3C0F0038177C15
07D8781F4A133C00701380A2D8F03F130F020049133812005B017E011F14784C137013FE
5B033F14F0000192C712E05BA2170100034A14C049137E17031880A2EF070015FE170E00
010101141E01F86D131C0000D9039F5BD9FC076D5A903A3E0F07C1E0903A1FFC03FFC090
2703F0007FC7FC372979A73C>I<903903F001F890390FFC07FE90393C1E0E0F9026780F
1C138001F0EBB83FD801E013F89039C007F07FEA0380000714E0D9000F140048151C000E
4AC7FCA2001E131FA2C75BA2143F92C8FCA35C147EA314FE4A131CA30101143C001E1538
003F491378D87F811470018314F000FF5D9039077801C039FE0F7C033A7C0E3C07802778
3C1E1EC7FC391FF80FFC3907E003F029297CA72A>I<137C48B4143826038F8013FCEA07
07000E7F001E1401001C15F8EA3C0F12381503D8781F14F000701380A2D8F03F13070200
13E012005B017E130F16C013FE5B151F1201491480A2153F000315005BA25D157EA315FE
5D00011301EBF8030000130790387C1FF8EB3FF9EB07E1EB00035DA21407000E5CEA3F80
007F495AA24A5AD8FF0090C7FC143E007C137E00705B387801F0383803E0381E0FC06CB4
C8FCEA03F8263B79A72C>I E /Fn 81 124 df<BA12F8A300010180C7380FFC00D8007F
16F0B3B3B22601FFE0EC3FFCB6D8C01FB512F8A33D3E7DBD44>5
D<4AB4EB0FE0021F9038E03FFC913A7F00F8FC1ED901FC90383FF03FD907F090397FE07F
80494801FF13FF4948485BD93F805C137F0200ED7F00EF003E01FE6D91C7FC82ADB97EA3
C648C76CC8FCB3AE486C4A7E007FD9FC3FEBFF80A339407FBF35>11
D<4AB4FC021F13C091387F01F0903901FC0078D907F0131C4948133E494813FF49485A13
7F1400A213FE6F5A163893C7FCAA167FB8FCA33900FE00018182B3AC486CECFF80007FD9
FC3F13FEA32F407FBF33>I<4AB47E021F13F791387F00FFEB01F8903807F001EB0FE0EB
1FC0EB3F80137F14008101FE80AEB8FCA3C648C77EB3AE486CECFF80007FD9FC3F13FEA3
2F407FBF33>I<4AB4ECFF80021FD9C00F13E0913B7F01F03F80F8903C01F80078FE003C
D907F0D93FF8130E49484948131F49484948EB7F804948484913FF137F02005CA201FE92
C7FC6FED7F0070141C96C7FCAAF13F80BBFCA3C648C76CC7FC197F193FB3AC486C4A6CEB
7FC0007FD9FC3FD9FE1FB5FCA348407FBF4C>I<001E130F397F803FC000FF137F01C013
E0A201E013F0A3007F133F391E600F3000001300A401E01370491360A3000114E04913C0
0003130101001380481303000EEB070048130E0018130C0038131C003013181C1C7DBE2D
>34 D<013F4C7ED9FFC04B7E2601E0E015072607C070150F48486C4B5A023E4BC7FC4848
6C5D48D90FC0EB01FE003ED90EF0EB07FCDA0F3F133E007E903A070FFFF8F8007C0200EB
C1F0EE000300FC6D6C495A604D5A171F95C8FC173E177E177C5F16015F007C4948485A16
07007E5E003E49495A020E131F003F93C9FC6C49133E260F803C137E0238137C6C6C485B
3901E0E0016CB448485AD93F0049133F90C74848EBFFC0030F903801E0E093398007C070
4B4848487E4B153C033E90381F001C4B497F03FC133E4B150F4A48017E7F0203147C5D4A
4801FCEB0380140F5D4AC7FC5C143E5C14FC5C495A13034948027CEB07005C4948147E01
1F033E5B91C8140E013E153F017E6F5B017C92380F803C4917380001706C5A49923801E0
E0496FB45A6C48043FC7FC41497BC34C>37 D<121EEA7F8012FF13C0A213E0A3127FEA1E
601200A413E013C0A312011380120313005A120E5A1218123812300B1C79BE19>39
D<1430147014E0EB01C0EB03801307EB0F00131E133E133C5B13F85B12015B1203A2485A
A2120F5BA2121F90C7FCA25AA3123E127EA6127C12FCB2127C127EA6123E123FA37EA27F
120FA27F1207A26C7EA212017F12007F13787F133E131E7FEB07801303EB01C0EB00E014
701430145A77C323>I<12C07E12707E7E121E7E6C7E7F12036C7E7F12007F1378137CA2
7FA2133F7FA21480130FA214C0A3130714E0A6130314F0B214E01307A614C0130FA31480
A2131F1400A25B133EA25BA2137813F85B12015B485A12075B48C7FC121E121C5A5A5A5A
145A7BC323>I<1506150FB3A9007FB912E0BA12F0A26C18E0C8000FC9FCB3A915063C3C
7BB447>43 D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380
120313005A120E5A1218123812300B1C798919>I<B512FEA617067F961E>I<121EEA7F80
A2EAFFC0A4EA7F80A2EA1E000A0A798919>I<EB01FE90380FFFC090383F03F090387C00
F849137C48487F48487F4848EB0F80A2000F15C04848EB07E0A3003F15F0A290C7120348
15F8A64815FCB3A26C15F8A56C6CEB07F0A3001F15E0A36C6CEB0FC0A26C6CEB1F800003
15006C6C133E6C6C5B017C5B90383F03F090380FFFC0D901FEC7FC263F7DBC2D>48
D<EB01C013031307131F137FEA07FFB5FC139FEAF81F1200B3B3ACEB7FF0B612F8A31D3D
78BC2D>I<EB07FC90383FFF8090B512E03903F01FF83907C007FC390F0001FE001E6D7E
001C1580003CEC7FC05AED3FE01270B4FC6DEB1FF07FA56C5A6CC7FC120CC813E0153FA2
16C0157F168015FF16004A5A5D4A5A4A5A5D4A5A4A5A4AC7FC147E147C5C495A495A495A
495A49C71270133E133C5B4914E0485A485A485A48C7120148B6FCA25A4815C0B7FCA324
3D7CBC2D>I<EB07FC90383FFF809038F80FE03901E003F839078001FCD80F007F000E6D
7E001E1580D81F80137F486C14C07FA27F5BA2121F6C5AC8138015FF1600A24A5AA24A5A
5DEC07E04A5A023FC7FCEB1FFCECFF809038000FE0EC07F86E7E6E7E6E7E1680ED7FC0A2
16E0153FA216F0A2120C123F487E487EA316E0A249137F6CC713C01278EDFF807E6C4913
006C495A3907C007FC3903F80FF0C6B55A013F1380D907F8C7FC243F7CBC2D>I<150E15
1E153EA2157EA215FE1401A21403EC077E1406140E141CA214381470A214E0EB01C0A2EB
0380EB0700A2130E5BA25B5BA25B5B1201485A90C7FC5A120E120C121C5AA25A5AB8FCA3
C8EAFE00AC4A7E49B6FCA3283E7EBD2D>I<00061403D80780131F01F813FE90B5FC5D5D
5D15C092C7FC14FCEB3FE090C9FCACEB01FE90380FFF8090383E03E090387001F8496C7E
49137E497F90C713800006141FC813C0A216E0150FA316F0A3120C127F7F12FFA416E090
C7121F12FC007015C012780038EC3F80123C6CEC7F00001F14FE6C6C485A6C6C485A3903
F80FE0C6B55A013F90C7FCEB07F8243F7CBC2D>I<EC1FE0ECFFF8903803F03E90380FC0
0F90391F000780133E017EEB1FC049133F4848137F12035B12074848EB3F80ED1F00001F
91C7FC5BA2123FA3485AA214FE903887FF8039FF8F07E090389C01F09038B800FC01B013
7E13F0497F16804914C0A2ED1FE0A34914F0A5127FA6123F6D14E0A2121FED3FC0A26C6C
1480A20007EC7F006C6C137E6C6C5B6C6C485A90387E07F06DB45A010F1380D903FCC7FC
243F7CBC2D>I<1238123C123F90B612FCA316F85A16F016E00078C712010070EC03C0ED
078016005D48141E151C153C5DC8127015F04A5A5D14034A5A92C7FC5C141EA25CA2147C
147814F8A213015C1303A31307A3130F5CA2131FA6133FAA6D5A0107C8FC26407BBD2D>
I<EB03FC90381FFF8090387C07E09038F001F83901E0007C48487F48487F48C7FCED0F80
121E16C0003E1407A4123FA26DEB0F807F6C6C131F6D140001FC133E6C6C5B9038FF8078
6C6D5A6CEBF3E06CEBFF806C91C7FC133F6D13C06D7F013F13F801787F48486C7E3903E0
1FFF48486C1380260F800313C048487E489038007FE0003E143F007E141F007CEC0FF015
07481403A31501A46C15E0007C1403A2007E15C06C14076CEC0F806DEB1F006C6C133ED8
07F05B3901FC03F86CB512E0011F1380D903FCC7FC243F7CBC2D>I<EB03FCEB1FFF9038
7E07C09038FC03F048486C7E48486C7E4848137C000F147E4848137F81003F15805B007F
15C0A2151F12FF16E0A516F0A5127F153FA36C7EA2001F147F120F6C6C13FF6D13DF0003
13013900F8039F90387E0F1FD91FFE13E0EB07F090C7FCA2ED3FC0A41680157FD80F8014
00487E486C13FEA24A5A5D49485AEB8007391E000FE0001F495A260FC07FC7FC3803FFFE
6C13F838003FC0243F7CBC2D>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCB3121E
EA7F80A2EAFFC0A4EA7F80A2EA1E000A2779A619>I<121EEA7F80A2EAFFC0A4EA7F80A2
EA1E00C7FCB3121E127FEAFF80A213C0A4127F121E1200A412011380A3120313005A1206
120E120C121C5A1230A20A3979A619>I<007FB912E0BA12F0A26C18E0CDFCAE007FB912
E0BA12F0A26C18E03C167BA147>61 D<15074B7EA34B7EA34B7EA34B7EA34B7E15E7A291
3801C7FC15C3A291380381FEA34AC67EA3020E6D7EA34A6D7EA34A6D7EA34A6D7EA34A6D
7EA349486D7E91B6FCA249819138800001A249C87EA24982010E157FA2011E82011C153F
A2013C820138151FA2017882170F13FC00034C7ED80FFF4B7EB500F0010FB512F8A33D41
7DC044>65 D<B712FCEEFF8017F00001903980000FF86C6CC7EA03FE707E701380EF7FC0
EF3FE0A2EF1FF0A218F8A3170F171FA318F0A2EF3FE0177F18C0EFFF804C1300EE03FCEE
0FF8EE7FE091B6C7FC17E091C7EA07FCEE01FE933800FF80EF7FC0EF3FE0EF1FF018F817
0F18FC1707A218FEA718FC170FA2EF1FF818F0173FEF7FE0EFFFC00403138048486C9038
0FFE00B85A17E094C7FC373E7DBD40>I<DB3FF01306912603FFFE130E020F9038FF801E
913A3FF007E03E9139FF8000F8D903FEC7EA7C7ED907F8EC1EFE4948140FD93FE0140749
481403495A91C812014848150012034848167E5B000F173EA24848161EA2123F5B180E12
7FA349160012FFAC127F7F180EA2123FA27F001F171E181C6C7EA20007173C6D16386C6C
1678000117706C6C16F06EEC01E06D6C15C06D6C1403D90FF0EC07806D6CEC1F00D903FE
143E902600FF8013F891393FF007F0020FB512C0020391C7FC9138003FF037427BBF42>
I<B712FCEEFF8017E000019039C0001FF86C6C48EB03FEEE00FF717E717EEF0FE084717E
717E170184717EA21980187F19C0A3F03FE0A519F0AB19E0A5F07FC0A21980A218FF1900
4D5AA24D5A6017074D5A4D5AEF7FC04DC7FCEE03FE48486CEB1FF8B85A178004FCC8FC3C
3E7DBD45>I<B912E0A300019038C000016C6C48EB001FEF0FF01703A217011700A31870
A41838161CA41800A2163CA2167C16FC150391B5FCA3EC80031500167C163CA2161CA218
07A3180E93C7FCA4181E181CA2183CA2187CA218F8170117031707171F48486CEB01FFB9
12F0A3383E7DBD3E>I<B91280A300019038C000036C6C48EB007FEF1FC0170F1707A217
03A31701A4EF00E0A21638A31800A31678A216F81501150791B5FCA3EC80071501150016
78A21638A693C8FCAF3801FFE0B612F0A3333E7DBD3B>I<DB3FE0130C912603FFFE131C
021F9038FF803C913A7FF00FC07C9139FF0001F0D903FC90380078FC4948143DD91FE014
1F4948140F4948140701FF15034890C8FC491501485A000716005B000F177C5B001F173C
A2485AA2181C127FA25B95C7FC12FFAB041FB512F0127FA26D9139000FFE00EF03FC123F
A27F121FA26C7EA212077F12036C7E7F6C7F6D6C14076D7E6D6C140FD907F8141ED903FE
EC3C7C902600FF80EBF83C913A7FF007F01C021FB5EAC00C020391C8FC9138003FF03C42
7BBF47>I<B6D8C01FB512F8A3000101E0C7383FFC0026007F80EC0FF0B3A691B7FCA302
80C7120FB3A92601FFE0EC3FFCB6D8C01FB512F8A33D3E7DBD44>I<B612F0A3C6EBF000
EB3FC0B3B3B2EBFFF0B612F0A31C3E7EBD21>I<011FB512FCA3D9000713006E5A1401B3
B3A6123FEA7F80EAFFC0A44A5A1380D87F005B007C130700385C003C495A6C495A6C495A
2603E07EC7FC3800FFF8EB3FC026407CBD2F>I<B600C090387FFFFCA3000101E0C7000F
138026007F80913807FE0018F818E0604D5A4DC7FC173E5F5F4C5A4C5A4C5A4C5A4CC8FC
163E5E5E4B5A4B5AED07804B7E151F4B7E4B7E15FF913881EFF8913883C7FCEC87879138
8F03FE91389E01FF14BCDAF8007F4A6D7E5C4A6D7E4A6D7EA2707E707EA2707E707EA270
7F717E84173F717E717EA2717E848419802601FFE04A13C0B600C090B6FCA3403E7DBD47
>I<B612F8A3000101E0C9FC38007F80B3B0EF0380A517071800A45FA35FA25F5F5F4C5A
160748486C133FB8FCA3313E7DBD39>I<B500C093383FFFF0A300016D93387FF800D800
7F18E0D977F016EFA3D973F8ED01CFA2D971FCED038FA3D970FEED070FA26E150E80A26E
6C141CA36E6C1438A26E6C1470A36E6C14E0A26E6CEB01C0A36E6CEB0380A36E6CEB0700
A2037F130EA36F6C5AA26F6C5AA36F6C5AA25FED07F0A2923803F9C0A36FB45AA26F90C7
FCA213F8486C147ED807FFEF3FF8B500F8013C011FB512F0A34C3E7DBD53>I<B56C91B5
12F88080D8007F030713006EEC01FC6E6E5A1870EB77FCEB73FEA2EB71FF01707FA26E7E
6E7EA26E7E6E7EA26E7E6E7EA26E7E6E7FA26F7E6F7EA26F7E6F7EA26F7E6F7EA26F7E6F
1380A2EE7FC0EE3FE0A2EE1FF0EE0FF8A2EE07FCEE03FEA2EE01FF7013F0A2177F173FA2
171F170FA2170701F81503487ED807FF1501B500F81400A218703D3E7DBD44>I<ED7FE0
913807FFFE91391FC03F8091397E0007E04948EB03F8D907F0EB00FE4948147F49486E7E
49486E7E49C86C7E01FE6F7E00018349150300038348486F7EA248486F7EA2001F188049
167F003F18C0A3007F18E049163FA300FF18F0AC007F18E06D167FA4003F18C0A26C6CEE
FF80A36C6C4B1300A26C6C4B5A00035F6D150700015F6C6C4B5A6D5E6D6C4A5A6D6C4A5A
6D6C4AC7FC6D6C14FED901FCEB03F8D9007FEB0FE091391FC03F80912607FFFEC8FC9138
007FE03C427BBF47>I<B712F8EEFF8017E000019039C0003FF86C6C48EB07FCEE01FE70
7EEF7F80EF3FC018E0A2EF1FF0A218F8A818F0A2EF3FE0A218C0EF7F80EFFF004C5AEE07
FCEE3FF091B612C04CC7FC0280C9FCB3A73801FFE0B612C0A3353E7DBD3E>I<B712C016
FCEEFF800001D9C00013E06C6C48EB1FF0EE07FCEE01FE707E84717EA2717EA284A76017
7F606017FF95C7FCEE01FCEE07F8EE1FE0EEFF8091B500FCC8FC16F091388001FCED003F
EE1FC0707E707E83160383160183A383A484A4F0C004190EA28218E0057F131E2601FFE0
161CB600C0EB3FF094381FF83805071370CA3801FFE09438003F803F407DBD43>82
D<D907FC130C90391FFF801C017FEBF03C3901FC03F83A03F0007E7CD807C0EB1FFC4848
130F001F140748C71203003E1401007E1400A2007C157C12FCA2163CA36C151CA27EA26C
6C14007F7FEA3FF8EBFF806C13F86CEBFF806C14F06C14FC6C14FF6C15C0013F14E00107
14F0EB007F020713F89138007FFC150FED07FE15031501ED00FFA200E0157FA3163FA27E
A3163E7E167E6C157C6C15FC6C15F86D13016DEB03F06DEB07E0D8F9FCEB0FC03AF07F80
3F8090391FFFFE00D8E00713F839C0007FC028427BBF33>I<003FB91280A3903AF0007F
E001018090393FC0003F48C7ED1FC0007E1707127C00781703A300701701A548EF00E0A5
C81600B3B14B7E4B7E0107B612FEA33B3D7DBC42>I<B600C090B512F8A3000101E0C700
07130026007F80EC01FC715A1870B3B3A4013F16F06E5DA21701011F5E80010F15036E4A
5A010793C7FC6D6C5C6D6C141E6D6C5C027F14F86E6C485A91390FF00FE00203B5128002
0049C8FCED1FF03D407DBD44>I<B691380FFFFEA3000301E0020113E06C01809138007F
806CEF3F00017F163E181C6E153C013F1638A26E1578011F1670A26D6C5DA26E14010107
5EA26E140301035EA26D6C4AC7FCA2806D150EA26F131E027F141CA26F133C023F1438A2
6E6C5BA26F13F0020F5CA2EDF80102075CA26E6C485AA2EDFE07020191C8FCA26F5A6E13
0EA2ED7F9CA216DCED3FF8A36F5AA36F5AA26F5AA36F5A3F407EBD44>I<B500FE017FB5
D88007B5FCA3000301C0010101E0C713F86C90C849EC3FE07148EC0F807E7215006E143F
017F190E84A26D6C60A24D7E6D6C60A2EFE7F86D6C60A2933801C3FC6E18F00107610403
7F6E0281140101036104077F17006D6C4D5AA2040EEB7F806D6C4DC7FCA24CEB3FC0DA7F
80160EA24CEB1FE003C0161E023F171C047814F0DBE070010F133C021F173804F014F84C
1307DA0FF05EA2DBF1C0EB03FCDA07F95EA2DBFB80EB01FEDA03FF6F5AA293C8FCA26E5F
A24B157F020094C8FCA24B81037C153EA20378151E0338151C58407EBD5D>I<B66C0103
B51280A3000101F0C8EBF8006C6C48ED3FC0725A013F041EC7FC6D7E606D6C15386D6C15
78606D6C5D6E14016D5E6D6D1303606E6C49C8FC6E6C5B170E6E6C131E171C6E6C5B6E6C
137817706E6C13F06F5B6E13016EEB83C05FED7FC7DB3FE7C9FC16EFED1FFE5E150F6F5A
B3A4ED1FFC020FB512FCA3413E7FBD44>89 D<003FB712F8A391C7EA1FF013F801E0EC3F
E00180EC7FC090C8FC003EEDFF80A2003C4A1300007C4A5A12784B5A4B5AA200704A5AA2
4B5A4B5AA2C8485A4A90C7FCA24A5A4A5AA24A5AA24A5A4A5AA24A5A4A5AA24990C8FCA2
495A4948141CA2495A495AA2495A495A173C495AA24890C8FC485A1778485A484815F8A2
4848140116034848140F4848143FED01FFB8FCA32E3E7BBD38>I<EAFFFCA4EAF000B3B3
B3B3ABEAFFFCA40E5B77C319>I<486C13C00003130101001380481303000EEB07004813
0E0018130C0038131C003013180070133800601330A300E01370481360A400CFEB678039
FFC07FE001E013F0A3007F133FA2003F131F01C013E0390F0007801C1C73BE2D>I<EAFF
FCA4EA003CB3B3B3B3ABEAFFFCA40E5B7FC319>I<EB0FF8EBFFFE3903F01F8039078007
E0000F6D7E9038E001F8D81FF07F6E7EA3157F6C5AEA0380C8FCA4EC1FFF0103B5FC9038
1FF87FEB7F803801FC00EA07F8EA0FE0485A485AA248C7FCEE038012FEA315FFA3007F5B
EC03BF3B3F80071F8700261FC00E13CF3A07F03C0FFE3A01FFF807FC3A003FC001F0292A
7DA82D>97 D<EA01FC12FFA3120712031201B1EC03FC91381FFF8091387C07E09039FDE0
01F09039FFC000FC4A137E91C77E49158049141F17C0EE0FE0A217F0A2160717F8AA17F0
A2160FA217E0161F17C06D1580EE3F006D5C6E13FE9039F3C001F89039F1E003F09039E0
780FC09026C03FFFC7FCC7EA07F82D407EBE33>I<49B4FC010F13E090383F00F8017C13
1E4848131F4848137F0007ECFF80485A5B121FA24848EB7F00151C007F91C7FCA290C9FC
5AAB6C7EA3003FEC01C07F001F140316806C6C13076C6C14000003140E6C6C131E6C6C13
7890383F01F090380FFFC0D901FEC7FC222A7DA828>I<ED01FC15FFA3150715031501B1
14FF010713E190381F80F990387E003D49131FD803F81307485A49130348481301121F12
3F5B127FA290C7FCA25AAA7E7FA2123FA26C7E000F14037F000714076C6C497E6C6C497E
D8007C017913F890383F01F190380FFFC1903A01FE01FC002D407DBE33>I<EB01FE9038
0FFFC090383F03F09038FC01F848486C7E4848137E48487F000F158049131F001F15C048
48130FA2127F16E090C7FCA25AA290B6FCA290C9FCA67EA27F123F16E06C7E1501000F15
C06C6C13036DEB07806C6C1400C66C131E017E5B90381F80F8903807FFE0010090C7FC23
2A7EA828>I<EC1FC0EC7FF8903801F83C903807E07E90380FC0FFEB1FC1EB3F81140113
7FEC00FE01FE137C1500AEB6FCA3C648C7FCB3AE487E007F13FFA320407EBF1C>I<167C
903903F801FF903A1FFF078F8090397E0FDE1F9038F803F83803F001A23B07E000FC0600
000F6EC7FC49137E001F147FA8000F147E6D13FE00075C6C6C485AA23901F803E03903FE
0FC026071FFFC8FCEB03F80006CAFC120EA3120FA27F7F6CB512E015FE6C6E7E6C15E06C
810003813A0FC0001FFC48C7EA01FE003E140048157E825A82A46C5D007C153E007E157E
6C5D6C6C495A6C6C495AD803F0EB0FC0D800FE017FC7FC90383FFFFC010313C0293D7EA8
2D>I<EA01FC12FFA3120712031201B1EC01FE913807FFC091381E07E091387803F09138
E001F8D9FDC07F148001FF6D7E91C7FCA25BA25BB3A6486C497EB5D8F87F13FCA32E3F7D
BE33>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCACEA01FC127FA3120712031201B3
AC487EB512F0A3143E7DBD1A>I<1478EB01FEA2EB03FFA4EB01FEA2EB00781400AC147F
EB7FFFA313017F147FB3B3A5123E127F38FF807E14FEA214FCEB81F8EA7F01387C03F038
1E07C0380FFF803801FC00185185BD1C>I<EA01FC12FFA3120712031201B292B51280A3
92383FFC0016E0168093C7FC153C5D5D4A5AEC07C04A5A4AC8FC143E147F4A7E13FD9038
FFDFC0EC9FE0140F496C7E01FC7F496C7E1401816E7E81826F7E151F826F7EA282486C14
FEB539F07FFFE0A32B3F7EBE30>I<EA01FC12FFA3120712031201B3B3B1487EB512F8A3
153F7DBE1A>I<2701F801FE14FF00FF902707FFC00313E0913B1E07E00F03F0913B7803
F03C01F80007903BE001F87000FC2603F9C06D487F000101805C01FBD900FF147F91C75B
13FF4992C7FCA2495CB3A6486C496CECFF80B5D8F87FD9FC3F13FEA347287DA74C>I<39
01F801FE00FF903807FFC091381E07E091387803F000079038E001F82603F9C07F000113
8001FB6D7E91C7FC13FF5BA25BB3A6486C497EB5D8F87F13FCA32E287DA733>I<14FF01
0713E090381F81F890387E007E01F8131F4848EB0F804848EB07C04848EB03E0000F15F0
4848EB01F8A2003F15FCA248C812FEA44815FFA96C15FEA36C6CEB01FCA3001F15F86C6C
EB03F0A26C6CEB07E06C6CEB0FC06C6CEB1F80D8007EEB7E0090383F81FC90380FFFF001
0090C7FC282A7EA82D>I<3901FC03FC00FF90381FFF8091387C0FE09039FDE003F03A03
FFC001FC6C496C7E91C7127F49EC3F805BEE1FC017E0A2EE0FF0A3EE07F8AAEE0FF0A4EE
1FE0A2EE3FC06D1580EE7F007F6E13FE9138C001F89039FDE007F09039FC780FC0DA3FFF
C7FCEC07F891C9FCAD487EB512F8A32D3A7EA733>I<02FF131C0107EBC03C90381F80F0
90397F00387C01FC131CD803F8130E4848EB0FFC150748481303121F485A1501485AA448
C7FCAA6C7EA36C7EA2001F14036C7E15076C6C130F6C7E6C6C133DD8007E137990383F81
F190380FFFC1903801FE0190C7FCAD4B7E92B512F8A32D3A7DA730>I<3901F807E000FF
EB1FF8EC787CECE1FE3807F9C100031381EA01FB1401EC00FC01FF1330491300A35BB3A5
487EB512FEA31F287EA724>I<90383FC0603901FFF8E03807C03F381F000F003E130700
3C1303127C0078130112F81400A27E7E7E6D1300EA7FF8EBFFC06C13F86C13FE6C7F6C14
80000114C0D8003F13E0010313F0EB001FEC0FF800E01303A214017E1400A27E15F07E14
016C14E06CEB03C0903880078039F3E01F0038E0FFFC38C01FE01D2A7DA824>I<131CA6
133CA4137CA213FCA2120112031207001FB512C0B6FCA2D801FCC7FCB3A215E0A9120090
38FE01C0A2EB7F03013F138090381F8700EB07FEEB01F81B397EB723>I<D801FC14FE00
FF147FA3000714030003140100011400B3A51501A31503120015076DEB06FF017E010E13
806D4913FC90381FC078903807FFE00100903880FE002E297DA733>I<B539E00FFFE0A3
2707FE000313006C48EB00FC5E00015D7F00005DA26D13016D5CA26D6C485AA2ECC00701
1F91C7FCA290380FE00EA2ECF01E0107131CA26D6C5AA2ECFC7801011370A2ECFEF00100
5BA2EC7FC0A36E5AA26EC8FCA3140E2B287EA630>I<B53BC3FFFE03FFF8A3290FFE003F
E00013C06C486D48EB3F806C4817006D010F141E00016F131C15076D163C00004A6C1338
A2017F5E4B7E151DD93F805DED3DFC1538D91FC04A5AED78FE9238707E03D90FE0017F5B
EDE03F02F0140701070387C7FC9138F1C01F02F9148F010315CE9138FB800F02FF14DE6D
15FCED00076D5DA24A1303027E5CA2027C1301023C5C023813003D287EA642>I<B539F0
1FFFE0A30003D9C00F1300C690388007F8D97F0013E002805BD93FC05B011F49C7FC9038
0FE00EECF01E6D6C5A01035B6D6C5A6E5AEB00FF6E5A6E5A81141F814A7E81147BECF1FC
903801E1FEECC0FF01037F49486C7ED90F007F011E6D7E013E130F496D7E01FC80486C80
000F4A7EB539803FFFF8A32D277FA630>I<B539E00FFFE0A32707FE000313006C48EB01
FC6F5A00015D7F00005DA2017F495AA2EC8003013F5CA26D6C48C7FCA26E5A010F130EA2
6D6C5AA2ECF83C01031338A26D6C5AA2ECFEF001005BA2EC7FC0A36E5AA36EC8FCA2140E
A2141E141C143C1438A2147800181370127EB45BA2495AA248485AD87E07C9FCEA780EEA
3C3CEA1FF8EA07E02B3A7EA630>I<001FB61280A2EBE0000180140049485A001E495A12
1C4A5A003C495A141F00385C4A5A147F5D4AC7FCC6485AA2495A495A130F5C495A90393F
C00380A2EB7F80EBFF005A5B484813071207491400485A48485BA248485B4848137F00FF
495A90B6FCA221277EA628>I<B812F0A22C0280982D>I E /Fo 39
122 df<B712F0AB240B7F9F2D>45 D<157815FC14031407141F14FF130F0007B5FCB6FC
A2147F13F0EAF800C7FCB3B3B3A6007FB712FEA52F4E76CD43>49
D<EC3FFE0103B512E0010F14FC013F14FF90B712C048D9C07F7F2703FE000F13F8D807F8
01037FD80FE06D7F48486D7F48488001F01680486C6E13C07F486C6E13E07FA27013F0A5
6C5AA26C5AEA0FF0EA03C0C914E05EA218C05E1880A24C13005F4C5A4B5B5F4B5B5F4B5B
4B90C7FC4B5A5E4B5AED7FE04B5A4A5B4A48C8FC4A5A5D4A48EB01F04A5AEC3F804AC7FC
02FEEC03E0495A495A495A495AD91F80140749C8FC013E150F017FB7FC90B812C05A5A5A
5A5A5A5AB9FC1880A4344E79CD43>I<91380FFFC091B512FC0107ECFF80011F15E09026
3FF8077F9026FF800113FC4848C76C7ED803F86E7E491680D807FC8048B416C080486D15
E0A4805CA36C17C06C5B6C90C75AD801FC1680C9FC4C13005FA24C5A4B5B4B5B4B13C04B
5BDBFFFEC7FC91B512F816E016FCEEFF80DA000713E0030113F89238007FFE707E701380
7013C018E07013F0A218F8A27013FCA218FEA2EA03E0EA0FF8487E487E487EB57EA318FC
A25E18F891C7FC6C17F0495C6C4816E001F04A13C06C484A1380D80FF84A13006CB44A5A
6CD9F0075BC690B612F06D5D011F1580010302FCC7FCD9001F1380374F7ACD43>I<177C
17FEA2160116031607160FA2161F163F167FA216FF5D5DA25D5DED1FBFED3F3F153E157C
15FCEC01F815F0EC03E01407EC0FC01580EC1F005C147E147C5C1301495A495A5C495A13
1F49C7FC133E5B13FC485A5B485A1207485A485A90C8FC123E127E5ABA12C0A5C96C48C7
FCAF020FB712C0A53A4F7CCE43>I<D80380150ED807E0157E01FEEC03FED9FFF0137F91
B65A5F5F5F5F5F94C7FC5E5E16F016C093C8FC15F801E190C9FC01E0CAFCABEC0FFF027F
13F001E3B512FE01E76E7E9026FFF8077FDAC0017F49C713F8496E7E49143F4981496E7E
6C481680C9FC18C08218E0A418F0A3EA0FE0487E487E487E487EA418E0A35B6C484A13C0
5B491680003EC85A003F17006C6C4A5A6D5D6C6C4A5AD807F8495BD803FE01075B2701FF
C03F5B6C90B65A013F4AC7FC6D14F8010314C09026007FF8C8FC344F79CD43>I<ED0FFF
92B512E0020780021F14FC91397FFE03FE903A01FFF0007F4901C0EB3F804990C7121F49
48EC7FC0494814FF49484913E049485B01FF5C485BA2485B5AA2486F13C04A6D1380486F
1300177E94C7FC5AA291CAFC5AA21508913801FFF8020713FFB54814C04A14F04AC66C7E
023C6D7E4A6D7E4A6D7E7013804A15C0A24A15E07013F05C18F8A491C714FCA37EA67EA4
6C17F880A27E18F06C5D18E06C6D15C07E6E4913806C6D15006D6C495A6D6CEB7FFC6DB4
48485A6D90B55A010315C0010092C7FC023F13FC020713C0364F7ACD43>I<121F7F7FEB
FF8091B81280A45A1900606060A2606060485F0180C86CC7FC007EC95A4C5A007C4B5A5F
4C5A160F4C5A484B5A4C5A94C8FC16FEC812014B5A5E4B5A150F4B5AA24B5AA24B5A15FF
A24A90C9FCA25C5D1407A2140FA25D141FA2143FA4147F5DA314FFA55BAC6D5BA2EC3FC0
6E5A395279D043>I<171F4D7E4D7EA24D7EA34C7FA24C7FA34C7FA34C7FA24C7FA34C80
83047F80167E8304FE804C7E03018116F8830303814C7E03078116E083030F814C7E031F
81168083033F8293C77E4B82157E8403FE824B800201835D840203834B800207835D844A
B87EA24A83A3DA3F80C88092C97E4A84A2027E8202FE844A82010185A24A820103854A82
010785A24A82010F855C011F717FEBFFFCB600F8020FB712E0A55B547BD366>65
D<BA12C019FEF1FFC01AF01AFCD8000701F0C7000313FFDE007F7F737F070F7F737F8785
87858785A287A84F5BA263616361634F5B4F5B077F90C7FC4E485A060713F892B812E097
C8FC861AF003F0C7000313FE9539003FFF80070F13E0737F07017F87737F747E1C807413
C0A27413E0A31CF0A386A362A31CE0A2621CC0A250138097B5FC1C004F5B19074F5B073F
13F04EB55ABC128098C7FC1AF81AC007F8C8FC54527CD160>I<932601FFFCEC01C0047F
D9FFC013030307B600F81307033F03FE131F92B8EA803F0203DAE003EBC07F020F01FCC7
383FF0FF023F01E0EC0FF94A01800203B5FC494848C9FC4901F882494982494982494982
4949824990CA7E494883A2484983485B1B7F485B481A3FA24849181FA3485B1B0FA25AA2
98C7FC5CA2B5FCAE7EA280A2F307C07EA36C7FA21B0F6C6D1980A26C1A1F6C7F1C006C6D
606C6D187EA26D6C606D6D4C5A6D6D16036D6D4C5A6D6D4C5A6D01FC4C5A6D6DEE7F806D
6C6C6C4BC7FC6E01E0EC07FE020F01FEEC1FF80203903AFFE001FFF0020091B612C0033F
93C8FC030715FCDB007F14E0040101FCC9FC525479D261>I<BA7E19FCF1FF801AF01AFC
D8000701F0C7000F13FF060014C0071F7F070713F807017F737F747E747F747F86747F74
7F8886888688A2757EA31D8087A21DC0A51DE0A387A963A31DC0A51D80A2631D00A3515A
A2646264505B6264505B505B5090C7FCF2FFFE4F5B07075B071F5B96B512C0060F91C8FC
BB5A1AF01AC007FCC9FC19805B527CD167>I<BC1280A5D8000701F8C7000114C0F0001F
19071901851A7F1A3F1A1FA2F20FE0A21A07A31A03A318F81BF01A01A497C7FC1701A317
031707170F177F92B6FCA59238F8007F170F170717031701A317001B3EA31B7CA395C8FC
A21BFCA21BF8A21A01A31A031BF01A071A0FA21A1F1A3FF27FE0F101FF1907191F0603B5
FCBCFCA21BC0A34F517CD058>I<932601FFFCEC01C0047FD9FFC013030307B600F81307
033F03FE131F92B8EA803F0203DAE003EBC07F020F01FCC7383FF0FF023F01E0EC0FF94A
01800203B5FC494848C9FC4901F8824949824949824949824949824990CA7E494883A248
4983485B1B7F485B481A3FA24849181FA3485B1B0FA25AA298C8FC5CA2B5FCAE6C057FB7
12E0A280A36C94C7003FEBC000A36C7FA36C7FA27E6C7FA26C7F6C7FA26D7E6D7F6D7F6D
6D5E6D7F6D01FC93B5FC6D13FF6D6C6D5C6E01F0EC07FB020F01FEEC1FF10203903AFFF0
01FFE0020091B6EAC07F033FEE001F030703FC1307DB007F02E01301040149CAFC5B5479
D26A>71 D<B8D8C003B8FCA5D8000701F8C9001FEBE000B3AE92BAFCA503F8C9121FB3B1
B8D8C003B8FCA560527CD169>I<B812C0A5D8000701F8C7FCB3B3B3B2B812C0A52A527C
D132>I<B600FC073FB512FE6F61A26F96B6FCA2D80007F5C00070EF01EFA202EF6DEF03
CFA202E76DEF078FA202E36DEF0F0FA202E16D171EA302E06D173CA26F6C1778A26F6C17
F0A26F6DED01E0A26F6DED03C0A36F6DED0780A26F6DED0F00A26F6D151EA26F6D5DA370
6C5DA2706C5DA2706D495AA2706D495AA2706D495AA3706D49C7FCA2706D131EA2706D5B
A2716C5BA3716C5BA271EB81E0A271EBC3C0A271EBE780A27101FFC8FCA3715BA2715BA2
725AA2725AA2D93FFC6F5AB74DB712FEA2725AA2725A77527CD180>77
D<B912F0F0FF8019F819FF1AC0D8000701F0C714F0060F7F060113FE727F737F737F8573
7F87A2737FA387A863A2616363A24F5B4F5B4F90C8FC4F5A06035B060F13F095B512C092
B8C9FC19F819E019F89226F0000313FE9439007FFF80727F727F727F727F727F8684A286
84A787A71D1C75133EA38575137E73157C7513FC731401B86C6D9038F803F807039038FE
07F07390B512E0736C14C0080F1400CEEA7FFC5F537CD164>82 D<91260FFF80130791B5
00F85B010702FF5B011FEDC03F49EDF07F9026FFFC006D5A4801E0EB0FFD4801800101B5
FC4848C87E48488149150F001F824981123F4981007F82A28412FF84A27FA26D82A27F7F
6D93C7FC14C06C13F014FF15F86CECFF8016FC6CEDFFC017F06C16FC6C16FF6C17C06C83
6C836D826D82010F821303010082021F16801400030F15C0ED007F040714E01600173F05
0F13F08383A200788200F882A3187FA27EA219E07EA26CEFFFC0A27F6D4B13806D17006D
5D01FC4B5A01FF4B5A02C04A5A02F8EC7FF0903B1FFFC003FFE0486C90B65AD8FC0393C7
FC48C66C14FC48010F14F048D9007F90C8FC3C5479D24B>I<B700FC017FB600FE91B612
F0A5D8003F01C0C8001F01E0C9EBF8006F71EE0FC06D7161876F1C1F6D7196C7FC6F8373
606D1E3E6F836D7160876F1CFC6D666F4B801F016D66704A806E525A88704A17076E059F
5F70021F80080F160F6E6570023F806EDC3E074CC8FC8870027E5F6EDC7C03163E7002FC
804F6C167E6E1C7C700101814F6C16FC6E745B70010317016E4C6D5D060716C00580496D
14036F63DDC00F16E04F6D14076F07F05BDDE01F170F6F92C76C5D1DF8DDF03E6E141F6F
98C9FCDDF87E16FC067C6E5C6FF1FE3EDDFCFC177E6F4A6E147C1DFFDDFFF06E14FC6F62
A24E816F62A270496F5BA24E817061A295C97E7061A270487090CAFCA37048705AA24D16
01040360A27048705A84537DD18B>87 D<EC7FFF0107B512F0013F14FE90B77E48D9E00F
7F2703FE000113F0486C6D7F6EEB3FFC48826E131F83707FA36C496D7FA26C90C7FC6C5A
C9FCA6037FB5FC020FB6FC91B7FC01071487013FEBF0074913803901FFFC004813F0485B
485B485B4890C7FC5A5BA2485AA45EA26D5C007F151D163D6C6C02797F6C6D01F113F86C
9026C003E1EBFFE06C9026F81FC014F06C90B5487EC6ED001F011F01FC010713E0010101
E090C8FC3C387CB641>97 D<913801FFF8021FEBFF8091B612F0010315FC010F9038C00F
FE903A1FFE0001FFD97FFC491380D9FFF05B4817C048495B5C5A485BA2486F138091C7FC
486F1300705A4892C8FC5BA312FFAD127F7FA27EA2EF03E06C7F17076C6D15C07E6E140F
6CEE1F806C6DEC3F006C6D147ED97FFE5C6D6CEB03F8010F9038E01FF0010390B55A0100
1580023F49C7FC020113E033387CB63C>99 D<4DB47E0407B5FCA5EE001F1707B3A49138
01FFE0021F13FC91B6FC010315C7010F9038E03FE74990380007F7D97FFC0101B5FC4948
7F4849143F484980485B83485B5A91C8FC5AA3485AA412FFAC127FA36C7EA37EA26C7F5F
6C6D5C7E6C6D5C6C6D49B5FC6D6C4914E0D93FFED90FEFEBFF80903A0FFFC07FCF6D90B5
128F0101ECFE0FD9003F13F8020301C049C7FC41547CD24B>I<913803FFC0023F13FC49
B6FC010715C04901817F903A3FFC007FF849486D7E49486D7E4849130F48496D7E481780
48497F18C0488191C7FC4817E0A248815B18F0A212FFA490B8FCA318E049CAFCA6127FA2
7F7EA218E06CEE01F06E14037E6C6DEC07E0A26C6DEC0FC06C6D141F6C6DEC3F806D6CEC
FF00D91FFEEB03FE903A0FFFC03FF8010390B55A010015C0021F49C7FC020113F034387C
B63D>I<ED3FFC0203B5FC020F14C0023F14E09139FFF81FF0499038C03FF849EB807F49
903800FFFC495A495AA2495AA2EE7FF8495AEE3FF0EE0FC093C7FCAEB712E0A526007FF8
C8FCB3B3A7007FB512FEA52E547CD329>I<EB3FF0B5FCA51203C6FCB3A4EE1FFC93B512
C0030314F0030F8092391FE07FFC92393F001FFE037C8003F07FDAF1E081ECF3C0DAF780
7F8502FFC7FC5CA25CA45CB3ACB6D8F807B612C0A542537BD24B>104
D<137F497E000313E0487FA2487FA76C5BA26C5BC613806DC7FC90C8FCADEB3FF0B5FCA5
12017EB3B3A6B612E0A51B547BD325>I<EB3FF0B5FCA51203C6FCB3A54CB512F8A59339
003FFE00EF1FF0EF3FC04D5A4DC7FCEE03FEEE07F84C5A4C5AEE7FC04CC8FC4B5A4B5AED
0FF8ED1FE04B7E4B7EECF1FF02F37F02F77F91B6FC83159F030F7F02FE80DAF8077F4A7E
6F7F6F7F83707E82707F84707F707F82707F84707F177F717E4D13C0B6D8F003B6FCA540
537CD247>107 D<EB3FF0B5FCA512017EB3B3B3B1B612F0A51C537BD225>I<D93FF0D91F
FCEDFFE0B591B500C0010713FE030302F0011F6D7E030F6E017F8092271FE07FFCD9FF03
7F922A3F001FFE01F8007F0003027C9126FF03E080C602F06DD90780137FDAF1E0038FC7
7FDAF3C0159EDAF7806D01BC143F07FC8102FFC75C4A5EA24A5EA44A5EB3ACB6D8F807B6
D8C03FB512FEA567367BB570>I<D93FF0EB1FFCB591B512C0030314F0030F8092391FE0
7FFC92393F001FFE0003027C80C602F07FDAF1E081ECF3C0DAF7807F8502FFC7FC5CA25C
A45CB3ACB6D8F807B612C0A542367BB54B>I<913801FFE0021F13FE91B612C0010315F0
010F9038807FFC903A1FFC000FFED97FF86D6C7E49486D7F48496D7F48496D7F4A147F48
834890C86C7EA24883A248486F7EA3007F1880A400FF18C0AC007F1880A3003F18006D5D
A26C5FA26C5F6E147F6C5F6C6D4A5A6C6D495B6C6D495B6D6C495BD93FFE011F90C7FC90
3A0FFF807FFC6D90B55A010015C0023F91C8FC020113E03A387CB643>I<903A3FF001FF
E0B5010F13FE033FEBFFC092B612F002F301017F913AF7F8007FFE0003D9FFE0EB1FFFC6
02806D7F92C76C7F4A824A6E7F4A6E7FA2717FA285187F85A4721380AC1A0060A36118FF
A2615F616E4A5BA26E4A5B6E4A5B6F495B6F4990C7FC03F0EBFFFC9126FBFE075B02F8B6
12E06F1480031F01FCC8FC030313C092CBFCB1B612F8A5414D7BB54B>I<90397FE003FE
B590380FFF80033F13E04B13F09238FE1FF89139E1F83FFC0003D9E3E013FEC6ECC07FEC
E78014EF150014EE02FEEB3FFC5CEE1FF8EE0FF04A90C7FCA55CB3AAB612FCA52F367CB5
37>114 D<903903FFF00F013FEBFE1F90B7FC120348EB003FD80FF81307D81FE0130148
487F4980127F90C87EA24881A27FA27F01F091C7FC13FCEBFFC06C13FF15F86C14FF16C0
6C15F06C816C816C81C681013F1580010F15C01300020714E0EC003F030713F015010078
EC007F00F8153F161F7E160FA27E17E07E6D141F17C07F6DEC3F8001F8EC7F0001FEEB01
FE9039FFC00FFC6DB55AD8FC1F14E0D8F807148048C601F8C7FC2C387CB635>I<143EA6
147EA414FEA21301A313031307A2130F131F133F13FF5A000F90B6FCB8FCA426003FFEC8
FCB3A9EE07C0AB011FEC0F8080A26DEC1F0015806DEBC03E6DEBF0FC6DEBFFF86D6C5B02
1F5B020313802A4D7ECB34>I<D93FF8913801FFC0B50207B5FCA50003ED001FC61607B3
AE5FA35FA2017F5D173B177B6D6C14F3DC01E313F06D6CD907C3EBFFC0903A0FFFC03F83
6D90B51203010114FE6D6C13F8020701E091C7FC42377BB54B>I<B600F00107B5FCA500
0101F8C8EA7FE06C6DED3F00A2017F163E6E157E013F167C6E15FC6D5E6F13016D5E8117
036D5E6F13076D5E6F130F6D5E6F131F6D93C7FC815F6E6C133E177E023F147C6F13FC6E
5C16816E5C16C3A26EEBE3E016E76E5C16FF6E5CA26E91C8FCA26F5AA36F5AA26F5AA26F
5AA26F5A6F5A40367DB447>I<B600F00107B5FCA5C601F8C8EA7FE06EED3F00A26D6C15
3E187E013F167C6E15FC6D5E6F13016D5E6F13036D5E8117076D6D5C170F6D6D5C171F6D
93C7FC6F5B027F143E6F137E023F147C6F13FCA26E6D5A16816EEBC1F016C36E5C16E76E
5C16FF6E5CA26E91C8FCA36F5AA26F5AA26F5AA26F5AA26F5AA35E150F5E151F93C9FC5D
D81FC0133E486C137E486C137C486C13FC5D14015D14034A5A6C48485A49485A263FC07F
CAFCEB81FE6CB45A6C13F000035BC690CBFC404D7DB447>121 D
E /Fp 40 123 df<DA0FF813FC91397FFF07FF903B01F807DF83C0903A07E001FF0F903B
1F8007FE1FE090393F000FFC137E16F85B9338F007804848010790C7FC1503ACB812F8A3
2801F80003F0C7FCB3AB486C497E267FFFE0B512F0A3333B7FBA30>11
D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F0007017E497EA25B
A2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA486C497E267FFFE0B5
12C0A32A3B7FBA2E>I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83F00F903C07E001CF
C00380903C1F8000FF0001C090273F0007FE130F017E4948497EA2495CA248485C03076E
5A03030203C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3AA486C496C497E26
7FFFE0B500C1B51280A3413B7FBA45>14 D<121C127FEAFF80A213C0A3127F121C1200A4
12011380A2120313005A1206120E5A5A5A12600A19798817>44 D<B512FCA516057F941C
>I<121C127FEAFF80A5EA7F00121C0909798817>I<121C127FEAFF80A5EA7F00121CC7FC
B2121C127FEAFF80A5EA7F00121C092479A317>58 D<B648B512FEA30001902680000313
006C90C76C5AB3A491B6FCA391C71201B3A6486D497EB648B512FEA337397DB83E>72
D<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397EB81E>I<B5933807FFF86E5DA2
0001F0FC002600DFC0ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC01
83A3D9C0FEEC0303A2027F1406A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C
13C0A3913901FC0180A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D
5A487ED80FFC6D48497EB500C00203B512F8A2ED018045397DB84C>77
D<B612FEEDFFE016F8000190388007FE6C90C76C7EEE3FC0707E707E707EA2707EA283A6
5FA24C5AA24C5A4C5AEE3F8004FFC8FCED07FC91B512E05E9138000FF0ED03F8ED00FE82
707E707EA2161F83A583A6F00180A217F8160F1803486D01071400B66D6C5A0401130693
3800FE0ECAEA3FFCEF07F0393B7DB83D>82 D<D90FF813C090383FFE0190B512813903F8
07E33907E000F74848137F4848133F48C7121F003E140F007E1407A2007C140312FC1501
A36C1400A37E6D14006C7E7F13F86CB47E6C13F8ECFF806C14E06C14F86C14FEC680013F
1480010714C0EB007F020713E0EC007FED3FF0151F150FED07F8A200C01403A21501A37E
A216F07E15036C15E06C14076C15C06C140F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03F
FFF8010F13E0D8C00190C7FC253D7CBA2E>I<003FB812E0A3D9C003EB001F273E0001FE
130348EE01F00078160000701770A300601730A400E01738481718A4C71600B3B0913807
FF80011FB612E0A335397DB83C>I<B5D8FC07B5D8F001B5FCA30007902780001FFEC7EA
1FF86C48C7D80FF8EC07E000010307ED03C01B807F6C6F6C1500A26E5F017F6E6C1406A2
80013F4A6C5CA280011F4A6D5BEE067FA26D6C010E6D5BEE0C3FA26D6C011C6D5BEE181F
A26D6C6F5BEE300FA26D6C6F485AEE6007A26D6C4CC7FC9338C003FCA203805D913B7F81
8001FE06A203C1150EDA3FC3C7EAFF0CA203E3151CDA1FE6EC7F98A215F6DA0FFCEC3FF0
A302075E4B141FA202035E4B140FA202015E4B1407A2020093C8FC4B80503B7EB855>87
D<EB1FE0EBFFFC3803E03F3907000F80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5A
C8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA314
01A26C13036CEB077C903980063E18383FC01E3A0FE0781FF03A03FFF00FE03A007F8007
C026277DA52A>97 D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E9039F3801F
809039F7000FC001FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E167FAA167E16
FEA216FC15016D14F8ED03F07F01EEEB07E001C6EB0FC09039C7801F00903881E07E9038
00FFF8C7EA1FC0283B7EB92E>I<EB03FC90381FFF8090387E03E03901F80070484813F8
3907E001FC380FC003A2EA1F80123F90380001F848EB00F01500A2127E12FEAA127E127F
A26C14067F001F140E6D130C000F141C6C6C13386C6C13706C6C13E039007C07C090381F
FF00EB07F81F277DA525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F
9038F801EF3903F0007F4848133F4848131FA24848130F123F90C7FC5AA2127E12FEAA12
7E127FA27EA26C6C131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F90
381FFE0FD907F813C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E03903F001
F0D807E013F8380FC0004848137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA5
127EA2127FA26C14037F001F14076C6C13060007140E6D131CD801F013386C6C13709038
7E03E090381FFF80903803FC0020277EA525>I<147E903803FF8090380FC1E0EB1F8790
383F0FF0137EA213FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB487E387FFFF8
A31C3B7FBA19>I<ED03F090390FF00FF890393FFC3C3C9039F81F707C3901F00FE03903
E007C03A07C003E010000FECF000A248486C7EA86C6C485AA200075C6C6C485A6D485A6D
48C7FC38073FFC38060FF0000EC9FCA4120FA213C06CB512C015F86C14FE6CECFF804815
C03A0F80007FE048C7EA0FF0003E140348140116F8481400A56C1401007C15F06CEC03E0
003F1407D80F80EB0F80D807E0EB3F003901FC01FC39007FFFF0010790C7FC26387EA52A
>I<EA03F012FFA3120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039F3800FC0EBF7
0013FE496D7EA25BA35BB3A3486C497EB500C1B51280A3293A7EB92E>I<EA0380EA0FE0
487EA56C5AEA0380C8FCAAEA03F012FFA312071203B3AA487EB512C0A312387EB717>I<
EB01C0EB07F0EB0FF8A5EB07F0EB01C090C7FCAAEB01F813FFA313071301B3B3A2123C12
7E00FF13F01303A214E038FE07C0127C383C0F00EA0FFEEA03F8154984B719>I<EA03F0
12FFA3120F1203B1913801FFFCA39138007FC01600157C15705D4A5A4A5A4AC7FC141E14
38147814FC13F1EBF3FEEBF73F01FE7FEBF81F496C7E8114076E7E6E7E811400157E157F
811680ED1FC0486CEB3FF0B500C0B5FCA3283A7EB92C>I<EA03F012FFA3120F1203B3B3
AD487EB512C0A3123A7EB917>I<2703F00FF0EB1FE000FFD93FFCEB7FF8913AF03F01E0
7E903BF1C01F83803F3D0FF3800FC7001F802603F70013CE01FE14DC49D907F8EB0FC0A2
495CA3495CB3A3486C496CEB1FE0B500C1B50083B5FCA340257EA445>I<3903F00FF000
FFEB3FFCECF03F9039F1C01F803A0FF3800FC03803F70013FE496D7EA25BA35BB3A3486C
497EB500C1B51280A329257EA42E>I<EB03FE90380FFF8090383E03E09038F800F84848
137C48487F48487F4848EB0F80001F15C090C712074815E0A2007EEC03F0A400FE15F8A9
007E15F0A2007F14076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F006C6C137EC66C
13F890387E03F090381FFFC0D903FEC7FC25277EA52A>I<3903F01FE000FFEB7FF89038
F1E07E9039F3801F803A07F7000FC0D803FEEB07E049EB03F04914F849130116FC150016
FEA3167FAA16FEA3ED01FCA26DEB03F816F06D13076DEB0FE001F614C09039F7803F0090
38F1E07E9038F0FFF8EC1FC091C8FCAB487EB512C0A328357EA42E>I<D903F813C09038
1FFE0190387E07819038FC01C33903F000E3000714774848133749133F001F141F485A15
0F48C7FCA312FEAA127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF3901F801CF39
007E078F90381FFE0FEB07F890C7FCABED1FE00203B5FCA328357DA42C>I<3807E01F00
FFEB7FC09038E1E3E09038E387F0380FE707EA03E613EE9038EC03E09038FC0080491300
A45BB3A2487EB512F0A31C257EA421>I<EBFF03000313E7380F80FF381E003F487F487F
00707F12F0A2807EA27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC67F01071380
EB007F141F00C0EB0FC01407A26C1303A37E15806C13077EEC0F00B4131E38F3C07C38E1
FFF038C03F801A277DA521>I<1318A51338A31378A313F8120112031207001FB5FCB6FC
A2D801F8C7FCB215C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01F81A347FB220
>I<D803F0EB07E000FFEB01FFA3000FEB001F00031407B3A4150FA3151F12016D133F00
00EC77F86D9038E7FF8090383F03C790381FFF87903A03FC07E00029267EA42E>I<B538
803FFEA33A0FF8000FF06C48EB07E00003EC03C06D148000011500A26C6C1306A26D130E
017E130CA26D5BA2EC8038011F1330A26D6C5AA214E001075BA2903803F180A3D901FBC7
FCA214FF6D5AA2147CA31438A227257EA32C>I<B53A1FFFE03FFEA3260FF8009038000F
F86C48017EEB03E018C00003023EEB0180A26C6C013FEB0300A36C6CEC8006156FA2017E
9038EFC00C15C7A2D93F016D5A15830281EBF038D91F831430150102C3EBF87090260FC6
001360A2D907E66D5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A7FA20100141E
4A130E0260130C37257EA33C>I<B538807FFFA33A03FE003FF00001EC1F80000092C7FC
017E131C6D13186D6C5AECC070010F5B6D6C5AECF180EB03FB6DB4C8FC6D5AA2147F804A
7E8114CF903801C7E090380383F090380703F8EB0601496C7E011C137E49137F01787F49
6D7E486C80000FEC3FF0D8FFFE90B51280A329247FA32C>I<B538803FFEA33A0FF8000F
F06C48EB07C00003EC03806C7E16007F00001406A2017E5BA2137F6D5BA26D6C5AA2ECC0
70010F1360A26D6C5AA214F101035BA2D901FBC7FCA214FF6D5AA2147CA31438A21430A2
14701460A25CA2EA7C0100FE5B130391C8FC1306EAFC0EEA701C6C5AEA1FF0EA0FC02735
7EA32C>I<003FB512FCA2EB8003D83E0013F8003CEB07F00038EB0FE012300070EB1FC0
EC3F800060137F150014FE495AA2C6485A495AA2495A495A495AA290387F000613FEA248
5A485A0007140E5B4848130C4848131CA24848133C48C7127C48EB03FC90B5FCA21F247E
A325>I E /Fq 7 117 df<ED03E04B7EA24B7EA34B7EA24B7EA34B7EA292B57EA34A8015
F302038015E1A202078015C0020F80ED807FA2021F80ED003F4A80023E131FA2027E8002
7C7F02FC814A7FA20101824A7F49B77EA3498202C0C7FC010F824A147FA2011F8291C812
3F4982013E151FA2017E82017C8101FE83B500F80107B61280A4413A7DB948>65
D<EB3FFE0003B512E0000F14F8391FF00FFE003FEB03FF6D6C7F6E7FA26F7EA26C5A6C5A
EA0380C8FCA2EC3FFF010FB5FC137F3901FFF87F00071380380FFE00EA3FF85B485A12FF
5BA415FF6D5A127F263FF00713F83B1FFC1FBFFFC0390FFFFE1F0003EBF80F39003FE003
2A257DA42E>97 D<13FFB5FCA412077EAF4AB47E020F13F0023F13FC9138FE03FFDAF000
13804AEB7FC00280EB3FE091C713F0EE1FF8A217FC160FA217FEAA17FCA3EE1FF8A217F0
6E133F6EEB7FE06E14C0903AFDF001FF80903AF8FC07FE009039F03FFFF8D9E00F13E0D9
C00390C7FC2F3A7EB935>I<903801FFC0010F13FC017F13FFD9FF8013802603FE0013C0
48485AEA0FF8121F13F0123F6E13804848EB7F00151C92C7FC12FFA9127FA27F123FED01
E06C7E15036C6CEB07C06C6C14806C6C131FC69038C07E006DB45A010F13F00101138023
257DA42A>I<9038FE03F000FFEB0FFEEC3FFF91387C7F809138F8FFC000075B6C6C5A5C
A29138807F80ED3F00150C92C7FC91C8FCB3A2B512FEA422257EA427>114
D<90383FF0383903FFFEF8000F13FF381FC00F383F0003007E1301007C130012FC15787E
7E6D130013FCEBFFE06C13FCECFF806C14C06C14F06C14F81203C614FC131F9038007FFE
140700F0130114007E157E7E157C6C14FC6C14F8EB80019038F007F090B512C000F81400
38E01FF81F257DA426>I<130FA55BA45BA25B5BA25A1207001FEBFFE0B6FCA3000390C7
FCB21578A815F86CEB80F014816CEBC3E090383FFFC06D1380903803FE001D357EB425>
I E /Fr 31 121 df<140C141C1438147014E0EB01C01303EB0780EB0F00A2131E5BA25B
13F85B12015B1203A2485AA3485AA348C7FCA35AA2123EA2127EA4127CA312FCB3A2127C
A3127EA4123EA2123FA27EA36C7EA36C7EA36C7EA212017F12007F13787FA27F7FA2EB07
80EB03C01301EB00E014701438141C140C166476CA26>40 D<12C07E12707E7E7E120F6C
7E6C7EA26C7E6C7EA21378137C133C133E131E131FA2EB0F80A3EB07C0A3EB03E0A314F0
A21301A214F8A41300A314FCB3A214F8A31301A414F0A21303A214E0A3EB07C0A3EB0F80
A3EB1F00A2131E133E133C137C13785BA2485A485AA2485A48C7FC120E5A5A5A5A5A1664
7BCA26>I<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A31201138012
0313005A1206120E5A5A5A12600B1D78891B>44 D<B612C0A61A067F9721>I<1618163C
167CA2167816F8A216F01501A216E01503A216C01507A21680150FA2ED1F00A2151E153E
A2153C157CA2157815F8A25D1401A24A5AA25D1407A25D140FA292C7FC5CA2141E143EA2
143C147CA25CA25C1301A25C1303A25C1307A25C130FA291C8FC5BA2133EA2133C137CA2
137813F8A25B1201A25B1203A2485AA25B120FA290C9FC5AA2121E123EA2123C127CA212
7812F8A25A126026647BCA31>47 D<16C04B7EA34B7EA34B7EA34B7EA3ED19FEA3ED30FF
A203707FED607FA203E07FEDC03FA2020180ED801FA2DA03007F160FA20206801607A24A
6D7EA34A6D7EA34A6D7EA20270810260147FA202E08191B7FCA249820280C7121FA249C8
7F170FA20106821707A2496F7EA3496F7EA3496F7EA201788313F8486C83D80FFF03037F
B500E0027FEBFFC0A342477DC649>65 D<DB0FFE146092B500C013E0020314F0913A0FFC
01FC0191393FC0003E02FFC7EA0F83D903FCEC03C74948EC01E74948EC00FF4948157F49
48153F4948151F49C9120F485A491607120348481603A248481601A248481600A2123FA2
491760127FA31900485AAE6C7EA21960A2123F7FA2001F18E07F000F18C0A26C6C160119
806C6C160312016DEE07006C6C16066D6C150E6D6C5D6D6C5D6D6C15786D6C5D6D6C4A5A
D900FFEC0780DA3FC0011FC7FCDA0FFC13FC0203B512F0020014C0DB0FFEC8FC3B487BC5
46>67 D<B8FC17F017FC00019039C00007FF6C499038007FC0017FED1FE0EF07F0EF03FC
717E717E84727E727E727EA2727E85180385A2180185A38584A31A80AD1A00A36061A361
180361180761180F614E5A183F614EC7FC18FEEF03FC4D5AEF1FE001FFED7FC0486DD907
FFC8FCB812FC17F094C9FC41447CC34B>I<B912F8A3000101C0C7127F6C6C48EC07FC17
011700187C183C181CA284A31806A4180704067FA395C7FCA4160EA2161E163E16FE91B5
FCA3EC8000163E161E160EA21606A319C0A3F0018093C7FCA41803A21900A260A260A218
1EA2183E187EEF01FE170748486C147FB95AA33A447CC342>I<DB0FFE146092B500C013
E0020314F0913A0FFC01FC0191393FC0003E02FFC7EA0F83D903FCEC03C74948EC01E749
48EC00FF4948157F4948153F4948151F49C9120F485A491607120348481603A248481601
A248481600A2123FA2491760127FA396C7FC485AAD4CB612C06C7EA293C7387FF000725A
003F171F7FA2121F7F120FA26C7EA26C7E6C7EA26C7E6D7E6D6C153F6D7E6D6C157F6D6C
15E7D903FEEC01C7D900FFEC0383DA3FE0EB0F01DA0FFCEBFE000203B500F81360020002
E090C7FCDB0FFEC9FC42487BC54D>71 D<B612F0A3C6EBF0006D5A6D5AB3B3B3A4497E49
7EB612F0A31C447DC323>73 D<B612F8A3000101E0C9FC6C6C5A5CB3B31830A418701860
A518E0A3EF01C0A217031707A2170F173F177FEE01FF48486C011F1380B9FCA334447CC3
3D>76 D<49B41303010FEBE007013F13F89039FE00FE0FD801F8131FD807E0EB079F49EB
03DF48486DB4FC48C8FC4881003E81127E82127C00FC81A282A37E82A27EA26C6C91C7FC
7F7FEA3FF813FE381FFFE06C13FE6CEBFFE06C14FC6C14FF6C15C0013F14F0010F800101
80D9001F7F14019138001FFF03031380816F13C0167F163F161F17E000C0150FA31607A3
7EA36C16C0160F7E17806C151F6C16006C5D6D147ED8FBC05CD8F9F0495AD8F07C495A90
393FC00FE0D8E00FB51280010149C7FC39C0003FF02B487BC536>83
D<B600C0010FB5FCA3000101E0C813F026007F80ED1F80F00F00A21806B3B3A7180E6D6C
150CA2181C131F6E1518010F163818306D6C1570606D6C14016D6C5D6D6CEC0780027F4A
C7FC6E6C131EDA1FE0137C913907FC03F00201B55A6E6C1380DB07FCC8FC40467CC349>
85 D<003FB500E0011FB5FCA3C691C7000713E0D93FFC020190C7FC6D4815FC010F6F5A
6D6C15E0A26D6C4A5A6D6C5D4DC8FC6D6D5B6E6C13065F6E6C131C6E6C13185F6E6C1370
6E6C13605F913803FE01DA01FF5B4CC9FC6E1387ED7FC616CCED3FFC6F5A5E6F7E6F7EA2
6F7E82A203067F150E92380C7FC04B6C7E15389238301FF04B6C7E15E04B6C7E4A486C7E
14034B6C7E02066D7F140E020C6E7E4A6E7E143802306E7E4A6E7E14E04A6E7E49486E7E
130349C86C7E496F7F5B496C8201FF83000701E0020313F8B500F8021FEBFFF0A344447E
C349>88 D<001FB81280A39126800001130001FCC7FC01F04A5A01C04A5A5B90C8485A12
1E4C5A484B5AA200384B5A4C5AA24B90C7FC00304A5AA24B5AA24B5AC8485AA24B5A4B5A
A24B5A5C93C8FC4A5AA24A5A4A5AA24A5A4A5AA24A5A14FF5D4990C9FCEF0180495A495A
A2495A494814031800495AA2495A495A5F4890C8FC485A5F485A48485D5F48485D17FE48
4814034848140F16FFB8FCA331447BC33C>90 D<EB07FC90383FFF809038F80FE03903C0
03F048C66C7E000E6D7ED80FC0137E486C137F6D6D7EA36F7EA26C5AEA0380C8FCA4EC0F
FF49B5FC90380FFE1FEB3FC0EBFF00EA03FC485A485A485A485A127F5B176048C7FCA315
3FA36D137F007F14EF6D9038C7E0C0003F13013A1FE00783F13B07F81E03FF802701FFFC
0113003A001FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120712031201B3EC03FC91380F
FF8091383C07E091387001F89039FDE0007E02807F01FFEC1F8091C713C049EC0FE04914
0717F0A2EE03F8A217FCA2160117FEAB17FC1603A217F8A2EE07F0A26DEC0FE017C06D14
1F01FBEC3F80D9F380EB7E00D9E1C05B9039E0F001F89039C03C07E09039801FFF80C7D8
03FCC7FC2F467DC436>I<EC7F80903803FFF090380FC07C90383F000F01FCEB03804848
EB01C00003140F4848EB1FE049133F120F485AA2485AED1FC0007FEC070092C7FCA290C9
FC5AAB7E7FA2123F16307F001F15706C6C146016E06C6C14C06C6C13010001EC03806C6C
EB0700013F131E90381FC078903807FFF001001380242E7DAC2B>I<EB01FE903807FFC0
90381F03F090387E00FC49137E48487F485A4848EB1F80000F15C049130F121F484814E0
1507A2007F15F090C7FCA25AA390B6FCA290C9FCA67EA27FA2123F16306C7E1670000F15
606D14E06C6C14C0000314016C6CEB03806C6CEB0700013E131E90381F80F8903803FFE0
010090C7FC242E7DAC2B>101 D<EE0F80D901FCEB7FE0903A0FFF81F0F090393F07E381
9039FC01FF033A01F800FE014848017E13E00007027FC7FC497F000F8149131F001F81A9
000F5D6D133F000792C7FC6D5B0003147E6C6C5B6D485A3903BF07E090380FFF80260701
FCC8FC90CAFCA25AA37F6C7E7F90B512F86C14FF16E06C15F86C6C8048B67E3A07C0000F
FF48481300003FC8EA3F80003E151F48ED0FC0A2481507A56C150F007C1680007E151F00
3E16006C153E6C6C5CD807E0495AD801F8EB07E0D8007FEB3F8090261FFFFEC7FC010113
E02C427DAC31>103 D<EA01FC12FFA3120712031201B3EC01FE913807FFC091381E07F0
91383801F802707FECE000D9FDC07F5C01FF147F91C7FCA25BA35BB3A8486CECFF80B5D8
F83F13FEA32F457DC436>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCADEA01FC12FF
A3120712031201B3B0487EB512F8A315437DC21C>I<EA01FC12FFA3120712031201B3A2
92381FFFE0A36F1300ED07F816E05E5E030EC7FC5D5D5D5D4A5A4A5A4AC8FC5CEC3F804A
7E14FF9038FDCFE09038FF8FF01407496C7E01FC7F14016E7E81816F7E82151F6F7E8215
07826F7E8282486C491380B5D8F81F13F8A32D457DC433>107 D<3901FC01FE00FF9038
07FFC091381E07F091383801F8000701707F0003EBE0002601FDC07F5C01FF147F91C7FC
A25BA35BB3A8486CECFF80B5D8F83F13FEA32F2C7DAB36>110 D<EC7F80903803FFF090
380FC0FC90383E001F496D7E496D7E48486D7E48486D7E48486D7E000F81A24848147E00
3F157FA290C87E481680A44816C0AA6C1680A26D147F003F1600A2001F157E6D14FE000F
5D6D130100075D6C6C495A6C6C495A6C6C495A013E49C7FC90381FC0FE903807FFF89038
007F802A2E7DAC31>I<3903F803F000FFEB1FFCEC3C3EEC707F0007EBE0FF3803F9C000
015B13FBEC007E153C01FF13005BA45BB3A748B4FCB512FEA3202C7DAB26>114
D<90383FE0183901FFFC383907E01F78390F0003F8001E1301481300007C1478127800F8
1438A21518A27EA27E6C6C13006C7E13FC383FFFE06C13FC6C13FF6C14C06C14E0C614F0
011F13F81300EC0FFC140300C0EB01FE1400157E7E153EA27EA36C143C6C147C15786C14
F86CEB01F039F38003E039F1F00F8039E07FFE0038C00FF01F2E7DAC26>I<1306A5130E
A4131EA3133E137EA213FE12011207001FB512F0B6FCA2C648C7FCB3A4150CAA017E131C
017F1318A26D133890381F8030ECC070903807E0E0903801FFC09038007F001E3E7EBC26
>I<D801FC147F00FFEC3FFFA300071401000380000181B3A85EA35DA212006D5B017E90
38077F80017F010E13C06D011C13FE90380FC078903803FFF09026007F8013002F2D7DAB
36>I<B539F007FFFCA30003D9C00113C0C6496C1300017F14FC013F5C6E13E06D7E010F
495A6D6C485A02F890C7FC903803FC060101130E6E5A903800FF186E5AEC3FF05D141F14
0F6E7E81140FEC0DFCEC19FEEC38FF4A7E9138603F8002C07F0101131F49486C7E02007F
01066D7E010E1303496D7E013C80017C80D801FC1580D80FFE4913C0B5D8800F13FFA330
2B7FAA33>120 D E /Fs 25 122 df<120FEA3FC0EA7FE0EAFFF0A6EA7FE0EA3FC0EA0F
00C7FCB3B3A2120FEA3FC0EA7FE0EAFFF0A6EA7FE0EA3FC0EA0F000C3E74BD24>58
D<170FA34D7EA24D7EA34D7EA34D7EA34C7F17DFA29338039FFC178FA29338070FFE1707
040F7FEE0E03A2041E80EE1C01A2043C80EE3800A24C80187FA24C80183FA24B4880181F
0303814C130FA203078193C71207A24B81030E80A24B8284A24B8284A24B82197F03F082
4B153FA20201834B151FA202038392B8FCA24A83A292C91207020E8385A24A8485023C84
023882A20278840270177FA202F0844A173FA24948841A1FA24948841A0FA249CB7F1A07
4985865B496C85497E48486C4D7F000F01F8051F13F0B60407B612F0A45C657DE463>65
D<DD7FF81560040FB56C14E0047F14E00303B600FC1301030F9038E003FEDB3FFEC7383F
8003DBFFF0EC07C04A01C0913803F007020790C9EAF80FDA0FFC167C4A48EE1E1FDA7FE0
160F4A48EE07BF4949EE03FF4990CAFC4948834948834A187F495A013F193F4948181F5C
01FF190F485BA24890CC1207A248481903A2485A1B01121FA25B123F1B005BA2127F1C00
A4485AB06C7EA5123F1CE07FA2121F7FA2000F1A011CC06C7EA26C7E1B036C6D19801B07
6C7F017F1A006E606D6C181E131F6D6C606E18386D6C18786D6C606D6D4C5A6D6D4C5A6E
6C1607DA1FF84C5A6E6C4CC7FC6EB4167C020101C04A5A6E01F0EC07F0DB3FFEEC1FC092
280FFFE001FFC8FC030390B512FCDB007F14F0040F14809326007FF8C9FC53667AE360>
67 D<BC1280A4C601FCC81201D93FF8DB001F13C0011F170319001A7F1A3F1A1F1A0F1A
07A21A03A21BE01A01A41A00A61B701870A41B00A418F0A4170117031707170F177F91B7
FCA402F8C7127F170F1707170317011700A41870A31B0EA41B1C95C8FCA51B3C1B38A31B
78A41BF0A31A01A21A031A07A2F20FE01A1F1A7F1AFF1903013F171FD9FFFC0303B5FCBC
12C0A44F6279E15A>69 D<B712E0A4C60280CAFCD93FFCCBFC131F5CB3B3B21A1CA61A3C
1A38A61A78A41AF8A21AF01901A219031907A2190F191F193F197FF001FF1807013F043F
13E0D9FFFC0203B5FCBBFCA4466279E153>76 D<B500FC071FB51280A36E61C6F5800001
3F51C7FCD91DFFF177FCA2011C6D18E7A36E6CEF01C7A36E6CEF0387A36E6CEF0707A26E
6C170EA36E6C171CA36E6C1738A36E6C1770A26E6D16E0A36F6CED01C0A36F6CED0380A3
6F6CED0700A26F6C150EA36F6C5DA36F6C5DA36F6C5DA26F6D5CA3706C495AA3706C495A
A3706C49C7FCA2706C130EA3706C5BA3706C5BA3706C5BA3706D5AA294387FC1C0A39438
3FE380A3DD1FF7C8FCA3EF0FFEA2013E6F5AA2137F715A2601FFC04F7E000701F896383F
FF80B66C6D48023FB61280A3715A696278E17A>I<B812FCEFFFE018FCF0FF80C601FCC7
000F13E0D93FF89138007FF8011FEE1FFCF007FF06017F727FF13FE0737E86737E737EA2
868587A28587A96361A298C8FC6162624F5A191F4F5A4F5AF1FF804E90C9FCF007FEF01F
F8F0FFE0050F138091B700FCCAFC18E08402F8C7EA1FFE943801FF80716C7EF03FF0727E
F007FC727E85727F8486737EA3737EAA86AA1DE086191FA3070F14017414C00707140349
6C8390B570EC0780B76F9038800F00736D5A97383FF03E97380FFFFCCD000313F0973800
3FC05B6479E162>82 D<DA07FF1403023F01F05B49B512FC010702FF5B90260FFC0013C0
D93FE090380FF01FD97F80EB03F801FEC86C5A4848157E4848ED1F7F48486F5A4848815B
001F824981003F8290CAFC4883A2007E83A212FE84A384A27EA36D82A26C7EA26D93C7FC
6C7E7F7F6C7E6D7E6C13E06C13FCECFFC06C14F86CECFF806C15F86DECFF80011F15E06D
15F8010315FE01006F7E021F81020181DA003F80030380DB003F7F04037FEE007FEF1FFF
71138017037113C083A2F07FE0183FA2181F00E018F0180FA41807A27EA47E19E0180F7E
19C07E6C171F19806D163F6D17006D5E6D16FE486C5E6D4B5AD8FC7F1503D91F80EC0FF0
26F80FE04A5AD907FCEC7F8029F001FFE003FFC7FC6D6CB512FC48011F14F0020314C048
9026001FFEC8FC3C667AE349>I<003FBC12F8A49126C000039038C0000301FCC76C49EB
007F01F0190F01C019074848F103FC90C81701007E1A00007C1B7CA300781B3CA400701B
1CA600F01B1E481B0EA7C91800B3B3B3A54C7FA2041F13F84AB87EA457627CE160>I<EC
3FF0903803FFFE010F6D7E90393FC03FE090397E0007F801F86D7ED801E06D7E48486D7E
48486E7E48C86C7E7F01F06E7E487E6D6E7EA3707EA36C5AEA03E0C9FCA6167FED7FFF02
0FB5FC91387FF807903801FF80903807FC00EB1FF0EB7FC0495AD803FEC7FC485A120F5B
485A485AA2484817E0A312FF5BA2160FA3161F6D141B007F153B16736D913971FC01C06C
6C14E1001FEC01C1D80FFC903A0780FE03806C6C903A0F00FF07002701FF807E6DB4FC27
007FFFF86D5A011F01E0EB1FF8010190C7EA07E03B417ABF42>97
D<4AB47E020F13F8023F13FE9139FF007F80D903FCEB07E0D907F0EB01F0D91FE0EB0078
49488049488049C87E48485D4915FF00034B138048485CA2485AA2485AA2003F6F130049
EC007C94C7FC127FA35B12FFAD127F7FA4123F7FA2001FEE01C07F000F16036D16801207
6C6C15076D160000015E6C6C151E6D6C5C6D6C5C6D6C5CD90FF8495AD903FCEB07C0903A
00FF803F8091263FFFFEC7FC020F13F80201138032417CBF3A>99
D<EC03FE91381FFFE091B512F8903901FE03FE903A07F0007F8049486D7ED93FC06D7E49
C76C7E496E7E49140348488148481401000782491400000F8283485A1880123F49153FA2
007F17C0A35BA212FF90B8FCA30180CAFCA9127F7FA3123FA27F121FEF01C06C7E17036C
6C1680A26C6C15070001EE0F006D150E6C6C151E6D6C5C6D6C5C6D6C5CD907F0EB03E0D9
03FC495A902700FF803FC7FC91383FFFFC020F13F00201138032417CBF3A>101
D<ED0FF0ED7FFC4AB5FC913907F81F8091390FE00FC091381FC03F91393F807FE0EC7F00
5C495A5C0103EC3FC0A24948EB0F0093C7FCA2495AB3A5B712F0A426000FF0C8FCB3B3B0
497EEB3FFE003FB6FCA42B657EE428>I<EB03C0EA07FFB5FCA41201EA007FA2133FB3AA
EE7FE0923803FFFC030F13FFDB3F0013C00378EB1FE04B6D7EDAC1C06D7EDAC3808002C7
C7120302CE81170114DC14D802F86E7E5CA35CA35CB3B3496C4A7F496C4A7FB6D8F003B6
12C0A442647DE349>104 D<133C13FF487F487FA66C5B6C90C7FC133C90C8FCB3A2EB03
C0EA07FF127FA41201EA007FA2133FB3B3AC497E497EB612E0A41B5F7DDE23>I<EB03C0
EA07FFB5FCA41201EA007FA2133FB3B3B3B3AD497E497EB612F0A41C647DE323>108
D<D903C0D9FFC0EC07FED807FF010301F891381FFFC0B5010F01FE027F13F0923D3F00FF
8001F807FC0378903B3FC003C001FEDAC1E090261FE00FC77E0001D9C3C090260FF01E6E
7ED8007F49902607F81C6E7E02C7C75CD93FCE6E6C486E7E02CC166002DC16E002D85E02
F8DA01FF6F7E4A5EA24A93C8FCA44A5DB3B3496C4A6C4B7E496C4A6D4A7EB6D8F007B6D8
803FB512FCA4663F7CBE6F>I<D903C0EB7FE0D807FF903803FFFCB5010F13FFDB3F0013
C00378EB1FE04B6D7E0001D9C1C06D7E27007FC3808002C7C71203D93FCE81170114DC14
D802F86E7E5CA35CA35CB3B3496C4A7F496C4A7FB6D8F003B612C0A4423F7DBE49>I<ED
FF80020F13F8023F13FE9139FF007F80D903FCEB1FE0D907F0EB07F0D90FC0EB01F8D93F
80EB00FE49C8127F017E81496F7E48486F7E00038349150700078348486F7EA2001F8349
1501A2003F83A348486F7EA400FF1880AC007F1800A26D5DA2003F5FA36C6C4B5AA36C6C
4B5A00075FA26C6C4B5A6C6C4B5AA26C6C4B5A017F4BC7FC6D6C14FE6D6C495AD90FF0EB
07F8D903FCEB1FE0D900FFEB7F806EB5C8FC020F13F8020113C039417CBF42>I<D903C0
EB7FC0D807FF903807FFFCB5011F13FFDB7F0013C003F8EB1FF0DAC3E0EB07F80001D9C7
806D7E26007FCFC76C7E02DE6E7ED93FFC6F7E4A6F7E4A82181F4A82727E5C727EA2727E
A3727EA41A8084AC4E1300A54E5AA2611807A24E5A6E5E181F6E4B5A6E5E187F6E4B5A02
DE4A90C7FC02CF4A5ADAC780495ADAC3C0EB0FF0DAC1F0EB3FE0913AC07E01FF806FB448
C8FC030F13F80300138093CAFCB3A3497E497EB612F0A4415B7DBE49>I<9039078003F8
D807FFEB0FFFB5013F13C092387C0FE0913881F01F9238E03FF00001EB838039007F8700
148FEB3F8E029CEB1FE0EE0FC00298EB030002B890C7FCA214B014F0A25CA55CB3B0497E
EBFFF8B612FCA42C3F7CBE33>114 D<9139FFE00180010FEBFC03017FEBFF073A01FF00
1FCFD803F8EB03EFD807E0EB01FF48487F4848147F48C8123F003E151F007E150F127CA2
00FC1507A316037EA27E7F6C7E6D91C7FC13F8EA3FFE381FFFF06CEBFF806C14F86C14FF
6C15C06C6C14F0011F80010714FED9007F7F02031480DA003F13C01503030013E0167F00
E0ED1FF0160F17F86C15071603A36C1501A37EA26C16F016037E17E06D14076DEC0FC06D
1580D8FDF0141FD8F8F8EC7F00013E14FC3AF01FC00FF80107B512E0D8E001148027C000
3FF8C7FC2D417DBF34>I<B66C49B512E0A4000101F8C8387FFE0026007FE0ED1FF819E0
013F705A61131F6E93C7FC130F180E6E151E0107161C8001035EA26E157801011670806D
5EA26F1301027F5DA26E6C495AA26F1307021F92C8FCA26E6C130EA26F131E0207141CA2
6F133C020314388102015CA26F13F06E5C168092387F81C0A216C3033F5B16E3DB1FE7C9
FCA216FF6F5AA26F5AA36F5AA26F5AA36F5A433F7FBD46>118 D<B6D8801FB500E090B5
12F8A4000301F0C7D87FFCC7001F1380C601C0DA3FF0913807FE00051F6F5A017F030F6F
5A64133F05075E6E81011F030F5EA26E6F1403010F031F5E171D6E6F14070107033D93C7
FC17386E6F5C01030378150EEF707F6E70131E010103F0151CEFE03F6E70133C6D020116
38EFC01F03806F1378027F01031670EF800F03C06F13F0023F01075EEF000703E0EDF801
021F495E040E130303F0EDFC03020F011E5E041C130103F8EDFE070207013C93C8FC0438
130003FC6F5A02030178150E0470147F03FE169E020101F0159C4C143F03FF16FC6E5F4C
141FA2037F5E4C140FA2033F5E93C81207A26F5E031E1503030E5E5D3F7FBD60>I<B66C
49B512E0A4000101F8C8387FFE0026007FE0ED1FF819E0013F705A61131F6E93C7FC010F
160EA26D6C5DA26E153C01031638A26D6C5DA26E15F06D5EA26E6C495AA26F1303023F5D
A26F1307021F92C8FC6F5B020F140EA26F131E0207141C6F133C02031438A26F13780201
14706F13F06E5CA21681037F5B16C3033F5BA216E7031F90C9FC16FF6F5AA36F5AA26F5A
A36F5AA26F5AA215015E15035EA2150793CAFC5D150EA2151E151C153CD81F801338487E
486C5BA25D14015D49485A383F80074948CBFC001E133E380FC0FC6CB45A000113E06C6C
CCFC435B7FBD46>121 D E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 1052 613 a Fs(Lo)t(cal)44 b(Error)e(Reco)l(v)l(ery)h(in)i(SRM)e
(:)1028 796 y(Comparison)g(of)g(Tw)l(o)g(Approac)l(hes)1436
1048 y Fr(Ching-Gung)31 b(Liu)h(\(USC\),)1367 1164 y(Deb)s(orah)g
(Estrin)h(\(USC/ISI\),)1461 1281 y(Scott)g(Shenk)m(er)h(\(Xero)m(x\),)
1350 1397 y(Lixia)d(Zhang)h(\(UCLA/Xero)m(x\))1767 1734
y Fq(Abstract)652 1885 y Fp(SRM)40 b(is)f(a)g(generic)g(framew)n(ork)e
(for)i(reliable)g(m)n(ulticast)g(deliv)n(ery)-7 b(.)72
b(In)40 b(order)e(to)527 1985 y(maximize)30 b(the)g(collab)r(oration)d
(among)i(the)h(group)e(mem)n(b)r(ers)h(in)h(error)e(reco)n(v)n(ery)-7
b(,)27 b(b)r(oth)527 2084 y(retransmission)21 b(requests)g(and)i
(replies)e(are)h(m)n(ulticast)g(to)h(the)f(en)n(tire)g(group.)34
b(SRM)23 b(uses)527 2184 y(random)k(timers)g(to)h(e\013ectiv)n(ely)f
(suppress)g(duplicate)g(requests)g(and)g(replies.)37
b(Ho)n(w)n(ev)n(er,)527 2284 y(a)29 b(few)g(mem)n(b)r(ers)g(with)g
(frequen)n(t)g(losses)e(can)i(still)g(cause)f(frequen)n(t)h
(retransmissions)e(to)527 2383 y(all)h(the)g(group)e(mem)n(b)r(ers.)652
2483 y(T)-7 b(o)32 b(further)g(impro)n(v)n(e)e(the)j(scalabilit)n(y)e
(of)h(SRM,)g(one)g(m)n(ust)g(lo)r(calize)g(the)g(scop)r(e)g(of)527
2583 y(error)19 b(reco)n(v)n(ery)g(tra\016c.)34 b(In)21
b(this)h(pap)r(er)e(w)n(e)h(presen)n(t)g(t)n(w)n(o)f(approac)n(hes)f
(to)i(lo)r(cal)f(reco)n(v)n(ery:)527 2682 y(hop-based)31
b(scop)r(e)g(con)n(trol)g(and)g(use)h(of)f(lo)r(cal)h(reco)n(v)n(ery)d
(groups.)47 b(The)32 b(\014rst)g(approac)n(h)527 2782
y(uses)21 b(hop)h(coun)n(t)f(to)h(limit)g(the)g(distance)g(requests)e
(and)i(replies)f(tra)n(v)n(el,)g(whereas)f(the)j(sec-)527
2882 y(ond)j(approac)n(h)e(con\014nes)h(error)f(reco)n(v)n(ery)f
(tra\016c)i(to)h(b)r(e)g(within)h(lo)r(cal)e(reco)n(v)n(ery)e(groups.)
527 2981 y(The)38 b(lo)r(cal)f(reco)n(v)n(ery)e(groups)h(and)i(hop)f
(coun)n(t)h(settings)f(are)g(automatically)g(created)527
3081 y(and)29 b(dynamically)f(adjusted)h(based)f(on)h(observ)n(ed)e
(loss)h(patterns.)40 b(W)-7 b(e)29 b(use)f(sim)n(ulation)527
3180 y(exp)r(erimen)n(ts)g(to)f(examine)g(the)h(p)r(erformance)f(of)g
(b)r(oth)h(approac)n(hes.)300 3467 y Fo(1)135 b(In)l(tro)t(duction)300
3670 y Fn(The)42 b Fm(Sc)-5 b(alable)44 b(R)-5 b(eliable)45
b(Multic)-5 b(ast)43 b Fn(framew)m(ork)f(\(SRM\))h([1])g(is)e(a)i
(generic)f(framew)m(ork)g(for)300 3783 y(reliable)25
b(m)m(ulticast)i(deliv)m(ery)-8 b(.)38 b(In)27 b(order)f(to)i(maximize)
e(the)h(collab)s(oration)f(among)h(the)g(group)300 3896
y(mem)m(b)s(ers)42 b(in)g(the)h(error)f(reco)m(v)m(ery)j(pro)s(cess,)h
(b)s(oth)c(retransmission)f(requests)h(and)h(replies)300
4008 y(are)37 b(m)m(ulticast)g(to)h(the)f(en)m(tire)g(group.)60
b(SRM)37 b(tak)m(es)h(a)g(receiv)m(er-driv)m(en)e(approac)m(h)i(in)d
(error)300 4121 y(reco)m(v)m(ery)41 b(to)f(a)m(v)m(oid)f(the)g(message)
i(implosion)36 b(problem)h([2)q(],)42 b(and)c(uses)h(random)f(timers)g
(to)300 4234 y(e\013ectiv)m(ely)43 b(suppress)c(duplicate)i(requests)g
(and)g(replies.)73 b(Unfortunately)-8 b(,)44 b(b)s(ecause)e(ev)m(ery)
300 4347 y(lost)32 b(pac)m(k)m(et)j(results)c(in)g(a)i(reply)f(b)s
(eing)f(sen)m(t)i(to)g(the)g(en)m(tire)f(group,)h(a)g(single)e(lossy)h
(link)f(can)300 4460 y(still)36 b(cause)i(frequen)m(t)g(global)f
(retransmissions.)61 b(This)36 b(b)s(eha)m(vior)h(limits)e(the)j
(scalabilit)m(y)f(of)300 4573 y(SRM)j(as)h(net)m(w)m(ork)h(and)e(group)
g(size)g(increases.)71 b(T)-8 b(o)41 b(further)f(impro)m(v)m(e)g(the)h
(scalabilit)m(y)e(of)300 4686 y(SRM,)30 b(w)m(e)h(wish)e(to)i(lo)s
(calize)f(the)g(scop)s(e)h(of)f(error)g(reco)m(v)m(ery)i(tra\016c.)441
4799 y(In)c(this)f(pap)s(er,)h(w)m(e)g(presen)m(t)h(t)m(w)m(o)g
(di\013eren)m(t)f(mec)m(hanisms)f(to)i(lo)s(calize)f(the)h(scop)s(e)f
(of)g(error)300 4912 y(reco)m(v)m(ery)33 b(tra\016c.)45
b(The)31 b(hop-scop)s(ed)g(error)g(reco)m(v)m(ery)j(mec)m(hanism)d
(uses)g(hop)g(coun)m(t)h(to)g(limit)300 5025 y(the)39
b(distance)g(that)g(request)g(and)f(reply)g(messages)i(can)f(tra)m(v)m
(el.)67 b(In)38 b(con)m(trast,)43 b(the)c(group-)300
5138 y(scop)s(ed)33 b(error)g(reco)m(v)m(ery)i(mec)m(hanism)e
(con\014nes)g(the)g(propagation)h(of)f(error)g(reco)m(v)m(ery)i
(tra\016c)1927 5506 y(1)p eop
%%Page: 2 2
2 1 bop 300 249 a Fn(within)25 b(some)j(lo)s(cal)f(m)m(ulticast)g
(groups.)39 b(Sim)m(ulation)25 b(results)i(of)g(these)h(mec)m(hanisms)f
(suggest)300 361 y(that)c(they)f(b)s(oth)g(reduce)g(error)f(reco)m(v)m
(ery)j(tra\016c)f(without)e(in)m(tro)s(ducing)f(signi\014can)m(t)h(o)m
(v)m(erhead.)441 474 y(The)37 b(pap)s(er)f(is)h(organized)g(as)h(follo)
m(ws:)54 b(Section)37 b(2)h(giv)m(es)g(a)f(brief)f(description)g(of)h
(SRM)300 587 y(framew)m(ork)i(and)f(the)h(problems)e(that)i(w)m(e)g
(address)f(in)f(this)h(pap)s(er.)64 b(Section)39 b(3)g(and)f(4)h(de-)
300 700 y(scrib)s(e)31 b(the)h(hop-scop)s(ed)g(error)g(reco)m(v)m(ery)h
(and)f(group-scop)s(ed)g(error)g(reco)m(v)m(ery)i(mec)m(hanisms,)300
813 y(resp)s(ectiv)m(ely)-8 b(.)45 b(Section)32 b(5)g(presen)m(ts)g
(the)g(sim)m(ulation)e(mo)s(dels)g(and)i(analyzes)g(the)g(sim)m
(ulation)300 926 y(results,)c(and)g(Section)h(6)g(reviews)f(related)h
(w)m(orks.)40 b(W)-8 b(e)31 b(conclude)d(in)f(Section)i(7)g(with)f(a)h
(short)300 1039 y(summary)-8 b(.)300 1325 y Fo(2)135
b(Basic)45 b(Approac)l(hes)f(of)i(SRM)300 1528 y Fn(In)38
b(this)g(section,)j(w)m(e)e(giv)m(e)h(an)e(o)m(v)m(erview)i(of)f(SRM,)f
(emphasizing)g(the)g(features)i(crucial)d(to)300 1641
y(our)e(prop)s(osed)g(mec)m(hanisms.)56 b(W)-8 b(e)37
b(use)f(the)g(term)f Fm(session)i Fn(to)f(mean)g(a)g(m)m(ulticast)g
(applica-)300 1754 y(tion)27 b(that)h(uses)f(SRM)g(as)h(its)f
(underlying)d(reliable)h(m)m(ulticast)i(service.)40 b(SRM)27
b(pro)m(vides)g(basic)300 1867 y(reliabilit)m(y)h(supp)s(ort,)j(i.e.,)h
(it)f(guaran)m(tees)i(data)f(deliv)m(ery)e(to)i(all)f(mem)m(b)s(ers)f
(in)h(the)g(m)m(ulticast)300 1980 y(session.)48 b(Other)32
b(functionalities,)g(suc)m(h)g(as)i(total)f(ordering)f(and)g(fate)i
(sharing)3112 1947 y Fl(1)3151 1980 y Fn(,)g(if)e(desired,)300
2093 y(are)j(the)f(resp)s(onsibilities)c(of)k(the)h(application)e
(itself)g([3].)53 b(T)-8 b(o)35 b(a)m(v)m(oid)g(message)h(implosion)31
b(in)300 2206 y(the)e(error)f(reco)m(v)m(ery)i(pro)s(cess,)e(SRM)g(is)g
(receiv)m(er-initiated)f([4)q(])h(with)f(eac)m(h)j(receiv)m(er)f(b)s
(eing)e(re-)300 2319 y(sp)s(onsible)22 b(for)k(detecting)f(data)i
(losses)e(and)f(requesting)h(retransmissions.)36 b(SRM)26
b(also)f(adopts)300 2432 y(the)42 b(approac)m(h)h(of)f(\\m)m
(ulticasting)g(ev)m(erything")g(to)h(maximize)f(the)g(collab)s(oration)
f(among)300 2544 y(mem)m(b)s(ers)31 b(in)g(the)h(pro)s(cess)f(of)h
(error)g(reco)m(v)m(ery)-8 b(.)47 b(Requests)32 b(and)g(replies)e(are)i
(m)m(ulticast)f(to)i(all)300 2657 y(mem)m(b)s(ers)27
b(in)g(the)h(session.)39 b(Multicasting)28 b(a)g(request)g(allo)m(ws)g
(the)g(nearest)g(mem)m(b)s(er)g(with)f(the)300 2770 y(requested)j(data)
h(to)g(send)e(a)i(reply)e(\014rst;)h(it)f(also)h(suppresses)f(other)h
(mem)m(b)s(ers)g(from)g(sending)300 2883 y(out)37 b(duplicate)d
(requests)j(for)f(the)g(same)h(data.)59 b(Similarly)-8
b(,)35 b(m)m(ulticasting)g(a)h(reply)f(gets)j(the)300
2996 y(reply)25 b(to)i(all)f(mem)m(b)s(ers)f(who)h(su\013er)g(the)g
(loss)g(without)g(requiring)e(the)i(replier)e(to)k(kno)m(ws)e(their)300
3109 y(exact)32 b(lo)s(cations,)e(as)h(w)m(ell)e(as)i(suppresses)d
(duplicate)h(replies.)441 3222 y(The)44 b(SRM)g(mec)m(hanisms)g(can)h
(b)s(e)f(decomp)s(osed)g(in)m(to)g(t)m(w)m(o)i(parts:)69
b(group)44 b(state)h(syn-)300 3335 y(c)m(hronization)36
b(and)g(receiv)m(er-initiated)f(error)h(reco)m(v)m(ery)-8
b(.)61 b(Mem)m(b)s(ers)37 b(p)s(erio)s(dically)32 b(exc)m(hange)300
3448 y(session)h(messages)i(to)f(rep)s(ort)g(curren)m(t)f(group)g
(state)j(\(e.g.,)g(the)e(highest)f(receiv)m(ed)i(sequence)300
3561 y(n)m(um)m(b)s(er)g(from)g(eac)m(h)j(source\))e(and)g(to)h
(determine)e(the)h(propagation)g(dela)m(ys)g(b)s(et)m(w)m(een)h(eac)m
(h)300 3674 y(pair)31 b(of)h(mem)m(b)s(ers.)46 b(Mem)m(b)s(ers)32
b(use)g(group)g(state)h(information)e(to)i(detect)h(data)f(losses.)46
b(It)32 b(is)300 3786 y(critical)i(for)i(the)f(receiv)m(er-initiated)g
(error)g(reco)m(v)m(ery)i(approac)m(h)f(b)s(ecause)g(mem)m(b)s(ers)e
(do)i(not)300 3899 y(otherwise)28 b(kno)m(w)h(what)f(has)g(b)s(een)g
(sen)m(t)h(to)g(the)g(session)f(group.)39 b(Mem)m(b)s(ers)29
b(use)f(propagation)300 4012 y(dela)m(ys)i(to)h(sc)m(hedule)f(their)f
(request)i(or)f(reply)f(timers)h(as)g(describ)s(ed)f(b)s(elo)m(w.)441
4125 y(When)34 b(a)h(pac)m(k)m(et)h(gets)f(lost,)g(eac)m(h)g(mem)m(b)s
(er)f(detecting)g(the)h(loss)e(w)m(aits)h(a)h(random)e(time)300
4238 y(p)s(erio)s(d)h(b)s(efore)h(sending)g(the)h(retransmission)e
(request.)57 b(The)36 b(random)f(timer)g(is)g(sc)m(heduled)300
4351 y(b)s(et)m(w)m(een)44 b(the)g(time)f(in)m(terv)-5
b(al)43 b(of)h Fk(A)29 b Fj(\001)g Fk(T)60 b Fj(\030)47
b Fn(\()p Fk(A)30 b Fn(+)f Fk(B)5 b Fn(\))28 b Fj(\001)i
Fk(T)13 b Fn(.)80 b Fk(T)56 b Fn(is)43 b(the)g(propagation)h(dela)m(y)
300 4464 y(b)s(et)m(w)m(een)26 b(the)g(requester)g(and)f(the)g(data)i
(source,)g(and)e Fk(A)g Fn(and)g Fk(B)31 b Fn(are)26
b(constan)m(ts.)40 b(The)25 b(request)300 4577 y(timer)i(in)m(terv)-5
b(al)27 b(is)f(a)i(function)f(of)g(the)h(distance)f(to)i(the)f(source)f
(b)s(ecause)h(w)m(e)g(w)m(an)m(t)h(a)f(mem)m(b)s(er)300
4690 y(near)42 b(the)f(source)h(to)h(request)f(\014rst.)73
b(When)42 b(the)g(timer)f(expires,)j(the)d(sc)m(heduled)g(request)300
4803 y(is)34 b(m)m(ulticast)h(to)i(the)e(session)g(group.)55
b(If)35 b(a)h(duplicate)e(request)h(is)f(receiv)m(ed)i(or)g(the)f
(curren)m(t)300 4916 y(sc)m(heduled)29 b(request)h(is)f(sen)m(t,)i(the)
f(requester)g(exp)s(onen)m(tially)f(bac)m(ks)h(o\013)h(its)e(request)h
(timer.)40 b(If)p 300 4995 1320 4 v 404 5048 a Fi(1)438
5080 y Fh(F)-6 b(ate)27 b(sharing)h(is)g(when)f(a)g(m)n(ulticast)g
(session)i(terminates)d(if)i(a)g(single)g(mem)n(b)r(er,)e(or)h(a)h(sp)r
(eci\014c)f(subset)g(of)300 5171 y(mem)n(b)r(ers)d(in)h(the)h(session)h
(fail,)g(dep)r(ending)e(on)h(the)f(seman)n(tics)h(of)g(the)g
(application.)1927 5506 y Fn(2)p eop
%%Page: 3 3
3 2 bop 300 859 a @beginspecial 60 @hoffset 110 @voffset
50 @hscale 40 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/cry.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 3 FMDOCUMENT
0 0 /Helvetica-Narrow-BoldOblique FMFONTDEFINE
1 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
225 666 297 711 2 L
4 H
2 Z
3 X
0 K
N
99 630 225 666 2 L
0 X
N
315 549 423 549 2 L
3 X
N
0 X
90 450 9 9 99 630 G
0.5 H
90 450 9 9 99 630 A
90 450 9 9 171 576 G
90 450 9 9 171 576 A
90 450 9 9 315 549 G
90 450 9 9 315 549 A
90 450 9 9 423 549 G
90 450 9 9 423 549 A
90 450 9 9 243 558 G
90 450 9 9 243 558 A
90 450 9 9 225 666 G
90 450 9 9 225 666 A
90 450 9 9 315 666 G
90 450 9 9 315 666 A
90 450 9 9 297 711 G
90 450 9 9 297 711 A
90 450 9 9 297 621 G
90 450 9 9 297 621 A
99 630 171 576 2 L
4 H
N
171 576 243 558 2 L
N
243 558 315 549 2 L
N
225 666 315 666 2 L
N
225 666 297 621 2 L
N
0 24 Q
(source) 72 644.25 T
1 F
(p) 408.34 567.51 T
(q) 309.34 567.51 T
(r) 314.67 698.25 T
(L) 360 554.25 T
1 18 Q
(1) 374.66 554.25 T
1 24 Q
(L) 236.34 693.51 T
1 18 Q
(2) 251 693.51 T
FMENDPAGE
%%EndDocument
 @endspecial 146 x Fn(Figure)27 b(1:)39 b(A)27 b(mem)m(b)s(er)g(with)e
(p)s(ersisten)m(t)h(losses)h(causes)h(bandwidth)c(o)m(v)m(erhead)k(to)g
(all)e(session)300 1118 y(mem)m(b)s(ers)k(\()p Fk(L)782
1132 y Fl(1)852 1118 y Fn(and)f Fk(L)1090 1132 y Fl(2)1160
1118 y Fn(are)i(lossy)e(links\))300 1398 y(a)f(reply)e(is)h(receiv)m
(ed,)h(the)g(sc)m(heduled)e(request)i(is)e(canceled.)41
b(A)27 b(mem)m(b)s(er)g(with)f(the)i(requested)300 1511
y(data)507 1478 y Fl(2)578 1511 y Fn(resp)s(onds)g(to)k(the)f(request)g
(b)m(y)f(sc)m(heduling)f(a)i(reply)-8 b(.)41 b(The)31
b(reply)e(is)h(sc)m(heduled)f(in)h(the)300 1624 y(time)g(in)m(terv)-5
b(al)29 b Fk(a)20 b Fj(\001)g Fk(t)25 b Fj(\030)g Fn(\()p
Fk(a)c Fn(+)e Fk(b)p Fn(\))i Fj(\001)f Fk(t)p Fn(,)30
b(where)g Fk(t)g Fn(is)f(the)h(propagation)g(dela)m(y)h(b)s(et)m(w)m
(een)g(the)f(replier)300 1737 y(and)24 b(the)h(requester,)h(and)d
Fk(a)i Fn(and)f Fk(b)g Fn(are)h(constan)m(ts.)40 b(When)24
b(the)h(timer)f(expires,)h(the)f(sc)m(heduled)300 1850
y(reply)h(is)g(m)m(ulticast)g(to)i(the)f(session.)39
b(The)25 b(sc)m(heduled)g(reply)g(is)g(canceled)h(if)f(a)i(duplicate)d
(reply)300 1963 y(is)e(receiv)m(ed.)39 b(Therefore,)25
b(the)e(mem)m(b)s(er)g(immediately)e(b)s(ehind)g(the)i(lossy)g(link)
3028 1930 y Fl(3)3091 1963 y Fn(is)f(most)h(lik)m(ely)300
2076 y(to)29 b(send)f(its)g(request;)h(and)f(the)h(mem)m(b)s(er)f
(immediately)f(ab)s(o)m(v)m(e)j(the)f(lossy)e(link)g(is)g(most)i(lik)m
(ely)300 2189 y(to)i(send)f(its)f(reply)-8 b(.)441 2302
y(The)36 b(randomization)f(of)h(request)g(and)g(reply)e(timers)i(in)e
(SRM)i(giv)m(es)g(mem)m(b)s(ers)g(an)g(op-)300 2415 y(p)s(ortunit)m(y)
24 b(to)j(suppress)c(one)j(another)g(and)f(th)m(us)h(a)m(v)m(oid)g(the)
g(request)f(and)h(reply)e(message)j(im-)300 2527 y(plosion)h(problem.)
39 b(Ho)m(w)m(ev)m(er,)32 b(a)e(mem)m(b)s(er)g(with)e(p)s(ersisten)m(t)
h(losses)g(can)i(still)c(trigger)j(enough)300 2640 y(request)c(and)f
(reply)g(activit)m(y)h(to)h(o)m(v)m(erwhelm)e(other)h(mem)m(b)s(ers)f
(in)g(the)h(session.)38 b(F)-8 b(or)27 b(example,)300
2753 y(consider)i(the)g(case)i(where)e(mem)m(b)s(er)g
Fk(p)g Fn(in)g(Figure)g(1)h(loses)f(a)h(pac)m(k)m(et)i(at)e(link)e
Fk(L)3076 2767 y Fl(1)3115 2753 y Fn(.)40 b(Its)30 b(request)300
2866 y(and)35 b(the)i(reply)d(from)i(mem)m(b)s(er)f Fk(q)k
Fn(will)33 b(reac)m(h)k(all)e(mem)m(b)s(ers)g(in)g(the)h(session,)h
(whic)m(h)e(causes)300 2979 y(duplicate)29 b(data)i(reception)f(for)g
(all)f(other)h(mem)m(b)s(ers.)40 b(Moreo)m(v)m(er,)33
b(m)m(ultiple)28 b(lossy)h(links)f(ma)m(y)300 3092 y(mak)m(e)k(the)g
(problem)e(w)m(orse)h(b)s(ecause)h(m)m(ultiple)d(lossy)h(links)f
(reduce)j(duplicate)d(suppression.)300 3205 y(F)-8 b(or)25
b(example,)h(in)d(Figure)h(1,)j(if)c(the)i(reply)e(from)h(mem)m(b)s(er)
g Fk(q)j Fn(is)d(lost)g(at)i(link)c Fk(L)2977 3219 y
Fl(2)3017 3205 y Fn(,)j(the)g(sc)m(heduled)300 3318 y(reply)30
b(at)j(mem)m(b)s(er)e Fk(r)j Fn(will)29 b(not)j(b)s(e)f(suppressed)f
(and)h(a)h(duplicate)f(reply)f(is)h(m)m(ulticast)g(to)i(the)300
3431 y(session.)41 b(In)30 b(a)h(session)f(of)h(size)g
Fk(n)p Fn(,)f(if)g Fk(k)k Fn(mem)m(b)s(ers)c(lose)g(a)i(pac)m(k)m(et,)h
(the)e(error)f(reco)m(v)m(ery)i(tra\016c)300 3544 y(reac)m(hes)38
b(all)e Fk(n)h Fn(mem)m(b)s(ers)f(b)m(y)h(using)f(global)h(error)f
(reco)m(v)m(ery)-8 b(.)64 b(As)37 b(a)g(result,)3049
3499 y Fl(\()p Fg(n)p Ff(\000)p Fg(k)r Fl(\))p 3049 3523
192 4 v 3124 3575 a Fg(n)3251 3544 y Fn(\045)f(of)i(the)300
3657 y(error)28 b(reco)m(v)m(ery)j(tra\016c)e(is)f(w)m(asted.)41
b(The)28 b(premise)f(of)i(this)f(pap)s(er)g(is)f(that,)j(an)f(error)f
(reco)m(v)m(ery)300 3769 y(mec)m(hanism)39 b(m)m(ust)h(not)g(only)g(a)m
(v)m(oid)g(message)h(implosion,)f(but)f(should)f(also)i(isolate)g
(error)300 3882 y(reco)m(v)m(ery)32 b(tra\016c)f(to)g(the)g(required)d
(scop)s(e.)441 3995 y(W)-8 b(e)32 b(ha)m(v)m(e)g(exp)s(erimen)m(ted)e
(with)g(t)m(w)m(o)i(di\013eren)m(t)e(mec)m(hanisms)g(to)i(lo)s(calize)e
(error)g(reco)m(v)m(ery)300 4108 y(tra\016c:)42 b(hop-scop)s(ed)30
b(error)h(reco)m(v)m(ery)h(and)e(group-scop)s(ed)h(error)f(reco)m(v)m
(ery)-8 b(.)44 b(Note)32 b(that)g(lo)s(cal)300 4221 y(reco)m(v)m(ery)27
b(is)e(a)h(p)s(erformance)f(optimization,)h(th)m(us)f(the)g(mec)m
(hanisms)g(do)h(not)g(ha)m(v)m(e)g(to)h(ac)m(hiev)m(e)300
4334 y(the)22 b(optimal)e(or)i(precise)f(degree)h(of)g(lo)s(calit)m(y;)
i(the)e(more)g(lo)s(cal)f(the)h(reco)m(v)m(ery)-8 b(,)25
b(the)d(less)f(reco)m(v)m(ery)300 4447 y(tra\016c)33
b(o)m(v)m(erhead)g(there)f(is.)45 b(Ho)m(w)m(ev)m(er,)35
b(indep)s(enden)m(tly)29 b(from)i(ho)m(w)h(w)m(ell)f(our)h(lo)s(cal)f
(reco)m(v)m(ery)300 4560 y(mec)m(hanisms)36 b(w)m(ork,)k(all)c(data)i
(losses)f(are)h(ev)m(en)m(tually)f(reco)m(v)m(ered.)63
b(In)37 b(particular,)h(in)e(b)s(oth)300 4673 y(mec)m(hanisms)h(that)i
(w)m(e)g(prop)s(ose)e(here,)j(a)f(mem)m(b)s(er)e(ma)m(y)i(o)s
(ccasionally)e(sends)g(its)h(requests)p 300 4752 1320
4 v 404 4806 a Fi(2)438 4837 y Fh(SRM)28 b(assumes)g(all)h(session)g
(mem)n(b)r(ers,)e(not)h(only)g(the)f(data)h(source,)i(sa)n(v)n(e)e(all)
h(the)e(application)i(data.)42 b(If)300 4929 y(some)23
b(mem)n(b)r(ers)f(do)h(not)g(sa)n(v)n(e)h(the)f(data)h(requested,)f
(they)g(simply)f(do)i(not)f(participate)h(in)f(the)g(error)h(reco)n(v)n
(ery)300 5020 y(pro)r(cess.)404 5080 y Fi(3)438 5111
y Fh(W)-6 b(e)26 b(refer)h(to)f(a)g(lossy)h(link)f(as)h(the)e(place)i
(where)f(a)h(data)f(pac)n(k)n(et)g(is)g(dropp)r(ed,)g(it)g(can)g(b)r(e)
g(either)g(a)h(link)f(or)300 5203 y(a)g(router)g(along)h(the)e(deliv)n
(ery)g(path.)1927 5506 y Fn(3)p eop
%%Page: 4 4
4 3 bop 300 249 a Fn(and)34 b(replies)f(to)i(an)g(inappropriate)e(scop)
s(e.)53 b(Suc)m(h)34 b(o)s(ccasional)h(abnormal)f(b)s(eha)m(vior)f(is)h
(so)s(on)300 361 y(corrected)c(and)f(ha)m(v)m(e)h(little)e(impact)h(on)
g(the)h(o)m(v)m(erall)f(p)s(erformance.)40 b(W)-8 b(e)30
b(describ)s(e)e(these)i(t)m(w)m(o)300 474 y(approac)m(hes)h(in)e
(detail)h(in)f(the)h(follo)m(wing)f(sections.)300 761
y Fo(3)135 b(Hop-Scop)t(ed)44 b(Error)h(Reco)l(v)l(ery)300
964 y Fn(The)39 b(simplest)f(solution)h(to)i(con)m(trol)f(the)g(scop)s
(e)g(of)g(requests)g(and)f(replies)f(is)h(to)i(limit)d(the)300
1077 y(n)m(um)m(b)s(er)c(of)i(hops)f(they)g(tra)m(v)m(el.)57
b(W)-8 b(e)37 b(wish)d(to)i(use)f(the)h(minim)m(um)c(hop)j(coun)m(ts)h
(p)s(ossible)d(in)300 1190 y(requests)22 b(and)f(replies.)36
b(In)21 b(order)h(to)g(reco)m(v)m(er)i(from)d(a)i(loss,)g(a)f(request)g
(m)m(ust)g(reac)m(h)g(as)h(least)f(one)300 1302 y(mem)m(b)s(er)31
b(who)f(has)i(the)f(requested)g(data.)44 b(A)32 b(mem)m(b)s(er)e(b)s
(ehind)f(a)i(lossy)g(link)e(could)i(p)s(erhaps)300 1415
y(learn)41 b(form)g(its)f(past)i(exp)s(erience)f(to)h(iden)m(tify)e
(the)h(lossy)g(link)e(and)i(send)g(its)g(subsequen)m(t)300
1528 y(requests)e(with)g(a)h(hop)f(coun)m(t)h(that)g(reac)m(hes)g(b)s
(ey)m(ond)f(the)h(lossy)f(link.)66 b(Ho)m(w)m(ev)m(er,)44
b(if)39 b(there)300 1641 y(are)h(m)m(ultiple)e(lossy)h(links)f(along)i
(the)g(path,)j(a)d(conserv)-5 b(ativ)m(e)41 b(approac)m(h)g(w)m(ould)d
(b)s(e)i(to)g(set)300 1754 y(the)35 b(hop)f(limit)f(large)i(enough)f
(so)h(that)g(requests)g(can)g(go)h(b)s(ey)m(ond)e(the)h(farthest)g
(lossy)f(link.)300 1867 y(Consequen)m(tly)-8 b(,)34 b(request)g
(messages)h(w)m(ould)d(tra)m(v)m(el)j(long)e(paths)h(in)e(all)h
(directions,)g(resulting)300 1980 y(in)42 b(high)h(o)m(v)m(erhead.)81
b(Therefore,)47 b(w)m(e)d(do)g(not)g(attempt)g(to)h(ha)m(v)m(e)f(all)f
(mem)m(b)s(er's)g(requests)300 2093 y(attempt)i(to)f(reac)m(h)g(b)s(ey)
m(ond)f(the)h(lossy)f(link.)78 b(In)43 b(fact,)48 b(to)d(minimize)c
(the)j(hop)f(limit)e(for)300 2206 y(request)32 b(messages,)h(our)f
(design)f(tak)m(es)i(the)f(approac)m(h)g(that)h(a)f(mem)m(b)s(er)f
Fk(p)p Fn('s)h(request)g(should)300 2319 y(extend)i(just)g(far)f
(enough)h(to)h(reac)m(h)g(some)f(other)h(mem)m(b)s(er)e
Fk(q)k Fn(who)c(is)h(closer)f(to)i(the)g(source.)300
2432 y(If)41 b(the)h(loss)f(o)s(ccurred)g(b)s(et)m(w)m(een)h
Fk(q)i Fn(and)d Fk(p)p Fn(,)j(then)d Fk(q)k Fn(will)39
b(b)s(e)h(able)h(to)i(retransmit)d(the)i(lost)300 2544
y(pac)m(k)m(et.)48 b(If)32 b(the)h(loss)e(o)s(ccurred)h(elsewhere)f(so)
i(that)g Fk(q)i Fn(missed)30 b(the)j(pac)m(k)m(et)h(as)f(w)m(ell,)f
(then)f(w)m(e)300 2657 y(only)36 b(need)h(to)g(mak)m(e)h(sure)e(that)i
Fk(q)i Fn(will)34 b(send)i(a)h(request)g(further)f(up)g(to)m(w)m(ards)h
(the)h(source.)300 2770 y(Since)26 b(request)i(timers)e(are)i(set)f
(prop)s(ortional)e(to)j(the)g(measured)e(propagation)i(dela)m(ys)f(to)h
(the)300 2883 y(source,)36 b(a)e(mem)m(b)s(er)g(can)g(assume)g(that)h
(it)f(is)f(the)i(closest)f(one)h(b)s(ehind)c(the)k(lossy)e(link)f(if)i
(its)300 2996 y(request)h(timer)f(expires)f(\014rst.)53
b(It)34 b(do)s(es)h(not)g(matter)g(if)f(a)h(further)e(a)m(w)m(a)m(y)j
(mem)m(b)s(er)e(sends)g(an)300 3109 y(unsuppressed)23
b(request)j(whic)m(h)e(do)s(es)i(not)g(reac)m(h)h(b)s(ey)m(ond)e(the)h
(lossy)f(link;)h(all)f(that)h(matters)h(is)300 3222 y(that)g(at)g
(least)f(one)h(request)f(mak)m(es)h(across)g(the)f(lossy)f(link,)h(and)
f(it)h(is)f(lik)m(ely)g(that)i(the)f(request)300 3335
y(comes)34 b(from)f(the)h(closest)g(mem)m(b)s(er)f(b)s(ehind)d(the)k
(lossy)e(link.)48 b(Other)33 b(mem)m(b)s(ers)g(simply)e(rely)300
3448 y(on)f(this)g(request)g(to)h(trigger)f(the)h(retransmission)d(of)j
(the)f(lost)g(data.)441 3561 y(Note)e(that)f(a)g(request)g(is)e(used)h
(to)h(suppress)e(other)i(duplicate)e(requests)h(as)h(w)m(ell)f(as)g(to)
i(ask)300 3674 y(for)h(repair.)39 b(While)29 b(limiting)d(the)k(hop)f
(coun)m(t)h(of)f(the)h(request)f(message)i(limits)c(the)j(o)m(v)m
(erhead)300 3786 y(it)h(generates,)j(it)e(also)g(diminishes)c(its)j
(abilit)m(y)f(to)j(suppress)d(the)i(same)g(requests)g(from)g(other)300
3899 y(mem)m(b)s(ers.)38 b(Ho)m(w)m(ev)m(er,)29 b(in)c(general,)i(the)f
(request)g(hop)f(coun)m(t)i(in)d(our)i(mec)m(hanism)f(is)g(relativ)m
(ely)300 4012 y(small)j(in)f(comparison)h(with)g(the)h(distance)g(to)h
(the)f(source.)40 b(As)29 b(a)h(result,)e(the)h(request)g(tra\016c)300
4125 y(p)s(er)e(loss)g(is)g(still)f(acceptable)j(ev)m(en)g(though)e(m)m
(ultiple)f(requests)i(of)g(the)g(same)g(retransmission)300
4238 y(are)35 b(presen)m(ted.)54 b(Moreo)m(v)m(er,)38
b(b)s(ecause)d(request)g(timers)f(are)h(based)g(on)f(measured)g
(distances)300 4351 y(to)27 b(the)f(source,)h(a)g(mem)m(b)s(er)e(far)h
(b)s(ehind)d(the)j(lossy)f(link)f(ma)m(y)j(receiv)m(e)g(a)f(reply)f(b)s
(efore)h(sending)300 4464 y(a)42 b(request,)j(whic)m(h)40
b(relaxes)i(SRM's)f(previous)g(suppression)e(requiremen)m(t)h(that)j(a)
f(request)300 4577 y(should)28 b(reac)m(h)k(all)d(mem)m(b)s(ers)g(who)h
(share)g(the)h(same)g(loss.)441 4690 y(On)d(the)h(other)g(hand,)f(w)m
(e)i(do)e(require)g(that)h(a)g(reply)f(reac)m(h)i(all)d(mem)m(b)s(ers)h
(who)h(su\013er)f(the)300 4803 y(same)35 b(loss.)55 b(Since)34
b(a)h(replier)e(do)s(es)i(not)g(kno)m(w)h(where)e(a)i(pac)m(k)m(et)h
(is)d(dropp)s(ed,)g(it)h(is)f(di\016cult)300 4916 y(for)k(the)h
(replier)e(to)i(iden)m(tify)e(who)h(shares)g(the)h(loss.)64
b(Because)40 b(a)f(requester)g(assumes)f(it)g(is)300
5028 y(immediately)28 b(b)s(ehind)g(the)i(lossy)f(link)f(\(mem)m(b)s
(ers)i(closer)g(to)g(the)h(requester)f(are)g(lik)m(ely)f(to)i(b)s(e)300
5141 y(the)e(ones)g(whose)g(replies)f(are)h(not)g(suppressed\),)f(it)h
(can)g(determine)f(\(as)i(w)m(e)f(sho)m(w)g(b)s(elo)m(w\))g(an)300
5254 y(upp)s(er)35 b(b)s(ound)g(on)h(the)h(hop)g(coun)m(t)g(needed)g
(to)g(reac)m(h)h(all)e(other)h(mem)m(b)s(ers)f(who)g(share)h(the)1927
5506 y(4)p eop
%%Page: 5 5
5 4 bop 300 1519 a @beginspecial 60 @hoffset 170 @voffset
40 @hscale 30 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/ndl.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 4 FMDOCUMENT
0 0 /Times-BoldItalic FMFONTDEFINE
1 1 /Symbol FMFONTDEFINE
2 0 /Helvetica-Narrow-BoldOblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
6 X
0 K
90 450 242.99 226.46 314.99 528.79 G
5 X
90 450 135 125.81 477 545.56 G
4 X
90 450 108 100.65 386.99 461.69 G
90 450 135 125.82 477 377.82 G
2 H
2 Z
2 X
90 450 135 125.81 477 545.56 A
390.3 372.58 386.99 361.04 383.68 372.58 386.99 372.58 4 Y
0 X
V
386.99 461.69 386.99 372.58 2 L
V
1 H
N
83.54 525.48 72 528.79 83.54 532.09 83.54 528.79 4 Y
V
83.54 528.79 314.99 528.79 2 L
V
N
90 450 9 8.39 476.99 377.82 G
0.5 H
90 450 9 8.39 476.99 377.82 A
90 450 9 8.39 386.99 461.69 G
90 450 9 8.39 386.99 461.69 A
90 450 9 8.39 108 721.69 G
90 450 9 8.39 108 721.69 A
90 450 9 8.39 476.99 545.56 G
90 450 9 8.39 476.99 545.56 A
0 18 Q
(s) 189 548.92 T
(r) 189 532.15 T
1 24 Q
(P) 171 535.96 T
0 18 Q
(s) 530.99 565.7 T
(u) 530.99 548.92 T
1 24 Q
(p) 512.99 552.73 T
600.47 548.87 612 545.56 600.47 542.25 600.47 545.56 4 Y
V
476.99 545.56 600.47 545.56 2 L
V
1 H
N
600.47 381.12 612 377.82 600.47 374.51 600.47 377.82 4 Y
V
476.99 377.82 600.47 377.82 2 L
V
N
0 F
(p) 402.01 469.64 T
(r) 314.67 544.87 T
2 F
(source) 72 738.53 T
0 F
(s) 143.17 738.53 T
(u) 459 553.87 T
(v) 313.35 418.87 T
2 H
1 X
90 450 135 125.81 477 377.81 A
0 18 Q
0 X
(s) 378.01 407.95 T
(p) 378.01 391.17 T
1 24 Q
(p) 360.01 394.99 T
0 18 Q
(s) 565.98 397.95 T
(q) 565.98 381.18 T
1 24 Q
(p) 547.98 384.99 T
90 450 9 8.39 325.49 411.37 G
0.5 H
90 450 9 8.39 325.49 411.37 A
5 X
90 450 90 83.87 162 335.88 G
2 H
2 X
90 450 90 83.88 162 335.88 A
0 X
90 450 9 8.39 162 335.88 G
0.5 H
90 450 9 8.39 162 335.88 A
0 F
(w) 135 316.64 T
165.3 263.53 162 252 158.69 263.53 162 263.53 4 Y
V
162 335.88 162 263.53 2 L
V
1 H
N
0 18 Q
(s) 186 299.95 T
(w) 186 283.17 T
1 24 Q
(p) 168 286.99 T
2 H
0 Z
3 X
90 450 242.99 226.46 314.99 528.79 A
326.99 411.37 359.99 486.85 2 L
4 H
2 Z
0 X
N
2 H
1 X
90 450 108 100.65 386.99 461.69 A
368.99 478.46 476.99 545.56 2 L
4 H
0 X
N
108 721.69 315 528.79 2 L
5 X
V
0 X
N
342 504 315 528.79 2 L
9 X
V
6 H
2 X
N
0 X
90 450 9 8.39 314.99 528.79 G
0.5 H
90 450 9 8.39 314.99 528.79 A
341.99 503.63 162 335.88 2 L
4 H
N
341.99 503.63 476.99 377.82 2 L
5 X
V
0 X
N
0 F
(q) 483.01 352.64 T
FMENDPAGE
%%EndDocument
 @endspecial 151 x Fn(Figure)35 b(2:)51 b(Request)36
b(and)f(reply)f(hop)h(coun)m(ts)h(\(thic)m(k)g(lines)e(represen)m(t)h
(data)i(deliv)m(ery)d(path,)300 1783 y(circles)29 b(represen)m(t)i(the)
f(regions)g(of)h(request)f(and)g(reply)f(scop)s(es\))300
2063 y(loss.)48 b(The)33 b(upp)s(er)e(b)s(ound)g(is)h(called)h(the)g
Fm(pr)-5 b(oxy)37 b(hop)f(c)-5 b(ount)34 b Fn(b)s(ecause)f(the)g
(requester)h(acts)g(as)300 2176 y(pro)m(xy)h(for)f(mem)m(b)s(ers)g(who)
g(share)h(the)g(same)g(loss.)53 b(The)34 b(replier)e(determines)i(its)g
(reply)g(hop)300 2289 y(coun)m(t)d(based)e(on)h(incoming)f(requests.)41
b(F)-8 b(or)30 b(example,)g(if)g(a)g(replier)e(receiv)m(es)j(a)f
(request)g(from)300 2402 y(a)37 b(requester)f Fk(h)g
Fn(hops)g(a)m(w)m(a)m(y)-8 b(,)40 b(and)c(the)g(pro)m(xy)g(hop)g(coun)m
(t)h(of)f(the)g(requester)h(is)e Fk(\032)p Fn(,)j(then)e(the)300
2515 y(replier's)30 b(reply)g(hop)h(coun)m(t,)i(\005,)g(is)e(giv)m(en)g
(b)m(y)h(\005)c(=)f Fk(h)22 b Fn(+)e Fk(\032)p Fn(.)45
b(Note)33 b(that)g(the)f(reply)e(hop)h(coun)m(t)300 2628
y(is)e(an)i(upp)s(er)d(b)s(ound)g(and)i(the)h(reply)e(ma)m(y)i(reac)m
(h)g(mem)m(b)s(ers)e(who)h(do)h(not)f(share)g(the)h(loss.)441
2741 y(Our)k(hop-scop)s(ed)h(error)g(reco)m(v)m(ery)i(requires)d(a)i
(mem)m(b)s(er)e(to)j(measure)e(its)g(distances,)h(in)300
2854 y(terms)c(of)f(the)h(n)m(um)m(b)s(er)f(of)h(hops,)f(to)i(other)f
(mem)m(b)s(ers)f(in)f(a)i(session.)47 b(The)32 b(distance)g(is)g(mea-)
300 2967 y(sured)43 b(b)m(y)h(exc)m(hanging)g(session)f(messages.)82
b(Since)43 b(session)g(messages)i(are)g(p)s(erio)s(dic,)g(the)300
3080 y(measuremen)m(t)32 b(is)e(also)h(p)s(erio)s(dically)c(refreshed.)
42 b(W)-8 b(e)32 b(will)d(discuss)g(the)i(algorithm)g(to)g(deter-)300
3192 y(mine)26 b(the)i(request)g(and)f(pro)m(xy)g(hop)g(coun)m(ts)h(in)
f(Section)g(3.1)i(and)e(Section)g(3.2.)41 b(The)27 b(detailed)300
3305 y(mec)m(hanism)j(is)f(describ)s(ed)f(in)h(Section)i(3.3.)300
3549 y Fe(3.1)112 b(Request)38 b(Hop)f(Coun)m(t)300 3720
y Fn(Since)i(eac)m(h)i(requester)f(sets)h(its)e(request)h(timer)f
(according)h(to)h(its)e(measured)h(distance)f(to)300
3833 y(the)k(data)h(source,)j(a)d(requester)f(near)g(a)h(lossy)e(link)f
(should)h(detect)i(a)g(loss)e(and)h(send)g(its)300 3946
y(request)36 b(\014rst.)55 b(Its)36 b(request)f(is)g(most)h(e\016cien)m
(t)g(in)e(terms)h(of)h(b)s(oth)f(the)h(reco)m(v)m(ery)h(dela)m(y)f(and)
300 4059 y(the)22 b(request)f(scop)s(e.)38 b(Based)22
b(on)f(this)f(observ)-5 b(ation,)24 b(a)d(requester)h(can)f(rely)g(on)g
(other)h(requesters)300 4172 y(closer)35 b(to)h(the)f(lossy)f(link)f
(to)j(ask)f(for)g(repair.)54 b(F)-8 b(or)36 b(example,)g(in)e(Figure)g
(2,)j(a)e(pac)m(k)m(et)i(from)300 4285 y(source)g Fk(s)g
Fn(is)f(dropp)s(ed)f(do)m(wnstream)i(of)g(mem)m(b)s(er)f
Fk(r)s Fn(.)60 b(Mem)m(b)s(er)37 b Fk(p)g Fn(is)f(the)h(closest)h
(requester)300 4398 y(to)f(the)e(lossy)h(link.)54 b(Mem)m(b)s(er)36
b Fk(q)j Fn(do)s(es)c(not)h(ha)m(v)m(e)h(to)g(send)e(its)g(request)h
(to)g(reac)m(h)h Fk(r)h Fn(b)s(ecause)300 4511 y(the)e(request)g(from)g
Fk(p)f Fn(can)i(request)f(retransmission)d(for)j(it.)57
b(Note)37 b(that,)h(instead)e(of)g(trying)300 4624 y(to)44
b(explicitly)d(iden)m(tify)g(the)j(lossy)e(link,)j(eac)m(h)f(requester)
g(assumes)e(itself)g(the)i(immediate)300 4737 y(mem)m(b)s(er)34
b(do)m(wnstream)g(of)h(the)f(lossy)g(link)f(and)g(sets)i(its)f(request)
h(hop)f(coun)m(t)h(large)f(enough)300 4850 y(to)c(reac)m(h)g(at)g
(least)g(one)g(mem)m(b)s(er)e(b)s(ey)m(ond)h(the)h(lossy)e(link)2353
4817 y Fl(4)2392 4850 y Fn(.)40 b(Ev)m(en)30 b(though)f(its)g(request)g
(ma)m(y)300 4962 y(not)g(reac)m(h)h(a)f(mem)m(b)s(er)f(with)f(the)i
(requested)g(data)g(for)g(a)g(particular)e(loss,)i(the)g(requester)g
(can)p 300 5042 1320 4 v 404 5095 a Fi(4)438 5127 y Fh(The)37
b(mem)n(b)r(er)d(b)r(ey)n(ond)h(the)h(lossy)h(link)f(can)g(b)r(e)g
(either)g(an)g(upstream)g(mem)n(b)r(er)e(or)i(a)h(sibling)g(to)f(the)
300 5218 y(requester.)1927 5506 y Fn(5)p eop
%%Page: 6 6
6 5 bop 300 249 a Fn(rely)28 b(on)h(other)g(requesters)g(that)h(are)f
(upstream)g(whose)f(request)h(will)e(reac)m(h)i(a)h(mem)m(b)s(er)e
(with)300 361 y(the)j(requested)g(data.)44 b(Hence,)32
b(the)f(request)g(hop)f(coun)m(t,)i Fk(\031)2388 328
y Fg(s)2385 384 y(p)2425 361 y Fn(,)g(for)e(a)i(mem)m(b)s(er)e
Fk(p)p Fn(,)h(regarding)g(a)300 474 y(source)g Fk(s)p
Fn(,)f(in)f(a)i(session)e Fk(G)p Fn(,)h(can)h(b)s(e)e(set)i(to,)1278
635 y Fk(\031)1333 598 y Fg(s)1330 658 y(p)1395 635 y
Fn(=)25 b(min)o Fj(f)p Fk(h)1740 649 y Fg(pq)1839 635
y Fj(j)h(8)p Fk(q)i Fj(2)c Fk(G;)15 b(h)2259 649 y Fg(sq)2356
635 y Fk(<)25 b(h)2504 649 y Fg(sp)2576 635 y Fj(g)300
796 y Fk(h)352 810 y Fg(pq)464 796 y Fn(is)36 b(the)i(distance,)i(in)c
(terms)h(of)h(the)g(n)m(um)m(b)s(er)f(of)g(hops,)i(b)s(et)m(w)m(een)g
Fk(p)e Fn(and)g Fk(q)s Fn(.)63 b Fk(h)3269 810 y Fg(pq)3380
796 y Fn(is)37 b(de-)300 909 y(termined)27 b(using)f(distance)i
(information)e(obtained)h(from)h(session)f(message)i(exc)m(hange.)42
b(Note)300 1022 y(that)27 b(the)h(request)e(hop)h(coun)m(t)g(is)f
(calculated)h(on)g(a)g(p)s(er-source)f(basis)g(under)f(the)i
(assumption)300 1135 y(that)k(source-sp)s(eci\014c)f(distribution)c
(trees)31 b(are)g(used)2165 1102 y Fl(5)2204 1135 y Fn(.)300
1372 y Fe(3.2)112 b(Pro)m(xy)37 b(Hop)h(Coun)m(t)300
1544 y Fn(A)d(requester)f(sets)i(its)e(pro)m(xy)g(hop)g(coun)m(t)i(so)e
(as)h(to)h(reac)m(h)f(other)g(mem)m(b)s(ers)f(that)h(share)g(the)300
1656 y(same)d(loss.)42 b(Since)30 b(a)i(requester)f(has)g(no)g(kno)m
(wledge)g(of)g(the)h(underlying)c(net)m(w)m(ork)k(top)s(ology)-8
b(,)300 1769 y(it)30 b(can)h(only)e(estimate)i(its)f(pro)m(xy)g(hop)g
(coun)m(t.)441 1882 y(A)c(requester)g(only)f(has)g(to)h(consider)f(mem)
m(b)s(ers)g(farther)g(a)m(w)m(a)m(y)j(from)d(the)h(source)g(in)e
(deter-)300 1995 y(mining)e(its)h(pro)m(xy)h(hop)f(coun)m(t.)39
b(There)23 b(are)i(four)e(kinds)f(of)i(relationship)d(b)s(et)m(w)m(een)
k(a)f(requester)300 2108 y(and)j(a)h(mem)m(b)s(er)f(farther)g(a)m(w)m
(a)m(y)i(from)f(the)f(source.)40 b(They)27 b(are)h(demonstrated)g(in)e
(Figure)h(2)h(b)m(y)300 2221 y(mem)m(b)s(er)i(pairs)f
Fj(f)p Fk(p;)15 b(q)s Fj(g)p Fn(,)31 b Fj(f)p Fk(p;)15
b(u)p Fj(g)p Fn(,)32 b Fj(f)p Fk(p;)15 b(v)s Fj(g)32
b Fn(and)d Fj(f)p Fk(p;)15 b(w)r Fj(g)p Fn(.)441 2334
y Fk(p)32 b Fn(and)g Fk(q)j Fn(ha)m(v)m(e)f(an)f(upstream-do)m
(wnstream)f(relationship.)44 b Fk(q)35 b Fn(most)e(lik)m(ely)e(shares)h
(losses)300 2447 y(with)42 b Fk(p)p Fn(.)78 b(An)43 b(upstream)f(mem)m
(b)s(er)g(should)f(b)s(e)i(pro)m(xy)g(for)g(its)f(do)m(wnstream)h(mem)m
(b)s(ers)f(to)300 2560 y(request)e(retransmission.)67
b(If)40 b Fk(q)j Fn(is)c(do)m(wnstream)h(of)g Fk(p)p
Fn(,)j(then)c Fk(h)2592 2574 y Fg(sp)2692 2560 y Fn(+)26
b Fk(h)2841 2574 y Fg(pq)2955 2560 y Fn(will)37 b(b)s(e)j(equal)f(to)
300 2673 y Fk(h)352 2687 y Fg(sq)423 2673 y Fn(.)59 b(Ho)m(w)m(ev)m
(er,)40 b(b)s(ecause)d(a)g(mem)m(b)s(er)e(ma)m(y)j(b)s(e)d(one)i(hop)f
(a)m(w)m(a)m(y)i(from)e(its)g(\014rst-hop)g(router,)300
2786 y Fk(h)352 2800 y Fg(sp)446 2786 y Fn(+)21 b Fk(h)590
2800 y Fg(pq)696 2786 y Fn(ma)m(y)33 b(b)s(e)e(t)m(w)m(o)i(hops)f
(greater)h(than)f Fk(h)1984 2800 y Fg(sq)2055 2786 y
Fn(.)45 b(W)-8 b(e)34 b(refer)d(to)i(the)f(do)m(wnstream)g(distance)300
2898 y(of)f Fk(p)f Fn(regarding)f(a)i(source)f Fk(s)g
Fn(as)h Fk(\032)p Fn(1)1515 2865 y Fg(s)1515 2921 y(p)1555
2898 y Fn(,)1033 3060 y Fk(\032)p Fn(1)1125 3022 y Fg(s)1125
3082 y(p)1190 3060 y Fn(=)25 b(max)p Fj(f)p Fk(h)1552
3074 y Fg(pq)1652 3060 y Fj(j)g(8)p Fk(q)j Fj(2)d Fk(G)1980
3022 y Fg(s)1980 3082 y(p)2019 3060 y Fk(;)15 b(h)2111
3074 y Fg(sp)2204 3060 y Fn(+)20 b Fk(h)2347 3074 y Fg(pq)2446
3060 y Fj(\024)25 b Fk(h)2594 3074 y Fg(sq)2686 3060
y Fn(+)19 b(2)p Fj(g)300 3221 y Fk(G)372 3188 y Fg(s)372
3243 y(p)441 3221 y Fn(is)30 b(the)g(set)h(of)g(mem)m(b)s(ers)e(who)h
(are)h(farther)f(a)m(w)m(a)m(y)i(from)e Fk(s)g Fn(than)g
Fk(p)g Fn(is.)441 3334 y Fk(p)h Fn(and)g Fk(u)g Fn(are)h(siblings)c
(and)j Fk(p)g Fn(is)g(within)d Fk(u)p Fn('s)k(request)f(hop)g(coun)m
(t,)i(i.e.,)e Fk(u)h Fn(requests)f Fk(p)g Fn(for)300
3446 y(repair.)38 b Fk(p)27 b Fn(has)g(to)h(b)s(e)e(pro)m(xy)h(for)g
Fk(u)g Fn(as)g(w)m(ell)f(as)h Fk(u)p Fn('s)g(do)m(wnstream)g(mem)m(b)s
(ers.)39 b(W)-8 b(e)28 b(refer)f(to)h(this)300 3559 y(distance)i(as)h
Fk(\032)p Fn(2)858 3526 y Fg(s)858 3582 y(p)898 3559
y Fn(.)888 3720 y Fk(\032)p Fn(2)980 3683 y Fg(s)980
3743 y(p)1045 3720 y Fn(=)25 b(max)p Fj(f)p Fk(h)1407
3734 y Fg(pu)1509 3720 y Fn(+)20 b(max)p Fj(f)p Fk(\032)p
Fn(1)1906 3683 y Fg(s)1906 3743 y(u)1952 3720 y Fk(;)15
b(\032)p Fn(2)2084 3683 y Fg(s)2084 3743 y(u)2130 3720
y Fj(g)25 b(j)h(8)p Fk(u)f Fj(2)f Fk(G)2536 3683 y Fg(s)2536
3743 y(p)2576 3720 y Fk(;)15 b(h)2668 3734 y Fg(pu)2774
3720 y Fj(\024)25 b Fk(\031)2925 3683 y Fg(s)2922 3743
y(u)2967 3720 y Fj(g)441 3881 y Fk(p)40 b Fn(and)g Fk(v)j
Fn(are)e(also)f(siblings)d(and)j Fk(v)j Fn(is)d(within)d
Fk(p)p Fn('s)j(request)h(hop)e(coun)m(t,)44 b(but)39
b Fk(p)h Fn(is)g(not)300 3994 y(within)26 b Fk(v)s Fn('s)j(request)g
(hop)f(coun)m(t.)41 b Fk(p)28 b Fn(has)h(to)g(b)s(e)g(pro)m(xy)f(for)h
Fk(v)j Fn(and)c Fk(v)s Fn('s)h(do)m(wnstream)g(mem)m(b)s(ers)300
4107 y(b)s(ecause)h Fk(v)s Fn('s)h(requests)f(ma)m(y)h(b)s(e)f
(suppressed)e(b)m(y)j Fk(p)p Fn(.)40 b(W)-8 b(e)32 b(refer)e(to)h(this)
e(distance)h(as)h Fk(\032)p Fn(3)3355 4074 y Fg(s)3355
4130 y(p)3395 4107 y Fn(.)901 4268 y Fk(\032)p Fn(3)993
4231 y Fg(s)993 4291 y(p)1058 4268 y Fn(=)25 b(max)p
Fj(f)p Fk(h)1420 4282 y Fg(pv)1518 4268 y Fn(+)20 b(max)p
Fj(f)p Fk(\032)p Fn(1)1915 4231 y Fg(s)1915 4291 y(v)1957
4268 y Fk(;)15 b(\032)p Fn(2)2089 4231 y Fg(s)2089 4291
y(v)2130 4268 y Fj(g)26 b(j)g(8)p Fk(v)i Fj(2)c Fk(G)2532
4231 y Fg(s)2532 4291 y(p)2572 4268 y Fk(;)15 b(h)2664
4282 y Fg(pv)2766 4268 y Fj(\024)25 b Fk(\031)2917 4231
y Fg(s)2914 4291 y(p)2954 4268 y Fj(g)300 4429 y Fn(Note)32
b(that,)f(since)f Fk(v)j Fn(is)d(suppressed)e(b)m(y)i
Fk(p)p Fn(,)h Fk(p)f Fn(do)s(es)g(not)g(ha)m(v)m(e)i(to)f(consider)e
Fk(\032)p Fn(3)3027 4396 y Fg(s)3027 4452 y(v)3069 4429
y Fn(.)441 4542 y Fk(p)f Fn(and)g Fk(w)j Fn(are)e(also)f(siblings)e
(but)h(they)i(are)g(not)f(within)e(the)j(request)f(hop)g(coun)m(ts)h
(of)g(eac)m(h)300 4655 y(other,)42 b(i.e.,)f Fk(w)g Fn(do)s(es)e(not)g
(ask)g Fk(p)f Fn(for)h(repair)f(and)g(its)g(requests)h(are)g(not)g
(suppressed)e(b)m(y)i Fk(p)p Fn(.)300 4768 y(Therefore,)30
b Fk(w)j Fn(m)m(ust)d(send)g(its)g(o)m(wn)g(requests)g(and)g
Fk(p)g Fn(need)g(not)h(b)s(e)f(pro)m(xy)g(for)g Fk(w)r
Fn(.)441 4881 y(A)37 b(requester)f(can)g(determine)g(its)f(pro)m(xy)i
(hop)e(coun)m(t,)k Fk(\032)p Fn(,)f(b)m(y)e(taking)g(the)h(maxim)m(um)e
(of)300 4994 y(its)27 b Fk(\032)p Fn(1,)j Fk(\032)p Fn(2)e(and)f
Fk(\032)p Fn(3)i(from)e(all)g(mem)m(b)s(ers)g(from)h(whic)m(h)f(it)g
(hears)h(session)f(messages.)41 b(Note)29 b(that)300
5107 y(the)i(pro)m(xy)f(hop)g(coun)m(t)h(m)m(ust)f(also)g(b)s(e)g
(calculated)g(on)h(a)f(p)s(er-source)g(basis.)p 300 5172
1320 4 v 404 5225 a Fi(5)438 5257 y Fh(Issues)c(related)g(to)g(the)g
(use)f(of)i(other)f(t)n(yp)r(es)f(of)h(distribution)g(trees)g(are)g
(left)h(for)f(future)f(study)-6 b(.)1927 5506 y Fn(6)p
eop
%%Page: 7 7
7 6 bop 300 249 a Fe(3.3)112 b(Mec)m(hanism)38 b(Description)300
420 y Fn(As)i(describ)s(ed)d(ab)s(o)m(v)m(e,)44 b(mem)m(b)s(ers)39
b(in)f(a)j(session)e(exc)m(hange)i(session)e(messages)h(to)h(measure)
300 533 y(the)32 b(distance,)g(in)e(terms)i(of)g(the)g(n)m(um)m(b)s(er)
f(of)g(hops,)h(to)h(other)f(mem)m(b)s(ers,)f(and)g(the)h(distances)300
646 y(b)s(et)m(w)m(een)45 b(eac)m(h)g(pair)e(of)h(mem)m(b)s(ers)f(are)i
(used)e(to)i(compute)g(the)f(request)g(and)f(pro)m(xy)i(hop)300
759 y(coun)m(ts.)55 b(Moreo)m(v)m(er,)38 b(pro)m(xy)d(hop)g(coun)m(t)g
(information)e(is)h(added)h(to)g(eac)m(h)h(session)f(message.)300
872 y(In)c(particular,)g(for)g(eac)m(h)i(source)f Fk(s)p
Fn(,)g(a)h(mem)m(b)s(er)e Fk(p)g Fn(includes)f Fk(h)2496
886 y Fg(sp)2568 872 y Fn(,)j Fk(\031)2681 839 y Fg(s)2678
894 y(p)2749 872 y Fn(and)f(max)p Fj(f)p Fk(\032)p Fn(1)3234
839 y Fg(s)3234 894 y(p)3274 872 y Fk(;)15 b(\032)p Fn(2)3406
839 y Fg(s)3406 894 y(p)3447 872 y Fj(g)32 b Fn(in)300
985 y(its)e(session)f(messages.)441 1098 y(The)36 b(computation)g(of)g
(request)g(and)f(pro)m(xy)h(hop)f(coun)m(ts)i(is)e(p)s(erformed)f
(iterativ)m(ely)-8 b(.)58 b(A)300 1210 y(mem)m(b)s(er)39
b(recomputes)h(its)e(request)i(and)f(pro)m(xy)g(hop)g(coun)m(ts)h(when)
f(a)h(session)e(message)j(is)300 1323 y(receiv)m(ed.)52
b(Since)34 b(session)f(messages)i(are)f(m)m(ulticast)g(p)s(erio)s
(dically)-8 b(,)32 b(it)i(tak)m(es)i(appro)m(ximately)300
1436 y(one)42 b(session)g(cycle)g(time)1245 1403 y Fl(6)1326
1436 y Fn(to)h(complete)g(the)f(computation)g(of)g(the)g(request)h(hop)
e(coun)m(t.)300 1549 y(Ho)m(w)m(ev)m(er,)h(the)c(computation)f(of)h
(the)g(pro)m(xy)g(hop)f(coun)m(t)h(dep)s(ends)e(on)i(results)e(from)i
(other)300 1662 y(mem)m(b)s(ers,)29 b(and)f(so)i(it)f(ma)m(y)g(tak)m(e)
i(sev)m(eral)f(session)e(cycles)h(to)h(con)m(v)m(erge.)43
b(Note)30 b(that,)h(in)c(order)300 1775 y(to)37 b(capture)f(session)g
(dynamics,)g(the)g(computation)g(of)h(request)f(and)g(pro)m(xy)g(hop)f
(coun)m(ts)i(is)300 1888 y(timestamp)s(ed)29 b(and)h(aged,)i(so)e
(obsolete)h(results)e(are)i(timed)f(out.)441 2001 y(When)g(a)f(loss)g
(is)g(detected,)i(a)f(requester)g(sends)f(a)h(request)f(with)f(its)h
(request)h(hop)f(coun)m(t.)300 2114 y(Normally)-8 b(,)24
b(at)g(least)g(one)f(request)h(from)e(mem)m(b)s(ers)h(b)s(ehind)d(the)k
(lossy)e(link)g(reac)m(hes)i(a)g(mem)m(b)s(er)300 2227
y(with)33 b(the)i(requested)g(data)g(and)f(triggers)h(a)g(reply)-8
b(.)52 b(Ho)m(w)m(ev)m(er,)38 b(if)c(no)h(reply)e(is)h(receiv)m(ed)h
(due)300 2340 y(to)44 b(pac)m(k)m(et)i(loss)d(or)h(underestimated)f
(request)g(hop)h(coun)m(t,)k(the)43 b(requester)h(then)g(sends)f(a)300
2453 y(second)30 b(request)g(globally)-8 b(,)29 b(and)g(corresp)s
(ondingly)e(the)j(reply)f(will)e(b)s(e)i(sen)m(t)h(globally)f(as)h(w)m
(ell.)300 2565 y(The)37 b(request)g(message)i(carries)e(the)g(distance)
g(to)h(the)g(source)g(and)e(the)i(pro)m(xy)f(hop)g(coun)m(t.)300
2678 y(The)i(distance)f(to)i(the)g(source)f(is)f(used)h(to)h(determine)
e(request)h(suppression.)64 b(A)40 b(mem)m(b)s(er)300
2791 y(suppresses)31 b(its)i(sc)m(heduled)e(request)i(if)f(the)h
(receiv)m(ed)g(request)g(is)f(from)h(a)g(mem)m(b)s(er)f(closer)h(to)300
2904 y(the)h(source.)53 b(Otherwise,)34 b(the)g(sc)m(heduled)f(request)
i(should)d(b)s(e)h(sen)m(t.)53 b(The)34 b(replier)e(uses)i(the)300
3017 y(pro)m(xy)c(hop)g(coun)m(t)h(to)g(determine)f(the)g(reply)f(hop)h
(coun)m(t.)441 3130 y(When)37 b(a)h(replier)d(resp)s(onds)g(to)j(a)g
(request,)h(a)e(di\013eren)m(t)g(approac)m(h)g(w)m(ould)f(b)s(e)h(that)
h(the)300 3243 y(replier)43 b(m)m(ulticasts)i(its)f(reply)g(with)g(a)h
(hop)g(coun)m(t)g Fk(h)p Fn(,)50 b(where)44 b Fk(h)i
Fn(is)e(the)h(distance)g(to)h(the)300 3356 y(original)31
b(requester.)47 b(After)33 b(receiving)e(the)i(reply)-8
b(,)32 b(the)h(original)e(requester)h(rela)m(ys)h(the)f(reply)300
3469 y(to)40 b(other)f(do)m(wnstream)g(mem)m(b)s(ers)f(with)g(its)g
(pro)m(xy)h(hop)g(coun)m(t,)j Fk(\032)c Fn([1)q(].)67
b(Ho)m(w)m(ev)m(er,)43 b(this)38 b(2-)300 3582 y(step)c(reply-rela)m
(ying)e(sc)m(heme)i(in)m(tro)s(duces)f(additional)e(dela)m(y)j(in)e
(loss)h(reco)m(v)m(ery)-8 b(,)37 b(whic)m(h)32 b(ma)m(y)300
3695 y(cause)f(additional)e(duplicate)g(requests)i(b)s(eing)e(sen)m(t.)
42 b(F)-8 b(urthermore,)31 b(the)f(scop)s(es)h(of)g(the)g(\014rst)300
3807 y(reply)h(and)i(the)g(rela)m(y)m(ed)g(reply)e(o)m(v)m(erlap)j
(with)d(one)i(another,)h(so)f(that)h(mem)m(b)s(ers)e(within)e(the)300
3920 y(o)m(v)m(erlapping)f(area)i(will)c(receiv)m(e)j(duplicate)e
(replies.)40 b(Since)30 b(the)h(distance)g(b)s(et)m(w)m(een)g(a)g
(replier)300 4033 y(and)24 b(a)g(requester,)i Fk(h)p
Fn(,)g(is)e(relativ)m(ely)f(small)g(in)g(the)i(a)m(v)m(erage)i(case,)g
(m)m(ulticasting)c(a)i(reply)e(with)g(a)300 4146 y(hop)d(coun)m(t)h
(equal)f(to)i Fk(h)q Fn(+)q Fk(\032)e Fn(should)f(not)h(in)m(tro)s
(duce)g(signi\014can)m(t)g(o)m(v)m(erhead)h(in)f(terms)g(of)h(net)m(w)m
(ork)300 4259 y(bandwidth.)36 b(Therefore,)25 b(in)d(our)h(hop-scop)s
(ed)g(error)g(reco)m(v)m(ery)-8 b(,)27 b(a)d(replier)e(calculates)h
(its)g(reply)300 4372 y(hop)33 b(coun)m(t)h(as)g(the)f(sum)g(of)h(the)f
(distance)g(to)i(the)e(requester)h(and)f(the)g(pro)m(xy)h(hop)f(coun)m
(t)h(of)300 4485 y(the)h(requester.)54 b(If)35 b(m)m(ultiple)d
(requests)j(are)g(receiv)m(ed,)i(the)e(replier)e(tak)m(es)j(the)f
(maxim)m(um)f(of)300 4598 y(its)c(calculations)f(as)i(the)f(reply)f
(hop)h(coun)m(t.)p 300 4677 1320 4 v 404 4731 a Fi(6)438
4762 y Fh(A)23 b(session)i(cycle)e(time)g(is)h(the)f(p)r(erio)r(d)g(b)r
(et)n(w)n(een)h(t)n(w)n(o)f(consecutiv)n(e)h(session)g(messages)h(sen)n
(t)e(b)n(y)f(a)i(mem)n(b)r(er.)300 4854 y(Since)h(all)h(mem)n(b)r(ers)d
(send)h(their)h(session)h(messages)g(at)f(the)f(same)h(rate,)h(a)f(mem)
n(b)r(er)e(should)h(receiv)n(e)h(a)h(session)300 4945
y(message)g(from)g(eac)n(h)g(mem)n(b)r(er)d(during)j(a)g(session)h
(cycle)e(time.)1927 5506 y Fn(7)p eop
%%Page: 8 8
8 7 bop 300 249 a Fo(4)135 b(Group-Scop)t(ed)43 b(Error)i(Reco)l(v)l
(ery)300 451 y Fn(Ideally)-8 b(,)35 b(a)f(request)h(should)d(reac)m(h)j
(a)g(few)f(neigh)m(b)s(ors)f(with)g(the)h(requested)h(data)g(to)g(ask)f
(for)300 564 y(repair,)26 b(and)g(a)h(reply)e(should)g(reac)m(h)i(all)e
(mem)m(b)s(ers)h(who)g(share)g(the)h(same)f(loss.)39
b(Ho)m(w)m(ev)m(er,)30 b(the)300 677 y(propagation)e(of)h(error)f(reco)
m(v)m(ery)i(tra\016c)f(is)e(non-directional)g(in)g(hop-scop)s(ed)h
(error)g(reco)m(v)m(ery)-8 b(.)300 790 y(The)21 b(w)m(asted)i
(bandwidth)c(is)i(not)i(negligible)c(in)i(some)h(cases,)j(esp)s
(ecially)20 b(in)h(terms)h(of)g(the)g(reply)300 903 y(tra\016c.)46
b(F)-8 b(or)32 b(example,)h(the)f(reply)e(from)i(mem)m(b)s(er)f
Fk(r)j Fn(in)d(Figure)g(2)i(propagates)f(upstream)g(as)300
1016 y(w)m(ell)25 b(as)h(do)m(wnstream)g(to)g(reco)m(v)m(er)i(a)e
(loss.)38 b(In)26 b(this)e(section,)j(w)m(e)g(consider)d(the)i(use)g
(of)g(separate)300 1129 y(m)m(ulticast)k(groups)g(to)h(more)f
(precisely)f(con)m(trol)i(the)g(scop)s(e)f(of)h(error)f(reco)m(v)m(ery)
i(tra\016c.)441 1242 y(W)-8 b(e)36 b(use)f(the)g(concept)g(of)g
Fm(lo)-5 b(c)g(al)39 b(r)-5 b(e)g(c)g(overy)38 b(gr)-5
b(oups)p Fn(.)55 b(A)35 b(lo)s(cal)f(group)g(consists)g(of)h(a)g(set)h
(of)300 1355 y(mem)m(b)s(ers)21 b(who)h(share)f(the)h(same)g(losses)g
(to)h(at)f(least)g(some)h(degree.)38 b(Mem)m(b)s(ers)22
b(share)f(the)i(same)300 1468 y(losses)29 b(b)s(ecause)g(they)h(share)f
(one)h(or)f(more)h(lossy)f(links)e(along)i(the)h(data)g(deliv)m(ery)e
(path)h(from)300 1581 y(a)h(source.)40 b(Because)31 b(w)m(e)e(assume)g
(source-sp)s(eci\014c)g(distribution)c(trees,)30 b(the)g(creation)f(of)
h(lo)s(cal)300 1693 y(groups)k(is)f(on)h(a)h(p)s(er-source)f(basis.)52
b(Ho)m(w)m(ev)m(er,)37 b(our)d(mec)m(hanism)g(do)s(es)g(not)h(limit)d
(mem)m(b)s(ers)300 1806 y(to)j(a)g(single)e(lo)s(cal)h(group)f(p)s(er)h
(source.)53 b(Multiple)32 b(lo)s(cal)i(groups)f(can)i(b)s(e)f(asso)s
(ciated)g(with)g(a)300 1919 y(source)29 b(where)f(eac)m(h)i(group)e(is)
f(resp)s(onsible)f(for)i(error)h(reco)m(v)m(ery)h(of)f(one)g(or)f(more)
h(lossy)f(links.)300 2032 y(F)-8 b(or)41 b(a)f(sp)s(eci\014c)f(source,)
k(the)d(relationship)e(among)i(these)h(lossy)e(links)f(is)h(either)h
(ancestor-)300 2145 y(descendan)m(t)k(or)f(siblings;)k(so)c(mem)m(b)s
(ership)e(of)i(these)h(lo)s(cal)f(groups)f(are)i(either)f(p)s(erfectly)
300 2258 y(nested)30 b(or)h(disjoin)m(t.)441 2371 y(Our)26
b(group-scop)s(ed)h(error)g(reco)m(v)m(ery)h(follo)m(ws)f(the)g(SRM)g
(approac)m(h)h(in)d(whic)m(h)h(eac)m(h)j(mem-)300 2484
y(b)s(er)g(is)g(autonomous.)41 b(That)30 b(is,)f(eac)m(h)i(mem)m(b)s
(er)f(joins)f(or)h(lea)m(v)m(es)h(a)f(lo)s(cal)f(group)h(based)g(on)g
(its)300 2597 y(indep)s(enden)m(t)e(decision.)39 b(There)29
b(is)g(no)h(cen)m(tralized)g(co)s(ordination)f(among)h(mem)m(b)s(ers.)
40 b(Mem-)300 2710 y(b)s(ers)27 b(in)g(a)i(session)f(start)h(with)e
(global)h(error)g(reco)m(v)m(ery)-8 b(.)42 b(A)29 b(mem)m(b)s(er)e(who)
i(su\013ers)e(data)i(losses)300 2823 y(from)d(a)g(source)h(prop)s(oses)
e(in)g(its)g(request)i(\(sen)m(t)g(globally\))e(the)h(creation)h(of)f
(a)h(lo)s(cal)e(m)m(ulticast)300 2935 y(group)32 b(for)h(error)f(reco)m
(v)m(ery)-8 b(.)50 b(The)33 b(creation)g(of)g(the)g(lo)s(cal)f(group)g
(is)g(gran)m(ted)i(b)m(y)e(a)h(replier)e(in)300 3048
y(its)38 b(reply)-8 b(.)64 b(Since)37 b(the)i(reply)e(is)g(sen)m(t)i
(globally)-8 b(,)40 b(mem)m(b)s(ers)e(who)g(share)g(the)g(same)h(loss)f
(join)300 3161 y(the)32 b(lo)s(cal)f(group)h(when)f(they)h(receiv)m(e)g
(the)g(reply)-8 b(.)45 b(These)31 b(mem)m(b)s(ers)h(are)g(called)f(the)
h Fm(normal)300 3274 y(memb)-5 b(ers)673 3241 y Fl(7)740
3274 y Fn(of)28 b(the)g(group)f(and)h(their)f(subsequen)m(t)g(requests)
g(are)i(sen)m(t)f(to)h(the)f(lo)s(cal)f(group)g(to)300
3387 y(ask)e(for)f(repair.)37 b(If)24 b(a)h(normal)e(mem)m(b)s(er)h
(has)g(joined)f(m)m(ultiple)f(nested)j(groups,)g(it)f(assumes)g(the)300
3500 y(loss)i(is)f(within)f(the)j(scop)s(e)g(of)f(its)g(innermost)g(lo)
s(cal)f(group)h(and)g(therefore)h(the)g(mem)m(b)s(er)f(sends)300
3613 y(requests)j(to)g(the)g(innermost)f(group.)40 b(If)28
b(the)h(loss)f(actually)h(o)s(ccured)f(in)g(an)h(outer)g(group,)g(an-)
300 3726 y(other)j(normal)e(mem)m(b)s(er)h(who)g(sees)g(the)h(outer)g
(group)e(as)i(its)f(innermost)f(group)h(w)m(ould)f(ha)m(v)m(e)300
3839 y(detected)i(the)e(loss)g(and)g(requested)g(for)g(retransmission.)
441 3952 y(A)e(normal)g(mem)m(b)s(er)f(in)g(a)i(lo)s(cal)e(group)h
(measures)g(the)g(exten)m(t)i(to)f(whic)m(h)e(it)g(shares)h(losses)300
4065 y(with)20 b(that)i(group.)37 b(It)21 b(sta)m(ys)i(in)d(the)h
(group)g(if)f(the)h(degree)h(of)g(loss)f(sharing)e(is)i(high,)h
(otherwise)e(it)300 4177 y(lea)m(v)m(es)26 b(the)f(group.)38
b(W)-8 b(e)26 b(use)e(the)h(concept)h(of)f(an)f Fm(err)-5
b(or)29 b(\014ngerprint)d Fn(to)f(measure)g(loss)f(sharing.)300
4290 y(An)30 b(error)f(\014ngerprin)m(t)f(is)h(the)h(sequence)g(n)m(um)
m(b)s(ers)f(of)h(the)g(last)g Fk(f)39 b Fn(losses)29
b(in)g(the)h(lo)s(cal)f(group,)300 4403 y(and)h(it)g(is)f(used)h(b)m(y)
g(session)f(mem)m(b)s(ers)h(to)h(determine)f(the)g(degree)h(of)g(loss)f
(sharing.)441 4516 y(Other)36 b(mem)m(b)s(ers)f(selectiv)m(ely)g(join)g
(a)i(lo)s(cal)e(group)g(to)i(help)d(error)i(reco)m(v)m(ery)-8
b(.)59 b(They)36 b(are)300 4629 y(called)d Fm(help)-5
b(ers)35 b Fn(of)f(the)g(group.)50 b(When)34 b(a)g(help)s(er)e(receiv)m
(es)i(a)g(request)g(from)f(a)i(mem)m(b)s(er)e(of)h(a)300
4742 y(lo)s(cal)c(group,)g(the)g(help)s(er)f(sends)g(its)h(reply)f(to)i
(that)g(same)g(lo)s(cal)f(group.)441 4855 y(Our)43 b(group-scop)s(ed)h
(error)f(reco)m(v)m(ery)j(follo)m(ws)e(the)g(\\soft-state")j(approac)m
(h.)83 b(That)44 b(is,)300 4968 y(mem)m(b)s(ership)27
b(solicitation)h(and)g(loss)h(sharing)e(measuremen)m(t)j(are)g(p)s
(erio)s(dically)25 b(refreshed)j(to)300 5081 y(capture)39
b(session)f(dynamics.)65 b(The)39 b(mec)m(hanism)f(is)g(describ)s(ed)f
(in)h(detail)g(in)f(the)i(follo)m(wing)p 300 5160 1320
4 v 404 5214 a Fi(7)438 5245 y Fh(In)25 b(the)g(rest)h(of)h(the)e(pap)r
(er,)h(w)n(e)g(will)h(use)f(the)f(terms)g(normal)h(mem)n(b)r(er)d(and)j
(mem)n(b)r(er)d(in)n(terc)n(hangeably)-6 b(.)1927 5506
y Fn(8)p eop
%%Page: 9 9
9 8 bop 300 249 a Fn(sections.)50 b(In)33 b(particular,)g(w)m(e)h
(discuss)d(the)j(criteria)f(for)g(prop)s(osing,)f(gran)m(ting,)j
(joining)d(and)300 361 y(lea)m(ving)e(lo)s(cal)g(groups.)300
605 y Fe(4.1)112 b(Prop)s(osing)37 b(a)h(Lo)s(cal)f(Group)300
776 y Fn(A)44 b(mem)m(b)s(er)f(prop)s(oses)g(a)h(lo)s(cal)f(group)g(if)
g(its)g(error)h(rate)g(exceeds)h Fk(\016)s Fn(\045.)81
b(In)43 b(the)h(extreme)300 889 y(case,)c(w)m(e)e(can)f(c)m(ho)s(ose)i
Fk(\016)h Fn(=)c(0)i(to)g(encourage)g(all)e(error)h(reco)m(v)m(ery)i
(to)f(b)s(e)e(handled)g(b)m(y)h(lo)s(cal)300 1002 y(groups.)h(If)23
b(a)i(mem)m(b)s(er)e(decides)g(to)i(prop)s(ose)e(a)h(lo)s(cal)g(group,)
h(it)e(should)f(w)m(ait)i(a)g(p)s(erio)s(d)e(of)i(time)300
1115 y(b)s(efore)36 b(prop)s(osing)e(in)i(order)f(to)j(learn)d(of)i
(existing)e(lo)s(cal)h(groups.)58 b(If)36 b(there)g(is)g(an)g(existing)
300 1228 y(lo)s(cal)28 b(group,)h(the)h(mem)m(b)s(er)e(should)f(join)h
(the)i(existing)e(lo)s(cal)g(group)h(instead)f(of)h(prop)s(osing)f(a)
300 1341 y(new)33 b(one.)50 b(The)33 b(details)g(of)g(a)h(mem)m(b)s(er)
f(joining)e(an)j(existing)e(lo)s(cal)h(group)g(are)h(discussed)d(in)300
1454 y(Section)d(4.7.)41 b(The)27 b(w)m(aiting)g(p)s(erio)s(d)e(can)j
(b)s(e)f(measured)h(in)e(terms)i(of)g(time,)g(n)m(um)m(b)s(er)e(of)i
(losses)300 1567 y(or)38 b(n)m(um)m(b)s(er)e(of)i(receiv)m(ed)g(data)h
(pac)m(k)m(ets.)65 b(If)37 b(the)h(w)m(aiting)f(p)s(erio)s(d)f(is)g
(long,)k(a)e(mem)m(b)s(er)f(has)300 1680 y(more)29 b(c)m(hance)h(to)f
(learn)f(of)h(existing)f(lo)s(cal)g(groups,)h(so)g(the)g(o)m(v)m
(erhead)h(of)f(unnecessary)f(group)300 1793 y(creation)j(is)f(reduced.)
40 b(On)30 b(the)h(other)g(hand,)f(if)f(the)i(w)m(aiting)f(p)s(erio)s
(d)e(is)i(short,)g(a)h(new)f(group)300 1906 y(can)i(b)s(e)f(created)h
(quic)m(kly)f(and)g(the)h(o)m(v)m(erhead)g(of)g(global)f(error)g(reco)m
(v)m(ery)i(is)e(reduced,)g(at)i(the)300 2018 y(exp)s(ense)d(of)g(group)
g(creation)h(o)m(v)m(erhead.)441 2131 y(A)37 b(mem)m(b)s(er)f(prop)s
(oses)g(a)h(new)g(lo)s(cal)f(group)g(in)f(its)i(request)f(message.)61
b(It)37 b(includes)e(the)300 2244 y(prop)s(osed)30 b(m)m(ulticast)g
(group)h(address)f(and)g(the)h(error)g(\014ngerprin)m(t)e(in)g(the)j
(request)f(message.)300 2357 y(Since)c(the)g(prop)s(osed)g(lo)s(cal)f
(group)h(is)g(not)h(y)m(et)h(created,)g(the)f(mem)m(b)s(er)f(will)e
(use)i(the)h(sequence)300 2470 y(n)m(um)m(b)s(ers)33
b(of)i(its)f(o)m(wn)g(losses)g(as)h(the)g(initial)c(error)j
(\014ngerprin)m(t.)52 b(The)33 b(request)i(prop)s(osing)e(a)300
2583 y(lo)s(cal)k(group)g(is)g(m)m(ulticast)g(globally)g(to)h(suppress)
e(other)i(group)f(prop)s(osals.)61 b(If)37 b(a)i(mem)m(b)s(er)300
2696 y(has)34 b(joined)f(an)m(y)i(lo)s(cal)f(group,)h(it)e(will)f(not)j
(prop)s(ose)e(creation)i(of)f(additional)f(lo)s(cal)g(groups.)300
2809 y(Ho)m(w)m(ev)m(er,)g(it)d(ma)m(y)h(join)e(other)h(lo)s(cal)g
(groups)g(as)g(appropriate.)300 3052 y Fe(4.2)112 b(Gran)m(ting)37
b(a)h(Lo)s(cal)f(Group)300 3224 y Fn(A)25 b(replier)d(gran)m(ts)j(the)g
(creation)g(of)f(a)h(new)f(lo)s(cal)g(group)g(in)f(its)h(reply)-8
b(.)38 b(It)24 b(includes)e(the)j(address)300 3337 y(and)d(the)g(error)
g(\014ngerprin)m(t)e(of)j(the)f(gran)m(ted)h(lo)s(cal)e(group.)38
b(The)21 b(reply)g(gran)m(ting)i(the)f(new)g(lo)s(cal)300
3450 y(group)g(is)f(m)m(ulticast)h(globally)f(to)i(solicit)e(mem)m(b)s
(ers)h(who)g(share)g(the)h(same)f(loss.)38 b(F)-8 b(urthermore,)300
3563 y(the)35 b(replier)d(joins)h(the)i(lo)s(cal)e(group)h(as)h(a)f
(help)s(er.)51 b(Therefore,)36 b(at)f(the)f(b)s(eginning)e(of)i(group)
300 3676 y(creation)d(there)f(is)g(at)h(least)f(one)h(help)s(er)e(in)g
(the)h(group.)300 3919 y Fe(4.3)112 b(Joining)36 b(a)i(Lo)s(cal)g
(Group)f(as)h(a)g(Normal)e(Mem)m(b)s(er)300 4091 y Fn(A)26
b(mem)m(b)s(er)f(joins)f(a)i(lo)s(cal)f(group)g(if)f(it)h(shares)g
(more)h(than)f Fk(x)p Fn(\045)h(of)f(the)h(losses)f(with)f(the)i
(group.)300 4204 y(When)34 b(a)h(reply)e(gran)m(ting)h(a)h(new)f(lo)s
(cal)f(group)h(is)f(receiv)m(ed,)j(a)f(mem)m(b)s(er)f(joins)f(the)h
(group)g(if)300 4316 y(the)25 b(similarit)m(y)d(of)j(its)f(o)m(wn)h
(losses)f(and)g(the)h(error)g(\014ngerprin)m(t)e(of)h(the)h(gran)m(ted)
h(group)e(exceeds)300 4429 y Fk(x)p Fn(\045.)441 4542
y(A)32 b(mem)m(b)s(er)e(can)i(join)e(m)m(ultiple)f(lo)s(cal)i(groups)f
(and)h(these)h(groups)e(are)i(nested.)43 b(That)32 b(is,)300
4655 y(the)d(mem)m(b)s(ership)d(of)j(an)g(inner)e(group)h(is)f(a)j
(subset)e(of)h(the)g(mem)m(b)s(ership)d(of)j(an)f(outer)h(group.)300
4768 y(It)41 b(is)f(imp)s(ortan)m(t)g(for)h(all)f(mem)m(b)s(ers)h(to)g
(main)m(tain)f(a)i(consisten)m(t)f(view)f(of)i(group)e(order)h(so)300
4881 y(they)31 b(can)h(exercise)g(these)f(nested)h(groups)e(in)g(the)i
(same)f(fashion)f(and)h(pro)s(duce)f(correct)j(loss)300
4994 y(sharing)d(measuremen)m(t.)42 b(F)-8 b(urthermore,)32
b(the)f(group)f(order)h(is)f(used)g(in)f(error)i(reco)m(v)m(ery)i
(since)300 5107 y(a)i(mem)m(b)s(er)e(alw)m(a)m(ys)i(sends)f(its)f
(requests)h(to)h(its)f(innermost)f(lo)s(cal)h(group)f(\014rst.)52
b(One)34 b(simple)300 5220 y(w)m(a)m(y)d(to)f(determine)f(the)h(order)g
(of)g(a)g(lo)s(cal)f(group)h(is)f(b)m(y)g(the)h(sequence)h(n)m(um)m(b)s
(er)d(of)i(the)g(reply)1927 5506 y(9)p eop
%%Page: 10 10
10 9 bop 300 1165 a @beginspecial 15 @hoffset 130 @voffset
45 @hscale 35 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/fix.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 4 FMDOCUMENT
0 0 /Helvetica-Narrow-BoldOblique FMFONTDEFINE
1 0 /Times-BoldItalic FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
243 582.72 270 619.2 R
5 X
0 K
V
1 H
0 Z
N
234 537.12 297 582.72 R
V
N
270 482.4 324 537.12 R
V
N
90 180 29.99 27.36 272.99 619.2 G
2 H
2 Z
90 180 29.99 27.36 272.99 619.2 A
180 270 36 54.72 272.99 537.13 G
180 270 36 54.72 272.99 537.13 A
90 180 18 45.59 243 573.61 G
90 180 18 45.59 243 573.61 A
180 270 12 36.48 237 573.6 G
180 270 12 36.48 237 573.6 A
180 270 24 18.24 296.99 482.41 G
180 270 24 18.24 296.99 482.41 A
0 90 27 63.84 270 582.72 G
0 90 27 63.84 270 582.72 A
270 360 27 54.71 324 537.12 G
270 360 27 54.71 324 537.12 A
0 90 53.98 45.6 297.02 537.12 G
0 90 53.98 45.6 297.02 537.12 A
270 360 24 18.24 296.99 482.41 G
270 360 24 18.24 296.99 482.41 A
441 582.72 468 619.2 R
V
1 H
0 Z
N
432 537.12 495 582.72 R
V
N
468 482.4 522 537.12 R
V
N
90 180 29.99 27.36 470.99 619.2 G
2 H
2 Z
90 180 29.99 27.36 470.99 619.2 A
180 270 36 54.72 470.99 537.13 G
180 270 36 54.72 470.99 537.13 A
90 180 18 45.59 441 573.61 G
90 180 18 45.59 441 573.61 A
180 270 12 36.48 435 573.6 G
180 270 12 36.48 435 573.6 A
180 270 24 18.24 494.99 482.41 G
180 270 24 18.24 494.99 482.41 A
0 90 27 63.84 468 582.72 G
0 90 27 63.84 468 582.72 A
270 360 27 54.71 522 537.12 G
270 360 27 54.71 522 537.12 A
0 90 53.98 45.6 495.02 537.12 G
0 90 53.98 45.6 495.02 537.12 A
270 360 24 18.24 494.99 482.41 G
270 360 24 18.24 494.99 482.41 A
474 490.01 495 640.48 R
6 X
V
1 H
0 Z
N
447.76 540.17 474 623.77 R
V
N
442.51 540.17 447.76 573.61 R
V
N
495 490.01 516 640.48 R
V
N
516 540.17 536.99 607.04 R
V
N
536.99 540.17 547.49 573.61 R
V
N
90 180 26.24 16.72 473.99 623.76 G
2 Z
90 180 26.24 16.72 473.99 623.76 A
90 180 21 33.44 494.99 640.48 G
90 180 21 33.44 494.99 640.48 A
180 270 31.5 50.16 473.99 540.17 G
180 270 31.5 50.16 473.99 540.17 A
90 180 15.75 50.15 447.75 573.61 G
90 180 15.75 50.15 447.75 573.61 A
180 270 10.5 33.44 442.5 573.6 G
180 270 10.5 33.44 442.5 573.6 A
180 270 21 16.73 494.99 490.01 G
180 270 21 16.73 494.99 490.01 A
0 90 21.39 33.44 515.6 607.05 G
0 90 21.39 33.44 515.6 607.05 A
0 90 21.19 33.44 494.41 640.48 G
0 90 21.19 33.44 494.41 640.48 A
270 360 31.49 50.16 515.99 540.17 G
270 360 31.49 50.16 515.99 540.17 A
0 90 21.2 33.44 536.8 573.61 G
0 90 21.2 33.44 536.8 573.61 A
270 360 10.51 33.44 547.49 573.61 G
270 360 10.51 33.44 547.49 573.61 A
270 360 21 16.73 494.99 490.01 G
270 360 21 16.73 494.99 490.01 A
297.01 490.02 318.01 640.48 R
V
0 Z
N
318.01 540.17 339 607.05 R
V
N
339 540.18 349.5 573.61 R
V
N
276.01 490.02 297.01 640.48 R
V
N
255.01 540.17 276.01 607.05 R
V
N
244.51 540.18 255.01 573.61 R
V
N
0 90 21 33.43 318.01 607.05 G
2 Z
0 90 21 33.43 318.01 607.05 A
0 90 21 33.44 297.01 640.49 G
0 90 21 33.44 297.01 640.49 A
270 360 31.49 50.15 318.01 540.18 G
270 360 31.49 50.15 318.01 540.18 A
0 90 21 33.44 339 573.62 G
0 90 21 33.44 339 573.62 A
270 360 10.5 33.44 349.5 573.62 G
270 360 10.5 33.44 349.5 573.62 A
270 360 21 16.73 297.01 490.01 G
270 360 21 16.73 297.01 490.01 A
90 180 21.19 66.88 297.59 607.04 G
90 180 21.19 66.88 297.59 607.04 A
180 270 31.49 50.16 276.01 540.18 G
180 270 31.49 50.16 276.01 540.18 A
90 180 39.35 33.44 273.36 573.62 G
90 180 39.35 33.44 273.36 573.62 A
180 270 10.51 33.44 244.51 573.62 G
180 270 10.51 33.44 244.51 573.62 A
180 270 21 16.73 297.01 490.01 G
180 270 21 16.73 297.01 490.01 A
2 H
3 X
90 180 26.24 16.72 473.99 623.76 A
90 180 21 33.44 494.99 640.48 A
180 270 31.5 50.16 473.99 540.17 A
90 180 15.75 50.15 447.75 573.61 A
180 270 10.5 33.44 442.5 573.6 A
180 270 21 16.73 494.99 490.01 A
0 90 21.39 33.44 515.6 607.05 A
0 90 21.19 33.44 494.41 640.48 A
270 360 31.49 50.16 515.99 540.17 A
0 90 21.2 33.44 536.8 573.61 A
270 360 10.51 33.44 547.49 573.61 A
270 360 21 16.73 494.99 490.01 A
99.01 490.02 120.01 640.48 R
6 X
V
1 H
0 Z
N
120 540.17 141 607.05 R
V
N
141 540.18 151.5 573.61 R
V
N
78.01 490.02 99.01 640.48 R
V
N
57.01 540.17 78.01 607.05 R
V
N
46.51 540.18 57.01 573.61 R
V
N
0 90 21 33.43 120.01 607.05 G
2 Z
0 90 21 33.43 120.01 607.05 A
0 90 21 33.44 99.01 640.49 G
0 90 21 33.44 99.01 640.49 A
270 360 31.49 50.15 120.01 540.18 G
270 360 31.49 50.15 120.01 540.18 A
0 90 21 33.44 141 573.62 G
0 90 21 33.44 141 573.62 A
270 360 10.5 33.44 151.5 573.62 G
270 360 10.5 33.44 151.5 573.62 A
270 360 21 16.73 99.01 490.01 G
270 360 21 16.73 99.01 490.01 A
90 180 21.19 66.88 99.59 607.04 G
90 180 21.19 66.88 99.59 607.04 A
180 270 31.49 50.16 78.01 540.18 G
180 270 31.49 50.16 78.01 540.18 A
90 180 39.35 33.44 75.35 573.62 G
90 180 39.35 33.44 75.35 573.62 A
180 270 10.51 33.44 46.51 573.62 G
180 270 10.51 33.44 46.51 573.62 A
180 270 21 16.73 99.01 490.01 G
180 270 21 16.73 99.01 490.01 A
621 432 765 756 R
2 X
90 450 9 9.12 99 746.88 G
0.5 H
0 Z
90 450 9 9.12 99 746.88 A
105.61 706.11 99 683.04 92.39 706.11 99 706.11 4 Y
V
99 728.64 99 706.11 2 L
V
4 H
2 Z
N
0 24 Q
0 X
(source) 114 732.71 T
1 F
(G) 279 524.29 T
1 18 Q
(2) 296.32 524.29 T
1 24 Q
(G) 90 551.65 T
1 18 Q
(1) 107.32 551.65 T
2 24 Q
(\050a\051) 87.69 437.41 T
90 450 9 9.12 63 619.2 G
0.5 H
0 Z
90 450 9 9.12 63 619.2 A
2 H
2 Z
3 X
0 90 21 33.43 120.01 607.05 A
0 90 21 33.44 99.01 640.49 A
270 360 31.49 50.15 120.01 540.18 A
0 90 21 33.44 141 573.62 A
270 360 10.5 33.44 151.5 573.62 A
270 360 21 16.73 99.01 490.01 A
90 180 21.19 66.88 99.59 607.04 A
180 270 31.49 50.16 78.01 540.18 A
90 180 39.35 33.44 75.35 573.62 A
180 270 10.51 33.44 46.51 573.62 A
180 270 21 16.73 99.01 490.01 A
2 X
90 450 9 9.12 297 746.88 G
0.5 H
0 Z
90 450 9 9.12 297 746.88 A
303.61 706.11 297 683.04 290.39 706.11 297 706.11 4 Y
V
297 728.64 297 706.11 2 L
V
4 H
2 Z
N
0 F
0 X
(source) 312 732.71 T
1 F
(G) 322.34 583.32 T
1 18 Q
(1) 339.65 583.32 T
2 24 Q
(\050b\051) 285.69 437.41 T
90 450 9 9.12 261 619.2 G
0.5 H
0 Z
90 450 9 9.12 261 619.2 A
2 H
2 Z
3 X
0 90 21 33.43 318.01 607.05 A
0 90 21 33.44 297.01 640.49 A
270 360 31.49 50.15 318.01 540.18 A
0 90 21 33.44 339 573.62 A
270 360 10.5 33.44 349.5 573.62 A
270 360 21 16.73 297.01 490.01 A
90 180 21.19 66.88 297.59 607.04 A
180 270 31.49 50.16 276.01 540.18 A
90 180 39.35 33.44 273.36 573.62 A
180 270 10.51 33.44 244.51 573.62 A
180 270 21 16.73 297.01 490.01 A
2 X
90 180 29.99 27.36 470.99 619.2 A
180 270 36 54.72 470.99 537.13 A
90 180 18 45.59 441 573.61 A
180 270 12 36.48 435 573.6 A
180 270 24 18.24 494.99 482.41 A
0 90 27 63.84 468 582.72 A
270 360 27 54.71 522 537.12 A
0 90 53.98 45.6 495.02 537.12 A
270 360 24 18.24 494.99 482.41 A
1 F
0 X
(G) 477 524.29 T
1 18 Q
(2) 494.32 524.29 T
2 X
90 450 9 9.12 495 746.88 G
0.5 H
0 Z
90 450 9 9.12 495 746.88 A
501.61 706.11 495 683.04 488.39 706.11 495 706.11 4 Y
V
495 728.64 495 706.11 2 L
V
4 H
2 Z
N
0 24 Q
0 X
(source) 510 732.71 T
1 F
(G) 520.34 583.32 T
1 18 Q
(1) 537.66 583.32 T
2 24 Q
(\050c\051) 483.69 437.41 T
90 450 9 9.12 459 619.2 G
0.5 H
0 Z
90 450 9 9.12 459 619.2 A
1 F
(p) 471.34 597.25 T
2 H
2 Z
2 X
90 180 29.99 27.36 272.99 619.2 A
180 270 36 54.72 272.99 537.13 A
90 180 18 45.59 243 573.61 A
180 270 12 36.48 237 573.6 A
180 270 24 18.24 296.99 482.41 A
0 90 27 63.84 270 582.72 A
270 360 27 54.71 324 537.12 A
0 90 53.98 45.6 297.02 537.12 A
270 360 24 18.24 296.99 482.41 A
672 490.01 693 640.48 R
6 X
V
1 H
0 Z
N
645.76 540.17 672 623.77 R
V
N
640.51 540.17 645.76 573.61 R
V
N
693 490.01 714 640.48 R
V
N
714 540.17 734.99 607.04 R
V
N
734.99 540.17 745.49 573.61 R
V
N
90 180 26.24 16.72 671.99 623.76 G
2 Z
90 180 26.24 16.72 671.99 623.76 A
90 180 21 33.44 692.99 640.48 G
90 180 21 33.44 692.99 640.48 A
180 270 31.5 50.16 671.99 540.17 G
180 270 31.5 50.16 671.99 540.17 A
90 180 15.75 50.15 645.75 573.61 G
90 180 15.75 50.15 645.75 573.61 A
180 270 10.5 33.44 640.5 573.6 G
180 270 10.5 33.44 640.5 573.6 A
180 270 21 16.73 692.99 490.01 G
180 270 21 16.73 692.99 490.01 A
0 90 21.39 33.44 713.6 607.05 G
0 90 21.39 33.44 713.6 607.05 A
0 90 21.19 33.44 692.41 640.48 G
0 90 21.19 33.44 692.41 640.48 A
270 360 31.49 50.16 713.99 540.17 G
270 360 31.49 50.16 713.99 540.17 A
0 90 21.2 33.44 734.8 573.61 G
0 90 21.2 33.44 734.8 573.61 A
270 360 10.51 33.44 745.49 573.61 G
270 360 10.51 33.44 745.49 573.61 A
270 360 21 16.73 692.99 490.01 G
270 360 21 16.73 692.99 490.01 A
2 H
3 X
90 180 26.24 16.72 671.99 623.76 A
90 180 21 33.44 692.99 640.48 A
180 270 31.5 50.16 671.99 540.17 A
90 180 15.75 50.15 645.75 573.61 A
180 270 10.5 33.44 640.5 573.6 A
180 270 21 16.73 692.99 490.01 A
0 90 21.39 33.44 713.6 607.05 A
0 90 21.19 33.44 692.41 640.48 A
270 360 31.49 50.16 713.99 540.17 A
0 90 21.2 33.44 734.8 573.61 A
270 360 10.51 33.44 745.49 573.61 A
270 360 21 16.73 692.99 490.01 A
612 432 756 756 R
2 X
90 450 9 9.12 693 746.88 G
0.5 H
0 Z
90 450 9 9.12 693 746.88 A
699.61 706.11 693 683.04 686.39 706.11 693 706.11 4 Y
V
693 728.64 693 706.11 2 L
V
4 H
2 Z
N
0 F
0 X
(source) 708 732.71 T
1 F
(G) 684 542.53 T
1 18 Q
(1) 701.32 542.53 T
2 24 Q
(\050d\051) 681.69 437.41 T
90 450 9 9.12 657 619.2 G
0.5 H
0 Z
90 450 9 9.12 657 619.2 A
1 F
(p) 669.34 597.25 T
(p) 270 597.25 T
(p) 75.34 597.25 T
FMENDPAGE
%%EndDocument
 @endspecial 901 1311 a Fn(Figure)30 b(3:)41 b(Ev)m(olution)29
b(of)i(misplaced)e(nested)h(lo)s(cal)g(groups)300 1586
y(gran)m(ting)h(the)g(lo)s(cal)g(group.)42 b(The)30 b(sequence)i(n)m
(um)m(b)s(er)e(of)h(the)g(reply)f(gran)m(ting)h(a)g(lo)s(cal)f(group)
300 1699 y(is)j(called)h(the)h Fm(or)-5 b(der)38 b(numb)-5
b(er)35 b Fn(of)f(the)h(lo)s(cal)f(group)2136 1666 y
Fl(8)2175 1699 y Fn(.)53 b(Generally)33 b(sp)s(eaking,)i(a)g(lo)s(cal)e
(group)300 1812 y(gran)m(ted)k(later)g(has)f(a)h(larger)f(group)h
(order)f(n)m(um)m(b)s(er)f(and)h(a)h(larger)f(scop)s(e.)60
b(Note)38 b(that)f(the)300 1925 y(session)32 b(original)f(group)i(is)f
(alw)m(a)m(ys)i(the)f(outermost)h(group)e(ev)m(en)i(though)f(it)g(do)s
(es)f(not)i(ha)m(v)m(e)300 2038 y(an)c(order)g(n)m(um)m(b)s(er.)441
2151 y(The)g(order)g(of)g(nested)g(groups)g(ma)m(y)g(not)h(re\015ect)g
(their)e(ph)m(ysical)g(scop)s(es)h(at)h(a)g(particular)300
2264 y(p)s(oin)m(t)26 b(of)i(time)f(but)g(abnormal)g(cases)h(will)d(b)s
(e)i(\014xed)f(after)i(the)g(requests)f(and)g(replies)f(dissem-)300
2377 y(inate)36 b(completely)-8 b(.)58 b(F)-8 b(or)37
b(example,)h(in)d(Figure)h(3,)i(a)e(new)g(mem)m(b)s(er)g
Fk(p)g Fn(ma)m(y)g(prop)s(ose)g(a)g(new)300 2490 y(group)g
Fk(G)636 2504 y Fl(2)711 2490 y Fn(b)s(efore)f(learning)g(of)h(the)h
(existing)e(lo)s(cal)g(groups,)j Fk(G)2577 2504 y Fl(1)2652
2490 y Fn(\(Figure)e(3.a)h(and)f(3.b\).)58 b Fk(p)300
2603 y Fn(will)23 b(b)s(e)j(solicited)f(to)h(join)f Fk(G)1290
2617 y Fl(1)1355 2603 y Fn(later)h(and)g(then)f(it)h(will)d(use)j
Fk(G)2417 2617 y Fl(1)2482 2603 y Fn(as)g(the)g(innermost)f(lo)s(cal)g
(group)300 2715 y(\(Figure)37 b(3.c\).)61 b(The)37 b(mem)m(b)s(ership)d
(solicitation)i(sc)m(heme)h(is)f(discussed)f(in)h(Section)h(4.7.)61
b(A)m(t)300 2828 y(this)29 b(p)s(oin)m(t)h(of)g(time,)h(the)g(ph)m
(ysical)e(scop)s(e)h(of)h Fk(G)1978 2842 y Fl(1)2047
2828 y Fn(is)f(larger)g(than)g(the)h(ph)m(ysical)e(scop)s(e)h(of)h
Fk(G)3536 2842 y Fl(2)3575 2828 y Fn(.)300 2941 y(Ev)m(en)m(tually)-8
b(,)38 b Fk(G)853 2955 y Fl(2)928 2941 y Fn(will)c(b)s(e)h(timed)h(out)
g(and)g(disapp)s(ear)e(\(Figure)i(3.d\).)59 b(The)36
b(group)g(timeout)300 3054 y(sc)m(heme)31 b(is)f(discussed)e(in)h
(Section)h(4.6.)441 3167 y(The)d(threshold)e Fk(x)i Fn(de\014nes)f(the)
h(tradeo\013s)h(b)s(et)m(w)m(een)f(the)h(n)m(um)m(b)s(er)d(of)i(nested)
g(lo)s(cal)g(groups)300 3280 y(and)41 b(the)h(error)f(reco)m(v)m(ery)i
(p)s(erformance.)74 b(F)-8 b(or)42 b(larger)f Fk(x)p
Fn(,)k(more)c(nested)h(lo)s(cal)f(groups)g(are)300 3393
y(created,)25 b(and)d(eac)m(h)h(group)e(has)h(a)h(higher)e(loss)g
(sharing)g(ratio)h(and)f(ac)m(hiev)m(es)j(greater)f(e\016ciency)300
3506 y(for)33 b(retransmission.)46 b(As)33 b(a)g(result,)g(the)h(group)
e(main)m(tenance)h(o)m(v)m(erhead)i(is)d(higher)f(and)i(the)300
3619 y(error)26 b(reco)m(v)m(ery)i(p)s(erformance)d(is)h(b)s(etter.)39
b(On)25 b(the)i(other)f(hand,)h(for)f(smaller)e Fk(x)p
Fn(,)j(few)m(er)g(nested)300 3732 y(lo)s(cal)k(groups)g(are)h(main)m
(tained)f(and)g(the)g(loss)g(sharing)g(ratio)g(in)g(eac)m(h)i(lo)s(cal)
e(group)g(is)f(lo)m(w)m(er.)300 3845 y(In)f(the)h(extreme)h(case,)g(if)
e(w)m(e)h(c)m(ho)s(ose)h Fk(x)25 b Fn(=)g(0,)31 b(there)f(is)f(only)g
(one)h(lo)s(cal)f(group)g(in)g(the)h(session)300 3957
y(to)i(reco)m(v)m(er)h(all)e(losses;)g(if)g(w)m(e)g(c)m(ho)s(ose)i
Fk(x)27 b Fn(=)f(100\045,)33 b(the)f(n)m(um)m(b)s(er)e(of)i(lo)s(cal)e
(groups)h(is)f(equal)h(to)300 4070 y(the)i(n)m(um)m(b)s(er)f(of)i
(lossy)f(links)e(and)h(eac)m(h)j(lo)s(cal)d(group)h(reco)m(v)m(ers)i
(the)f(losses)e(of)i(a)g(single)e(lossy)300 4183 y(link.)300
4427 y Fe(4.4)112 b(Error)37 b(Reco)m(v)m(ery)g(in)f(a)i(Lo)s(cal)f
(Group)300 4598 y Fn(If)32 b(a)h(loss)f(is)g(detected,)j(a)e(mem)m(b)s
(er)f(sends)g(its)g(request)h(to)g(its)f(innermost)g(group)g(on)h(its)f
(\014rst)300 4711 y(try)-8 b(.)63 b(If)37 b(there)h(is)e(no)i(reply)-8
b(,)38 b(it)g(will)d(expand)h(its)h(request)h(scop)s(e)g(b)m(y)f
(trying)g(its)g(next)h(outer)300 4824 y(group)c(un)m(til)f(the)h(loss)g
(is)f(reco)m(v)m(ered.)55 b(As)34 b(describ)s(ed)f(earlier,)h(ev)m(en)h
(if)f(a)g(request)h(addressed)300 4937 y(to)29 b(the)f(innermost)e
(group)h(do)s(es)h(not)g(reac)m(h)h(a)f(help)s(er,)f(mem)m(b)s(ers)g
(in)f(the)i(outer)h(group)e(should)p 300 5016 1320 4
v 404 5070 a Fi(8)438 5102 y Fh(T)-6 b(o)25 b(b)r(e)f(precise,)h(an)f
(order)h(n)n(um)n(b)r(er)d(consists)j(of)g(the)f(sequence)f(n)n(um)n(b)
r(er)g(of)h(the)g(reply)g(gran)n(ting)h(the)e(lo)r(cal)300
5193 y(group)j(in)f(the)h(high)f(order)h(p)r(ortion)g(and)g(the)f(lo)r
(cal)i(group)f(address)g(in)g(the)f(lo)n(w)i(order)f(p)r(ortion.)1905
5506 y Fn(10)p eop
%%Page: 11 11
11 10 bop 300 249 a Fn(ha)m(v)m(e)29 b(detected)h(the)e(loss)g(and)f
(sen)m(t)i(their)e(requests.)40 b(As)28 b(a)g(result,)g(a)h(mem)m(b)s
(er)e(addressing)g(its)300 361 y(request)i(to)h(its)e(innermost)g
(group)g(ma)m(y)h(receiv)m(e)h(a)g(reply)d(from)i(its)f(outer)h(group.)
40 b(Therefore,)300 474 y(the)32 b(ma)5 b(jorit)m(y)32
b(of)g(the)h(losses)e(are)i(reco)m(v)m(ered)g(on)f(the)g(\014rst)g(try)
g(and)f(sending)f(requests)i(to)h(an)300 587 y(outer)26
b(group)e(should)g(happ)s(en)f(rarely)-8 b(.)39 b(Note)26
b(that,)i(since)c(mem)m(b)s(ers)h(in)f(the)h(inner)f(group)g(ma)m(y)300
700 y(rely)30 b(on)g(mem)m(b)s(ers)g(in)f(the)i(outer)g(group)f(to)h
(ask)g(for)f(data)h(repair,)f(a)h(mem)m(b)s(er)f Fk(p)p
Fn('s)g(sc)m(heduled)300 813 y(request)37 b(should)e(not)i(b)s(e)g
(suppressed)e(b)m(y)h(a)i(request)f(from)f(a)i(lo)s(cal)e(group)g
Fk(G)h Fn(if)f Fk(p)g Fn(is)g(not)i(a)300 926 y(normal)27
b(mem)m(b)s(er)g(in)g Fk(G)1156 893 y Fl(9)1195 926 y
Fn(.)40 b(In)27 b(other)i(w)m(ords,)f(a)h(request)f(addressed)f(to)i(a)
f(lo)s(cal)f(group)h(should)300 1039 y(only)h(suppress)g(requests)h(of)
h(normal)e(mem)m(b)s(ers)h(in)f(the)h(group.)441 1152
y(The)f(order)f(n)m(um)m(b)s(er)g(of)h(the)g(addressed)f(group)g(is)g
(included)f(in)g(the)i(request)g(message.)42 b(It)300
1265 y(is)23 b(used)g(b)m(y)h(a)g(replier)e(to)i(determine)f(the)h
(destination)f(group)g(for)h(that)g(reply)-8 b(.)38 b(A)24
b(replier)e(sends)300 1378 y(its)i(reply)g(to)h(the)g(lo)s(cal)f(group)
g(to)h(whic)m(h)f(the)h(request)g(w)m(as)g(sen)m(t.)39
b(If)24 b(there)h(are)g(more)g(than)g(one)300 1491 y(requests,)k(and)f
(they)h(are)g(receiv)m(ed)g(from)g(di\013eren)m(t)f(groups,)g(the)h
(replier)e(addresses)h(its)g(reply)300 1603 y(to)33 b(the)f(group)f
(with)g(the)h(largest)g(order)f(n)m(um)m(b)s(er.)45 b(Moreo)m(v)m(er,)
34 b(if)d(a)h(request)g(is)f(addressed)g(to)300 1716
y(an)g(outer)g(group,)g(the)h(group)e(address,)h(order)g(n)m(um)m(b)s
(er)f(and)g(error)h(\014ngerprin)m(t)e(of)i(the)h(inner)300
1829 y(group)e(are)h(carried)e(in)g(the)i(request)f(message)i(to)f
(solicit)e(new)h(mem)m(b)s(ers.)300 2070 y Fe(4.5)112
b(Lea)m(ving)38 b(a)g(Lo)s(cal)f(Group)300 2242 y Fn(A)c(normal)f(mem)m
(b)s(er)g(measures)h(the)g(degree)h(of)f(loss)f(sharing)f(in)h(eac)m(h)
i(lo)s(cal)e(group)g(it)h(joins.)300 2354 y(The)g(degree)h(of)g(loss)e
(sharing)g(in)g(a)i(lo)s(cal)f(group)g(is)f(the)i(ratio)f(of)h(the)g(n)
m(um)m(b)s(er)e(of)h(reco)m(v)m(ered)300 2467 y(losses)25
b(and)f(the)i(n)m(um)m(b)s(er)e(of)h(receiv)m(ed)h(replies)d(in)h(the)i
(group.)38 b(F)-8 b(or)26 b(example,)g(the)g(loss)e(sharing)300
2580 y(can)34 b(b)s(e)f(measured)g(ev)m(ery)h Fk(m)f
Fn(replies)f(receiv)m(ed)i(in)e(a)i(lo)s(cal)f(group.)50
b(T)-8 b(o)34 b(prev)m(en)m(t)g(oscillation,)300 2693
y(exp)s(onen)m(tially-w)m(eigh)m(ted)i(mo)m(ving)h(a)m(v)m(erage)i(is)d
(adopted.)60 b(If)37 b(a)g(normal)f(mem)m(b)s(er's)g(ratio)h(is)300
2806 y(smaller)29 b(than)h Fk(x)p Fn(\045,)g(it)g(lea)m(v)m(es)i(the)e
(lo)s(cal)g(group.)441 2919 y(A)g(help)s(er)d(lea)m(v)m(es)k(a)f(lo)s
(cal)f(group)f(if)h(it)g(do)s(es)g(not)h(act)g(as)g(an)f(activ)m(e)i
(replier)c(in)i(the)g(group.)300 3032 y(F)-8 b(or)30
b(example,)g(a)g(help)s(er)d(lea)m(v)m(es)k(a)f(lo)s(cal)e(group)h(if)g
(its)f(last)i Fk(k)i Fn(consecutiv)m(e)f(sc)m(heduled)d(replies)300
3145 y(for)d(the)h(lo)s(cal)f(group)g(are)h(suppressed.)37
b(As)26 b(a)g(result,)g(there)g(are)g(at)g(most)g Fk(k)j
Fn(help)s(ers)23 b(in)i(a)h(lo)s(cal)300 3258 y(group.)300
3498 y Fe(4.6)112 b(Timing)36 b(Out)h(a)h(Lo)s(cal)f(Group)300
3670 y Fn(If)28 b(there)g(is)f(no)i(error)e(reco)m(v)m(ery)j(tra\016c)f
(in)e(a)i(lo)s(cal)e(group,)h(the)h(lo)s(cal)e(group)h(should)e(b)s(e)i
(timed)300 3783 y(out)34 b(to)h(reduce)f(group)f(main)m(tenance)i(o)m
(v)m(erhead.)53 b(Both)34 b(help)s(ers)e(and)i(mem)m(b)s(ers)f
(determine)300 3896 y(when)j(a)h(lo)s(cal)f(group)g(is)f(dorman)m(t)i
(and)f(lea)m(v)m(e)i(the)f(group.)59 b(The)36 b(time)g(out)h(p)s(erio)s
(d)e(can)i(b)s(e)300 4009 y(measured)30 b(in)f(terms)h(of)h(seconds)f
(or)g(the)h(n)m(um)m(b)s(er)e(of)h(receiv)m(ed)h(data)g(pac)m(k)m(ets.)
300 4249 y Fe(4.7)112 b(Soliciting)34 b(New)j(Mem)m(b)s(ers)300
4421 y Fn(Since)d(an)h(error)g(\014ngerprin)m(t)e(is)h(a)h(snapshot)g
(of)g(the)g(group)g(losses,)h(a)f(mem)m(b)s(er)g(who)f(shares)300
4534 y(the)f(ma)5 b(jorit)m(y)34 b(of)f(losses)g(with)f(a)i(lo)s(cal)e
(group)h(ma)m(y)h(unfortunately)d(decide)i(not)h(to)g(join)e(the)300
4647 y(group)37 b(when)f(it)h(compares)g(its)g(losses)g(with)f(the)h
(group)g(error)f(\014ngerprin)m(t.)60 b(F)-8 b(urthermore,)300
4760 y(when)34 b(a)h(new)f(mem)m(b)s(er)g(joins)g(an)g(ongoing)h
(session,)g(it)f(has)h(no)f(kno)m(wledge)h(of)g(the)g(existing)300
4873 y(lo)s(cal)k(groups.)66 b(Therefore,)42 b(to)e(capture)f(new)g
(mem)m(b)s(ers)f(as)i(w)m(ell)e(as)h(old)g(mem)m(b)s(ers)f(whose)300
4986 y(snapshots)31 b(happ)s(ened)g(to)h(b)s(e)g(sk)m(ew)m(ed,)h(a)f
(sc)m(heme)h(to)g(p)s(erio)s(dically)28 b(solicit)j(new)h(mem)m(b)s
(ers)f(is)300 5098 y(required.)p 300 5172 1320 4 v 404
5225 a Fi(9)438 5257 y Fd(p)25 b Fh(is)i(a)f(help)r(er)f(in)h
Fd(G)g Fh(to)g(b)r(e)f(able)h(to)g(receiv)n(e)g(a)g(request)f
(addressed)h(to)g Fd(G)p Fh(.)1905 5506 y Fn(11)p eop
%%Page: 12 12
12 11 bop 441 249 a Fn(A)35 b(lo)s(cal)f(group)g(solicits)f(new)i(mem)m
(b)s(ers)f(b)m(y)g(p)s(erio)s(dic)e(p)s(olling.)51 b(Mem)m(b)s(ers)35
b(p)s(erio)s(dically)300 361 y(send)i(their)f(requests)h(to)i(the)e
(next)h(outer)g(group)f(to)h(solicit)e(new)h(mem)m(b)s(ers.)61
b(Mem)m(b)s(ers)37 b(in)300 474 y(the)f(outer)g(group)f(join)g(the)h
(inner)e(group)h(based)h(on)g(the)g(comparison)f(of)h(their)e(o)m(wn)i
(losses)300 587 y(and)h(the)i(inner)d(group)h(error)h(\014ngerprin)m
(t.)61 b(Since)37 b(the)h(requests)g(soliciting)e(new)i(mem)m(b)s(ers)
300 700 y(are)f(sen)m(t)g(to)g(the)g(next)g(outer)g(group,)g(a)g(new)f
(mem)m(b)s(er)g(joins)g(lo)s(cal)f(groups)h(one)h(at)g(a)g(time)300
813 y(in)c(an)i(outside-in)e(fashion)h(un)m(til)f(it)h(has)g(joined)g
(all)f(nested)i(lo)s(cal)f(groups.)53 b(Note)36 b(that,)h(if)d(a)300
926 y(requester)g(do)s(es)f(not)h(receiv)m(e)g(a)g(reply)f(in)f(its)h
(\014rst)g(try)-8 b(,)35 b(the)f(next)f(request)h(addressed)f(to)h(an)
300 1039 y(outer)39 b(group)f(can)g(also)h(serv)m(e)g(the)g(purp)s(ose)
e(of)h(mem)m(b)s(ership)e(solicitation.)64 b(The)38 b(requests)300
1152 y(soliciting)c(new)i(mem)m(b)s(ers)g(suppress)e(one)j(another)f
(to)h(minimize)d(the)j(n)m(um)m(b)s(er)e(of)h(requests)300
1265 y(addressed)29 b(to)j(the)e(outer)h(group.)441 1378
y(The)e(same)h(sc)m(heme)g(is)e(used)h(to)h(solicit)e(new)h(help)s
(ers.)39 b(A)29 b(replier)f(to)i(a)g(request)f(soliciting)300
1491 y(new)k(mem)m(b)s(ers)f(joins)g(the)i(inner)d(group)i(as)g(a)h
(help)s(er.)47 b(Ho)m(w)m(ev)m(er,)36 b(a)e(help)s(er)d(that)j(is)e
(already)300 1603 y(in)37 b(the)h(inner)e(group)h(is)g(closer)h(to)h
(the)f(requester)g(and)f(is)g(most)i(lik)m(ely)d(to)j(resp)s(ond)d(to)j
(the)300 1716 y(request)29 b(soliciting)f(new)h(help)s(ers.)38
b(Therefore,)30 b(unless)e(all)g(help)s(ers)f(in)i(the)g(inner)f(group)
h(ha)m(v)m(e)300 1829 y(left)h(the)h(session,)e(a)i(new)f(help)s(er)f
(will)e(only)j(rarely)f(need)h(to)i(join)d(the)h(inner)f(group.)300
2116 y Fo(5)135 b(Sim)l(ulation)46 b(Results)g(and)f(Discussions)300
2319 y Fn(W)-8 b(e)44 b(b)s(eliev)m(e)e(the)g(b)s(eha)m(vior)g(of)h
(our)f(prop)s(osed)f(mec)m(hanisms)h(migh)m(t)h(b)s(e)f(b)s(est)g
(understo)s(o)s(d)300 2432 y(b)m(y)30 b(\014rst)f(testing)h(a)h(v)-5
b(ariet)m(y)30 b(of)h(extreme)g(settings)f(b)s(efore)f(mo)m(ving)h(on)g
(to)h(more)f(complicated)300 2544 y(scenarios.)37 b(Consequen)m(tly)-8
b(,)23 b(w)m(e)f(initially)17 b(explored)j(our)h(lo)s(cal)f(reco)m(v)m
(ery)j(mec)m(hanisms)d(in)g(three)300 2657 y(extreme)k(but)f(simple)e
(top)s(ologies)j({)g(star,)h(string)d(and)h(binary)f(tree)i({)g(eac)m
(h)g(with)e(a)i(single)e(data)300 2770 y(source.)40 b(The)27
b(star)h(top)s(ology)g(represen)m(ts)f(a)h(session)f(where)g(all)g(mem)
m(b)s(ers)f(ha)m(v)m(e)j(indep)s(enden)m(t)300 2883 y(losses.)48
b(The)32 b(string)g(top)s(ology)h(represen)m(ts)g(a)g(session)f(where)g
(do)m(wnstream)h(mem)m(b)s(ers)f(share)300 2996 y(the)e(same)h(losses)e
(with)g(their)g(upstream)g(mem)m(b)s(ers.)40 b(The)30
b(binary)e(tree)j(top)s(ology)f(represen)m(ts)300 3109
y(a)h(mixture)e(of)h(shared)g(and)g(indep)s(enden)m(t)e(losses)i(in)f
(a)i(session.)441 3222 y(Eac)m(h)k(top)s(ology)g(is)f(tested)h(with)e
(four)h(di\013eren)m(t)g(session)g(sizes:)49 b(8,)36
b(16,)g(32)g(and)e(64.)54 b(W)-8 b(e)300 3335 y(sim)m(ulated)28
b(the)i(p)s(erformance)f(of)g(\014v)m(e)h(di\013eren)m(t)f(mec)m
(hanisms)f(for)h(eac)m(h)i(session)e(size:)40 b(global)300
3448 y(error)45 b(reco)m(v)m(ery)-8 b(,)51 b(hop-scop)s(ed)44
b(error)g(reco)m(v)m(ery)-8 b(,)51 b(and)45 b(group-scop)s(ed)f(error)h
(reco)m(v)m(ery)h(with)300 3561 y(three)31 b(di\013eren)m(t)e(degrees)i
(of)g(loss)f(sharing,)f(33\045,)i(50\045)g(and)f(100\045.)441
3674 y(W)-8 b(e)44 b(adopted)f(a)f(dynamic)g(timer)g(adjustmen)m(t)g
(mec)m(hanism)g(to)h(optimize)f(the)h(p)s(erfor-)300
3786 y(mance)38 b(of)h(the)f(reco)m(v)m(ery)i(dela)m(y)-8
b(,)40 b(and)e(the)g(n)m(um)m(b)s(er)f(of)h(requests)g(and)f(replies)f
(p)s(er)h(loss)h([5].)300 3899 y(The)32 b(general)h(idea)g(of)g(the)g
(dynamic)f(timer)g(adjustmen)m(t)h(mec)m(hanism)f(is)g(to)h(mak)m(e)h
(the)f(gen-)300 4012 y(eration)28 b(of)h(request)f(and)f(reply)g
(timers)h(adaptiv)m(e)g(to)h(the)f(session)g(en)m(vironmen)m(t.)39
b(A)29 b(mem)m(b)s(er)300 4125 y(in)m(terprets)i(the)h(feedbac)m(k)g
(from)g(a)g(session)f(as)g(an)h(estimated)g(session)f(size)2969
4092 y Fl(10)3044 4125 y Fn(,)h(and)f(uses)h(the)300
4238 y(estimated)c(size)f(to)h(tune)g(its)f(request)g(and)g(reply)f
(timer)h(parameters,)i Fk(A)p Fn(,)f Fk(B)5 b Fn(,)28
b Fk(a)g Fn(and)e Fk(b)p Fn(.)40 b(These)300 4351 y(parameters)i(are)g
(describ)s(ed)d(in)h(Section)h(2)h(and)f(they)h(determine)e(whether)h
(requests)h(and)300 4464 y(replies)31 b(are)i(generated)h(aggressiv)m
(ely)e(or)h(conserv)-5 b(ativ)m(ely)d(.)48 b(The)32 b(feedbac)m(k)i
(from)e(the)h(session)300 4577 y(is)k(the)i(receiv)m(ed)g(requests)f
(and)g(replies.)63 b(More)40 b(duplicate)d(requests)h(and)g(replies)e
(imply)h(a)300 4690 y(larger)h(session)g(size,)j(therefore,)g(a)e(mem)m
(b)s(er)f(should)e(increase)j(its)f(timer)g(parameters)h(and)300
4803 y(send)27 b(requests)h(and)g(replies)e(conserv)-5
b(ativ)m(ely)28 b(to)h(reduce)f(duplicates.)39 b(Otherwise,)27
b(a)i(mem)m(b)s(er)300 4916 y(should)f(decrease)k(its)d(timer)h
(parameters)h(to)g(minimize)d(reco)m(v)m(ery)k(dela)m(y)-8
b(.)p 300 4995 1320 4 v 373 5048 a Fi(10)438 5080 y Fh(The)27
b(estimated)f(session)i(size)f(ma)n(y)e(not)h(re\015ect)g(the)g(actual)
h(session)h(size.)37 b(It)26 b(represen)n(ts)h(the)f(n)n(um)n(b)r(er)e
(of)300 5171 y(mem)n(b)r(ers)g(to)i(comp)r(ete)f(for)h(sending)g
(requests)g(and)f(replies.)1905 5506 y Fn(12)p eop
%%Page: 13 13
13 12 bop 300 1177 a @beginspecial 70 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/starx1.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
154.286 94.5 ms
[] 2.600000 SL
236.571 83.25 ns
401.143 77.625 ns
730.286 74.8116 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 94.5 ms
236.571 83.25 ns
401.143 77.625 ns
730.286 74.8116 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 94.5 ms
236.571 83.25 ns
401.143 77.625 ns
730.286 74.8116 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 249.66 ms
[6 6] 2.600000 SL
236.571 250.02 ns
401.143 250.74 ns
730.286 250.884 ns
nsend
D9
154.286 249.66 ms
236.571 250.02 ns
401.143 250.74 ns
730.286 250.884 ns
nsend
D9
154.286 147.132 ms
[] 2.600000 SL
236.571 115.308 ns
401.143 100.368 ns
730.286 93.366 ns
nsend
D9
154.286 140.346 ms
236.571 111.96 ns
401.143 100.296 ns
730.286 93.726 ns
nsend
D9
154.286 140.436 ms
236.571 111.96 ns
401.143 98.982 ns
730.286 93.384 ns
nsend
D9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 174.857 72 TXC
(10) 0 174.857 43.2 TXC
(|) 0 277.714 72 TXC
(20) 0 277.714 43.2 TXC
(|) 0 380.571 72 TXC
(30) 0 380.571 43.2 TXC
(|) 0 483.429 72 TXC
(40) 0 483.429 43.2 TXC
(|) 0 586.286 72 TXC
(50) 0 586.286 43.2 TXC
(|) 0 689.143 72 TXC
(60) 0 689.143 43.2 TXC
(|) 0 792 72 TXC
(70) 0 792 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 108 TXC
(20) 0 60 100.8 TXR
(|) -90 72 144 TXC
(40) 0 60 136.8 TXR
(|) -90 72 180 TXC
(60) 0 60 172.8 TXR
(|) -90 72 216 TXC
(80) 0 60 208.8 TXR
(|) -90 72 252 TXC
(100) 0 60 244.8 TXR
(|) -90 72 288 TXC
(120) 0 60 280.8 TXR
(|) 180 72 288 TXC
(|) 180 174.857 288 TXC
(|) 180 277.714 288 TXC
(|) 180 380.571 288 TXC
(|) 180 483.429 288 TXC
(|) 180 586.286 288 TXC
(|) 180 689.143 288 TXC
(|) 180 792 288 TXC
(|) 90 792 72 TXC
(|) 90 792 108 TXC
(|) 90 792 144 TXC
(|) 90 792 180 TXC
(|) 90 792 216 TXC
(|) 90 792 252 TXC
(|) 90 792 288 TXC
() 0 432 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 792 72 
L9
0 setlinecap
72 72 72 288 
L9
72 288 792 288 
L9
792 72 792 288 
L9
() 0 792 12 TXR
(                        request traffic %) 90 -1.2 288 TXR
30 /Times-Bold SetTxt
( (a)) 0 432 18 TXC
() 0 432 -13.5 TXC
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
12 SetSym
<08> 154.286 94.5 SY
<08> 236.571 83.25 SY
<08> 401.143 77.625 SY
<08> 730.286 74.8116 SY
<02> 154.286 94.5 SY
<02> 236.571 83.25 SY
<02> 401.143 77.625 SY
<02> 730.286 74.8116 SY
<04> 154.286 94.5 SY
<04> 236.571 83.25 SY
<04> 401.143 77.625 SY
<04> 730.286 74.8116 SY
<0d> 154.286 249.66 SY
<0d> 236.571 250.02 SY
<0d> 401.143 250.74 SY
<0d> 730.286 250.884 SY
<0a> 154.286 249.66 SY
<0a> 236.571 250.02 SY
<0a> 401.143 250.74 SY
<0a> 730.286 250.884 SY
<08> 154.286 147.132 SY
<08> 236.571 115.308 SY
<08> 401.143 100.368 SY
<08> 730.286 93.366 SY
<02> 154.286 140.346 SY
<02> 236.571 111.96 SY
<02> 401.143 100.296 SY
<02> 730.286 93.726 SY
<04> 154.286 140.436 SY
<04> 236.571 111.96 SY
<04> 401.143 98.982 SY
<04> 730.286 93.384 SY
initclip 
showpage
end
%%EndDocument
 @endspecial 750 x @beginspecial 70 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/starx2.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
154.286 77.4 ms
[] 2.600000 SL
236.571 74.7 ns
401.143 73.35 ns
730.286 72.6748 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 77.4 ms
236.571 74.7 ns
401.143 73.35 ns
730.286 72.6748 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 77.4 ms
236.571 74.7 ns
401.143 73.35 ns
730.286 72.6748 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 189.806 ms
[6 6] 2.600000 SL
236.571 219.653 ns
401.143 244.446 ns
730.286 281.304 ns
nsend
D9
154.286 189.806 ms
236.571 219.653 ns
401.143 244.446 ns
730.286 281.304 ns
nsend
D9
154.286 105.378 ms
[] 2.600000 SL
236.571 94.4536 ns
401.143 82.8721 ns
730.286 77.8977 ns
nsend
D9
154.286 99.591 ms
236.571 91.132 ns
401.143 82.1118 ns
730.286 77.9223 ns
nsend
D9
154.286 100.199 ms
236.571 91.132 ns
401.143 80.3627 ns
730.286 77.6726 ns
nsend
D9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 174.857 72 TXC
(10) 0 174.857 43.2 TXC
(|) 0 277.714 72 TXC
(20) 0 277.714 43.2 TXC
(|) 0 380.571 72 TXC
(30) 0 380.571 43.2 TXC
(|) 0 483.429 72 TXC
(40) 0 483.429 43.2 TXC
(|) 0 586.286 72 TXC
(50) 0 586.286 43.2 TXC
(|) 0 689.143 72 TXC
(60) 0 689.143 43.2 TXC
(|) 0 792 72 TXC
(70) 0 792 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 115.2 TXC
(100) 0 60 108 TXR
(|) -90 72 158.4 TXC
(200) 0 60 151.2 TXR
(|) -90 72 201.6 TXC
(300) 0 60 194.4 TXR
(|) -90 72 244.8 TXC
(400) 0 60 237.6 TXR
(|) -90 72 288 TXC
(500) 0 60 280.8 TXR
(|) 180 72 288 TXC
(|) 180 174.857 288 TXC
(|) 180 277.714 288 TXC
(|) 180 380.571 288 TXC
(|) 180 483.429 288 TXC
(|) 180 586.286 288 TXC
(|) 180 689.143 288 TXC
(|) 180 792 288 TXC
(|) 90 792 72 TXC
(|) 90 792 115.2 TXC
(|) 90 792 158.4 TXC
(|) 90 792 201.6 TXC
(|) 90 792 244.8 TXC
(|) 90 792 288 TXC
() 0 432 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 792 72 
L9
0 setlinecap
72 72 72 288 
L9
72 288 792 288 
L9
792 72 792 288 
L9
() 0 792 12 TXR
(                        reply traffic %) 90 -1.2 288 TXR
30 /Times-Bold SetTxt
( (b)) 0 432 18 TXC
() 0 432 -13.5 TXC
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
12 SetSym
<08> 154.286 77.4 SY
<08> 236.571 74.7 SY
<08> 401.143 73.35 SY
<08> 730.286 72.6748 SY
<02> 154.286 77.4 SY
<02> 236.571 74.7 SY
<02> 401.143 73.35 SY
<02> 730.286 72.6748 SY
<04> 154.286 77.4 SY
<04> 236.571 74.7 SY
<04> 401.143 73.35 SY
<04> 730.286 72.6748 SY
<0d> 154.286 189.806 SY
<0d> 236.571 219.653 SY
<0d> 401.143 244.446 SY
<0d> 730.286 281.304 SY
<0a> 154.286 189.806 SY
<0a> 236.571 219.653 SY
<0a> 401.143 244.446 SY
<0a> 730.286 281.304 SY
<08> 154.286 105.378 SY
<08> 236.571 94.4536 SY
<08> 401.143 82.8721 SY
<08> 730.286 77.8977 SY
<02> 154.286 99.591 SY
<02> 236.571 91.132 SY
<02> 401.143 82.1118 SY
<02> 730.286 77.9223 SY
<04> 154.286 100.199 SY
<04> 236.571 91.132 SY
<04> 401.143 80.3627 SY
<04> 730.286 77.6726 SY
initclip 
showpage
end
%%EndDocument
 @endspecial 750 x @beginspecial 70 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/starx3.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
154.286 213.48 ms
[6 6] 2.600000 SL
236.571 216.072 ns
401.143 223.416 ns
730.286 249.336 ns
nsend
D9
154.286 213.48 ms
236.571 216.072 ns
401.143 223.416 ns
730.286 249.336 ns
nsend
D9
154.286 212.184 ms
[] 2.600000 SL
236.571 213.048 ns
401.143 216.288 ns
730.286 241.992 ns
nsend
D9
154.286 211.968 ms
236.571 212.616 ns
401.143 216.288 ns
730.286 242.208 ns
nsend
D9
154.286 212.184 ms
236.571 212.616 ns
401.143 215.64 ns
730.286 241.992 ns
nsend
D9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 174.857 72 TXC
(10) 0 174.857 43.2 TXC
(|) 0 277.714 72 TXC
(20) 0 277.714 43.2 TXC
(|) 0 380.571 72 TXC
(30) 0 380.571 43.2 TXC
(|) 0 483.429 72 TXC
(40) 0 483.429 43.2 TXC
(|) 0 586.286 72 TXC
(50) 0 586.286 43.2 TXC
(|) 0 689.143 72 TXC
(60) 0 689.143 43.2 TXC
(|) 0 792 72 TXC
(70) 0 792 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 115.2 TXC
(2) 0 60 108 TXR
(|) -90 72 158.4 TXC
(4) 0 60 151.2 TXR
(|) -90 72 201.6 TXC
(6) 0 60 194.4 TXR
(|) -90 72 244.8 TXC
(8) 0 60 237.6 TXR
(|) -90 72 288 TXC
(10) 0 60 280.8 TXR
(|) 180 72 288 TXC
(|) 180 174.857 288 TXC
(|) 180 277.714 288 TXC
(|) 180 380.571 288 TXC
(|) 180 483.429 288 TXC
(|) 180 586.286 288 TXC
(|) 180 689.143 288 TXC
(|) 180 792 288 TXC
(|) 90 792 72 TXC
(|) 90 792 115.2 TXC
(|) 90 792 158.4 TXC
(|) 90 792 201.6 TXC
(|) 90 792 244.8 TXC
(|) 90 792 288 TXC
() 0 432 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 792 72 
L9
0 setlinecap
72 72 72 288 
L9
72 288 792 288 
L9
792 72 792 288 
L9
(                        session size) 0 792 12 TXR
(                        delay ratio) 90 -1.2 288 TXR
30 /Times-Bold SetTxt
( (c)) 0 432 18 TXC
() 0 432 -13.5 TXC
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
12 SetSym
<0d> 154.286 213.48 SY
<0d> 236.571 216.072 SY
<0d> 401.143 223.416 SY
<0d> 730.286 249.336 SY
<0a> 154.286 213.48 SY
<0a> 236.571 216.072 SY
<0a> 401.143 223.416 SY
<0a> 730.286 249.336 SY
<08> 154.286 212.184 SY
<08> 236.571 213.048 SY
<08> 401.143 216.288 SY
<08> 730.286 241.992 SY
<02> 154.286 211.968 SY
<02> 236.571 212.616 SY
<02> 401.143 216.288 SY
<02> 730.286 242.208 SY
<04> 154.286 212.184 SY
<04> 236.571 212.616 SY
<04> 401.143 215.64 SY
<04> 730.286 241.992 SY
initclip 
showpage
end
%%EndDocument
 @endspecial -60 x @beginspecial 60 @hoffset 30 @voffset
40 @hscale 40 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/idx1.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
54 621 90 621 2 L
3 H
2 Z
3 X
0 K
N
54 657 90 657 2 L
N
54 639 90 639 2 L
N
54 711 90 711 2 L
0 X
N
54 693 90 693 2 L
N
54 675 90 675 2 L
N
0 20 Q
(global error recovery) 125.22 742.37 T
(hop-scoped error recovery) 125.22 724.86 T
(group-scoped error recovery :) 125.22 707.73 T
1 F
(x=33%,) 368.32 707.73 T
2 F
(d) 437.33 707.73 T
1 F
(=0%, m=10, k=3, f=6) 447.2 707.73 T
0 F
(group-scoped error recovery :) 125.22 689.98 T
1 F
(x=50%,) 368.32 689.98 T
2 F
(d) 437.33 689.98 T
1 F
(=0%, m=10, k=3, f=6) 447.2 689.98 T
0 F
(group-scoped error recovery :) 125.22 672.22 T
1 F
(x=100%,) 368.32 672.22 T
2 F
(d) 447.32 672.22 T
1 F
(=0%, m=10, k=3, f=6) 457.2 672.22 T
0 F
(Estimated lower bound for) 125.22 652.69 T
1 F
( x=33%) 338.96 652.69 T
0 F
(Estimated lower bound for) 125.22 634.92 T
1 F
(x=50%) 343.96 634.92 T
0 F
(Estimated lower bound for) 125.22 617.15 T
1 F
(x=100%) 343.96 617.15 T
0.5 H
90 450 4.5 4.5 103.5 729 A
99 751.5 108 742.5 2 L
N
108 751.5 99 742.5 2 L
N
103.5 751.5 103.5 742.5 2 L
N
99 747 108 747 2 L
N
101.25 706.51 105.75 715.5 R
N
103.5 697.5 99 688.51 108 688.51 3 Y
N
103.5 679.51 99 675.01 103.5 670.5 108 675.01 4 Y
N
101.25 652.51 105.75 661.51 R
N
103.5 643.51 99 634.51 108 634.51 3 Y
N
103.5 625.51 99 621.01 103.5 616.48 108 621.01 4 Y
N
99 612 108 756 R
90 450 4.5 4.5 40.5 729 A
36 751.5 45 742.5 2 L
N
45 751.5 36 742.5 2 L
N
40.5 751.5 40.5 742.5 2 L
N
36 747 45 747 2 L
N
38.25 706.51 42.75 715.5 R
N
40.5 697.5 36 688.51 45 688.51 3 Y
N
40.5 679.51 36 675.01 40.5 670.5 45 675.01 4 Y
N
38.25 652.51 42.75 661.51 R
N
40.5 643.51 36 634.51 45 634.51 3 Y
N
40.5 625.51 36 621.01 40.5 616.48 45 621.01 4 Y
N
36 612 45 756 R
82.62 747 90 747 2 L
3 H
N
54 747 61.38 747 2 L
N
68.22 747 75.6 747 2 L
N
82.62 729 90 729 2 L
N
54 729 61.38 729 2 L
N
68.22 729 75.6 729 2 L
N
FMENDPAGE
%%EndDocument
 @endspecial 476 x Fn(Figure)32 b(4:)46 b(Sim)m(ulation)30
b(results)i(in)f(star)i(top)s(ology)g(:)45 b(all)32 b(links)e(with)i
(uniformly-distributed)300 3206 y(error)e(rate)441 3464
y(The)25 b(\014rst)g(set)i(of)f(sim)m(ulations)d(assumed)i(that)i(all)d
(links)g(are)i(with)f(uniformly-distributed)300 3577
y(error)39 b(rates)h(and)e(their)g(error)h(rates)h(are)f(\014xed)g
(throughout)g(the)g(sim)m(ulation.)65 b(The)39 b(result)300
3689 y(is)d(sho)m(wn)h(in)f(Figures)h(4,)j(5)e(and)e(6.)63
b(The)37 b(request)g(tra\016c)h(is)e(the)i(pro)s(duct)e(of)i(the)f(a)m
(v)m(erage)300 3802 y(measured)28 b(scop)s(e)g(a)h(request)f
(propagates)h(and)f(the)g(a)m(v)m(erage)j(measured)d(n)m(um)m(b)s(er)f
(of)h(requests)300 3915 y(p)s(er)e(loss.)38 b(The)27
b(measured)f(request)g(scop)s(e)h(is)f(a)h(fraction)f(of)h(the)g
(global)f(scop)s(e.)40 b(F)-8 b(or)27 b(example,)300
4028 y(in)36 b(global)h(error)g(reco)m(v)m(ery)-8 b(,)41
b(the)d(request)f(scop)s(e)g(is)g(equal)f(to)j(the)e(global)g(scop)s(e)
g(since)g(eac)m(h)300 4141 y(request)27 b(is)g(m)m(ulticast)f(to)i(the)
g(en)m(tire)f(session,)g(therefore,)i(the)e(request)h(tra\016c)g(is)e
(the)h(a)m(v)m(erage)300 4254 y(n)m(um)m(b)s(er)g(of)h(request)h
(messages)g(p)s(er)e(loss.)39 b(The)28 b(reply)f(tra\016c)i(is)e(the)h
(pro)s(duct)f(of)i(the)f(a)m(v)m(erage)300 4367 y(measured)f(scop)s(e)i
(a)f(reply)f(propagates)i(and)e(the)i(a)m(v)m(erage)h(measured)e(n)m
(um)m(b)s(er)e(of)j(replies)d(p)s(er)300 4480 y(loss.)57
b(The)36 b(measured)f(reply)g(scop)s(e)h(is)f(a)h(fraction)g(of)g(the)g
(global)g(scop)s(e.)57 b(The)36 b(dela)m(y)g(ratio)300
4593 y(is)c(the)i(a)m(v)m(erage)i(ratio)d(of)g(the)h(measured)e(reco)m
(v)m(ery)j(dela)m(y)e(and)g(the)g(measured)g(propagation)300
4706 y(dela)m(y)d(from)g(the)h(source.)441 4819 y(In)42
b(the)h(star)g(top)s(ology)-8 b(,)47 b(the)c(distances)f(b)s(et)m(w)m
(een)h(eac)m(h)h(pair)d(of)i(mem)m(b)s(ers)f(are)h(equal.)300
4931 y(Therefore,)k(hop-scop)s(ed)42 b(lo)s(cal)h(reco)m(v)m(ery)i(p)s
(erforms)c(exactly)j(lik)m(e)f(global)g(error)g(reco)m(v)m(ery)-8
b(.)300 5044 y(Since)38 b(mem)m(b)s(ers)g(ha)m(v)m(e)i(indep)s(enden)m
(t)c(losses,)41 b(there)e(is)f(no)h(loss)f(shared)g(among)h(mem)m(b)s
(ers.)300 5157 y(Appro)m(ximately)30 b(one)g(request)h(message)g(p)s
(er)f(loss)g(is)f(generated)j(\(Figure)e(4.a\).)42 b(Ho)m(w)m(ev)m(er,)
33 b(in)1905 5506 y(13)p eop
%%Page: 14 14
14 13 bop 300 817 a @beginspecial 40 @hoffset 90 @voffset
40 @hscale 40 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/dup.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 3 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Helvetica-Narrow-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
0 576 144 684 R
6 X
0 K
V
0 684 792 756 R
V
360 648 576 684 R
5 X
V
0 576 792 756 R
4 H
2 Z
0 X
N
0 24 Q
(star) 231.99 730.93 T
(string) 437.67 730.93 T
(tree) 663.76 730.93 T
684 720 684 577.29 2 L
0.5 H
N
630 720 630 577.29 2 L
N
738 720 738 577.29 2 L
N
576 756 576 576 2 L
2 H
N
360 756 360 576 2 L
N
144 756 144 576 2 L
3 H
N
0 684 792 684 2 L
N
(8) 593.44 694.93 T
(16) 640.68 694.93 T
(32) 694.6 694.93 T
(64) 748.52 694.93 T
0 720 792 720 2 L
2 H
N
414 720 414 577.29 2 L
0.5 H
N
468 720 468 577.29 2 L
N
522 720 522 577.29 2 L
N
306 718.71 306 576 2 L
N
252 718.71 252 576 2 L
N
198 718.71 198 576 2 L
N
(8) 161.07 694.93 T
(16) 208.66 694.93 T
(32) 262.93 694.93 T
(64) 317.2 694.93 T
(8) 377.37 694.93 T
(16) 424.65 694.93 T
(32) 478.62 694.93 T
(64) 532.58 694.93 T
0 648 792 648 2 L
N
1.28 612 792 612 2 L
N
1 18 Q
(0.99) 159.02 662.67 T
(16.0) 159.02 625.29 T
(98.7%) 151.53 587.92 T
(0.99) 213.02 662.04 T
(32.0) 213.02 624.95 T
(98.9%) 205.53 587.86 T
2 22 Q
-0.66 (topology) 37.97 730.93 S
-0.66 (session size) 24.23 695.92 S
-0.66 (request per loss) 9.02 660.91 S
-0.66 (request hops) 20.74 625.89 S
-0.66 (request traf\336c) 18.22 590.88 S
1 18 Q
(0.99) 267.02 662.04 T
(64.0) 267.02 624.95 T
(99.3%) 259.53 587.86 T
(0.99) 321.02 662.04 T
(128.0) 316.53 624.95 T
(99.4%) 313.53 587.86 T
(1.60) 375.02 662.04 T
(6.5) 379.52 624.95 T
(64.7%) 367.53 587.86 T
(2.1) 429.36 663.35 T
(1) 451.18 663.35 T
(6.7) 433.52 625.72 T
(44.3%) 421.53 588.1 T
(2.96) 483.02 662.04 T
(6.8) 487.52 624.95 T
(31.6%) 475.53 587.86 T
(4.84) 537.02 662.04 T
(6.9) 541.52 624.95 T
(26.1%) 529.53 587.86 T
(1.09) 591.02 661.88 T
(7.6) 595.52 624.81 T
(51.8%) 583.53 587.73 T
(1.56) 645.02 662.04 T
(7.3) 649.52 624.95 T
(35.7%) 637.53 587.86 T
(1.73) 699.02 662.04 T
(7.7) 703.52 624.95 T
(20.8%) 691.53 587.86 T
(2.09) 753.02 662.04 T
(7.5) 757.52 624.95 T
(12.3%) 745.53 587.86 T
FMENDPAGE
%%EndDocument
 @endspecial 146 x Fn(T)-8 b(able)36 b(1:)53 b(The)35
b(n)m(um)m(b)s(er)g(of)i(requests)f(p)s(er)f(loss)h(and)f(the)i(n)m(um)
m(b)s(er)e(of)h(hops)f(that)i(a)g(request)300 1076 y(tra)m(v)m(els)31
b(in)e(hop-scop)s(e)h(error)g(reco)m(v)m(ery)300 1351
y(group-scop)s(ed)23 b(error)g(reco)m(v)m(ery)-8 b(,)28
b(eac)m(h)c(mem)m(b)s(er)f(creates)i(its)e(o)m(wn)h(lo)s(cal)f(group,)h
(so)g(the)g(request)300 1464 y(and)i(reply)g(tra\016c)h(is)f(reduced)g
(signi\014can)m(tly)-8 b(.)38 b(Note)29 b(that,)f(b)s(ecause)f(of)g
(the)g(constan)m(t)h(n)m(um)m(b)s(er)300 1577 y(of)i(help)s(ers)e(in)g
(a)i(lo)s(cal)f(group,)h(the)f(request)h(and)f(reply)g(tra\016c)h(go)s
(es)g(do)m(wn)g(with)e(the)i(session)300 1690 y(size)j(\(Figure)h(4.a)g
(and)f(4.b\).)51 b(On)32 b(the)i(other)g(hand,)f(since)g(there)h(is)e
(little)h(loss)g(sharing,)g(the)300 1803 y(n)m(um)m(b)s(er)g(of)i(a)m
(v)-5 b(ailable)34 b(help)s(ers)f(for)h(a)h(sp)s(eci\014c)f(loss)g(is)g
(large)g(in)g(global)g(error)g(reco)m(v)m(ery)j(and)300
1916 y(hop-scop)s(ed)31 b(error)h(reco)m(v)m(ery)-8 b(.)48
b(A)32 b(a)h(result,)f(there)g(are)g(m)m(ultiple)e(replies)g(generated)
k(p)s(er)d(loss)300 2029 y(and)f(the)g(reply)f(tra\016c)i(increases)f
(with)f(the)i(session)e(size)i(\(Figure)f(4.b\).)441
2142 y(The)21 b(n)m(um)m(b)s(er)g(of)h(lo)s(cal)f(groups)g(in)f
(group-scop)s(ed)h(error)g(reco)m(v)m(ery)j(is)d(equal)g(to)h(the)g(n)m
(um)m(b)s(er)300 2255 y(of)33 b(lossy)g(links.)47 b(In)33
b(general,)h(if)e(there)i(are)f Fk(n)g Fn(mem)m(b)s(ers)g(in)f(a)h
(session,)h(the)f(n)m(um)m(b)s(er)f(of)i(lo)s(cal)300
2367 y(groups)24 b(is)f(equal)h(to)h Fk(n)p Fn(.)38 b(Eac)m(h)25
b(lo)s(cal)e(group)h(reco)m(v)m(ers)2165 2332 y Fl(1)p
2161 2347 43 4 v 2161 2399 a Fg(n)2238 2367 y Fn(of)g(total)h(losses)f
(in)f(the)i(session)e(and)h(its)300 2480 y(scop)s(e)32
b(is)g(roughly)988 2445 y Fl(1)p 984 2460 V 984 2512
a Fg(n)1069 2480 y Fn(of)h(the)f(session)g(scop)s(e.)47
b(Therefore,)33 b(w)m(e)g(can)f(estimate)i(a)e(lo)m(w)m(er)h(b)s(ound)
300 2593 y(on)k(the)g(request)g(and)f(reply)g(tra\016c)h(in)f
(group-scop)s(ed)g(error)h(reco)m(v)m(ery)h(as)3008 2558
y Fl(1)p 3005 2573 V 3005 2625 a Fg(n)3094 2593 y Fn(of)f(the)g
(tra\016c)300 2706 y(in)g(global)i(error)f(reco)m(v)m(ery)-8
b(.)68 b(Since)38 b(this)g(estimated)h(request)g(and)f(reply)f
(tra\016c)j(is)d(a)j(lo)m(w)m(er)300 2819 y(b)s(ound,)25
b(it)g(represen)m(ts)h(the)g(greatest)i(degree)e(of)g(sa)m(vings)g(p)s
(ossible)2628 2786 y Fl(11)2703 2819 y Fn(.)39 b(The)25
b(estimated)i(v)-5 b(alues)300 2932 y(are)31 b(sho)m(wn)f(as)g(gra)m(y)
h(curv)m(es)g(in)e(Figure)h(4.)441 3045 y(In)24 b(the)h(string)f(top)s
(ology)-8 b(,)27 b(do)m(wnstream)d(mem)m(b)s(ers)g(share)h(all)e
(losses)h(with)g(their)g(upstream)300 3158 y(mem)m(b)s(ers.)45
b(A)32 b(do)m(wnstream)g(mem)m(b)s(er)f(can)i(rely)e(on)h(its)f
(upstream)h(mem)m(b)s(ers)f(to)i(ask)f(for)g(re-)300
3271 y(pair)j(in)g(hop-scop)s(ed)h(error)g(reco)m(v)m(ery)-8
b(.)60 b(As)37 b(a)f(result,)h(request)g(tra\016c)g(in)e(hop-scop)s(ed)
g(error)300 3384 y(reco)m(v)m(ery)i(is)e(reduced)g(signi\014can)m(tly)
-8 b(.)56 b(Moreo)m(v)m(er,)39 b(request)d(tra\016c)g(in)e(hop-scop)s
(ed)h(error)h(re-)300 3497 y(co)m(v)m(ery)d(go)s(es)f(do)m(wn)e(with)g
(the)i(session)e(size)h(b)s(ecause)g(more)g(do)m(wnstream)g(mem)m(b)s
(ers)g(rely)f(on)300 3609 y(their)f(upstream)h(mem)m(b)s(ers)g(to)h
(ask)f(for)h(repair.)441 3722 y(T)-8 b(able)23 b(1)i(sho)m(ws)e(the)h
(a)m(v)m(erage)i(n)m(um)m(b)s(er)d(of)h(requests)f(p)s(er)g(loss)g(and)
g(the)h(a)m(v)m(erage)i(n)m(um)m(b)s(er)d(of)300 3835
y(hops)k(that)h(a)g(request)f(message)i(tra)m(v)m(els)f(in)f(hop-scop)s
(ed)g(error)g(reco)m(v)m(ery)2875 3802 y Fl(12)2950 3835
y Fn(.)39 b(The)28 b(n)m(um)m(b)s(er)e(of)300 3948 y(requests)21
b(p)s(er)f(loss)h(in)f(the)h(string)f(top)s(ology)i(increases)f(with)f
(the)h(session)f(size)h(and)g(the)g(n)m(um)m(b)s(er)300
4061 y(of)34 b(hops)e(that)j(a)e(request)h(message)h(tra)m(v)m(els)f
(remains)e(constan)m(t.)52 b(Ho)m(w)m(ev)m(er,)36 b(the)e(increase)f
(in)300 4174 y(the)f(n)m(um)m(b)s(er)e(of)i(requests)g(p)s(er)f(loss)g
(is)g(sub-linear)e(in)h(terms)i(of)g(the)g(session)f(size;)h
(therefore,)300 4287 y(the)d(a)m(v)m(erage)j(request)d(tra\016c)h
(still)d(decreases)i(with)f(the)h(session)g(size.)40
b(As)29 b(describ)s(ed)e(earlier,)300 4400 y(ev)m(en)40
b(if)e(m)m(ultiple)e(requests)j(p)s(er)f(loss)g(are)i(presen)m(ted)f
(in)e(hop-scop)s(ed)i(error)f(reco)m(v)m(ery)-8 b(,)44
b(the)300 4513 y(o)m(v)m(erall)33 b(request)f(tra\016c)h(is)e(impro)m
(v)m(ed)h(b)s(ecause)g(the)h(scop)s(e)f(of)h(eac)m(h)g(request)g(is)e
(small)g(and)h(a)300 4626 y(mem)m(b)s(er)e(far)g(b)s(ehind)d(a)k(lossy)
f(link)e(ma)m(y)j(receiv)m(e)g(a)g(reply)e(b)s(efore)h(ev)m(en)h
(sending)e(a)i(request.)441 4739 y(On)f(the)h(other)g(hand,)f(in)g
(group-scop)s(ed)g(error)h(reco)m(v)m(ery)-8 b(,)33 b(request)e
(messages)h(propagate)p 300 4818 1320 4 v 373 4871 a
Fi(11)438 4903 y Fh(Upp)r(er)f(b)r(ound)f(estimates)h(w)n(ould)h(need)e
(to)i(tak)n(e)e(sev)n(eral)i(other)f(factors)i(in)n(to)e(accoun)n(t.)51
b(F)-6 b(or)31 b(example,)300 4995 y(the)25 b(n)n(um)n(b)r(er)f(of)i
(help)r(ers)g(and)g(mem)n(b)r(ership)d(dynamics)i(in)h(a)g(lo)r(cal)h
(group.)373 5054 y Fi(12)438 5086 y Fh(The)35 b(n)n(um)n(b)r(er)e(of)j
(requests)f(p)r(er)g(loss)h(in)f(the)f(star)i(top)r(ology)g(is)f(less)h
(than)e(one)h(b)r(ecause)h(some)f(of)g(the)300 5177 y(requests)26
b(are)g(queued)e(in)i(the)f(net)n(w)n(ork)h(when)f(the)g(sim)n(ulation)
h(terminates.)1905 5506 y Fn(14)p eop
%%Page: 15 15
15 14 bop 300 1177 a @beginspecial 70 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/stringx1.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
154.286 195.75 ms
[] 2.600000 SL
236.571 178.875 ns
401.143 170.438 ns
730.286 166.219 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 184.5 ms
236.571 173.25 ns
401.143 167.625 ns
730.286 164.812 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 173.25 ms
236.571 167.625 ns
401.143 164.812 ns
730.286 163.406 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 269.658 ms
[6 6] 2.600000 SL
236.571 270.774 ns
401.143 271.386 ns
730.286 270.936 ns
nsend
D9
154.286 188.496 ms
236.571 151.704 ns
401.143 128.898 ns
730.286 118.908 ns
nsend
D9
154.286 206.514 ms
[] 2.600000 SL
236.571 210.438 ns
401.143 211.914 ns
730.286 201.186 ns
nsend
D9
154.286 203.022 ms
236.571 202.698 ns
401.143 203.976 ns
730.286 207.414 ns
nsend
D9
154.286 192.348 ms
236.571 197.28 ns
401.143 208.512 ns
730.286 220.302 ns
nsend
D9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 174.857 72 TXC
(10) 0 174.857 43.2 TXC
(|) 0 277.714 72 TXC
(20) 0 277.714 43.2 TXC
(|) 0 380.571 72 TXC
(30) 0 380.571 43.2 TXC
(|) 0 483.429 72 TXC
(40) 0 483.429 43.2 TXC
(|) 0 586.286 72 TXC
(50) 0 586.286 43.2 TXC
(|) 0 689.143 72 TXC
(60) 0 689.143 43.2 TXC
(|) 0 792 72 TXC
(70) 0 792 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 108 TXC
(20) 0 60 100.8 TXR
(|) -90 72 144 TXC
(40) 0 60 136.8 TXR
(|) -90 72 180 TXC
(60) 0 60 172.8 TXR
(|) -90 72 216 TXC
(80) 0 60 208.8 TXR
(|) -90 72 252 TXC
(100) 0 60 244.8 TXR
(|) -90 72 288 TXC
(120) 0 60 280.8 TXR
(|) 180 72 288 TXC
(|) 180 174.857 288 TXC
(|) 180 277.714 288 TXC
(|) 180 380.571 288 TXC
(|) 180 483.429 288 TXC
(|) 180 586.286 288 TXC
(|) 180 689.143 288 TXC
(|) 180 792 288 TXC
(|) 90 792 72 TXC
(|) 90 792 108 TXC
(|) 90 792 144 TXC
(|) 90 792 180 TXC
(|) 90 792 216 TXC
(|) 90 792 252 TXC
(|) 90 792 288 TXC
() 0 432 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 792 72 
L9
0 setlinecap
72 72 72 288 
L9
72 288 792 288 
L9
792 72 792 288 
L9
() 0 792 12 TXR
(                        request traffic %) 90 -1.2 288 TXR
30 /Times-Bold SetTxt
( (a)) 0 432 18 TXC
() 0 432 -13.5 TXC
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
12 SetSym
<08> 154.286 195.75 SY
<08> 236.571 178.875 SY
<08> 401.143 170.438 SY
<08> 730.286 166.219 SY
<02> 154.286 184.5 SY
<02> 236.571 173.25 SY
<02> 401.143 167.625 SY
<02> 730.286 164.812 SY
<04> 154.286 173.25 SY
<04> 236.571 167.625 SY
<04> 401.143 164.812 SY
<04> 730.286 163.406 SY
<0d> 154.286 269.658 SY
<0d> 236.571 270.774 SY
<0d> 401.143 271.386 SY
<0d> 730.286 270.936 SY
<0a> 154.286 188.496 SY
<0a> 236.571 151.704 SY
<0a> 401.143 128.898 SY
<0a> 730.286 118.908 SY
<08> 154.286 206.514 SY
<08> 236.571 210.438 SY
<08> 401.143 211.914 SY
<08> 730.286 201.186 SY
<02> 154.286 203.022 SY
<02> 236.571 202.698 SY
<02> 401.143 203.976 SY
<02> 730.286 207.414 SY
<04> 154.286 192.348 SY
<04> 236.571 197.28 SY
<04> 401.143 208.512 SY
<04> 730.286 220.302 SY
initclip 
showpage
end
%%EndDocument
 @endspecial 750 x @beginspecial 70 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/stringx2.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
154.286 195.75 ms
[] 2.600000 SL
236.571 178.875 ns
401.143 170.438 ns
730.286 166.219 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 184.5 ms
236.571 173.25 ns
401.143 167.625 ns
730.286 164.812 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 173.25 ms
236.571 167.625 ns
401.143 164.812 ns
730.286 163.406 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 253.26 ms
[6 6] 2.600000 SL
236.571 256.855 ns
401.143 264.803 ns
730.286 281.907 ns
nsend
D9
154.286 233.366 ms
236.571 224.68 ns
401.143 218.356 ns
730.286 213.149 ns
nsend
D9
154.286 195.453 ms
[] 2.600000 SL
236.571 194.78 ns
401.143 192.395 ns
730.286 182.68 ns
nsend
D9
154.286 191.219 ms
236.571 184.25 ns
401.143 182.225 ns
730.286 179.296 ns
nsend
D9
154.286 178.319 ms
236.571 172.51 ns
401.143 172.462 ns
730.286 169.061 ns
nsend
D9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 174.857 72 TXC
(10) 0 174.857 43.2 TXC
(|) 0 277.714 72 TXC
(20) 0 277.714 43.2 TXC
(|) 0 380.571 72 TXC
(30) 0 380.571 43.2 TXC
(|) 0 483.429 72 TXC
(40) 0 483.429 43.2 TXC
(|) 0 586.286 72 TXC
(50) 0 586.286 43.2 TXC
(|) 0 689.143 72 TXC
(60) 0 689.143 43.2 TXC
(|) 0 792 72 TXC
(70) 0 792 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 108 TXC
(20) 0 60 100.8 TXR
(|) -90 72 144 TXC
(40) 0 60 136.8 TXR
(|) -90 72 180 TXC
(60) 0 60 172.8 TXR
(|) -90 72 216 TXC
(80) 0 60 208.8 TXR
(|) -90 72 252 TXC
(100) 0 60 244.8 TXR
(|) -90 72 288 TXC
(120) 0 60 280.8 TXR
(|) 180 72 288 TXC
(|) 180 174.857 288 TXC
(|) 180 277.714 288 TXC
(|) 180 380.571 288 TXC
(|) 180 483.429 288 TXC
(|) 180 586.286 288 TXC
(|) 180 689.143 288 TXC
(|) 180 792 288 TXC
(|) 90 792 72 TXC
(|) 90 792 108 TXC
(|) 90 792 144 TXC
(|) 90 792 180 TXC
(|) 90 792 216 TXC
(|) 90 792 252 TXC
(|) 90 792 288 TXC
() 0 432 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 792 72 
L9
0 setlinecap
72 72 72 288 
L9
72 288 792 288 
L9
792 72 792 288 
L9
() 0 792 12 TXR
(                        reply traffic %) 90 -1.2 288 TXR
30 /Times-Bold SetTxt
( (b)) 0 432 18 TXC
() 0 432 -13.5 TXC
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
12 SetSym
<08> 154.286 195.75 SY
<08> 236.571 178.875 SY
<08> 401.143 170.438 SY
<08> 730.286 166.219 SY
<02> 154.286 184.5 SY
<02> 236.571 173.25 SY
<02> 401.143 167.625 SY
<02> 730.286 164.812 SY
<04> 154.286 173.25 SY
<04> 236.571 167.625 SY
<04> 401.143 164.812 SY
<04> 730.286 163.406 SY
<0d> 154.286 253.26 SY
<0d> 236.571 256.855 SY
<0d> 401.143 264.803 SY
<0d> 730.286 281.907 SY
<0a> 154.286 233.366 SY
<0a> 236.571 224.68 SY
<0a> 401.143 218.356 SY
<0a> 730.286 213.149 SY
<08> 154.286 195.453 SY
<08> 236.571 194.78 SY
<08> 401.143 192.395 SY
<08> 730.286 182.68 SY
<02> 154.286 191.219 SY
<02> 236.571 184.25 SY
<02> 401.143 182.225 SY
<02> 730.286 179.296 SY
<04> 154.286 178.319 SY
<04> 236.571 172.51 SY
<04> 401.143 172.462 SY
<04> 730.286 169.061 SY
initclip 
showpage
end
%%EndDocument
 @endspecial 750 x @beginspecial 70 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/stringx3.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
154.286 162.288 ms
[6 6] 2.600000 SL
236.571 153.648 ns
401.143 151.272 ns
730.286 155.16 ns
nsend
D9
154.286 155.376 ms
236.571 137.232 ns
401.143 126.216 ns
730.286 123.408 ns
nsend
D9
154.286 163.584 ms
[] 2.600000 SL
236.571 158.4 ns
401.143 166.608 ns
730.286 192.528 ns
nsend
D9
154.286 165.528 ms
236.571 164.016 ns
401.143 167.256 ns
730.286 206.136 ns
nsend
D9
154.286 166.176 ms
236.571 169.2 ns
401.143 175.896 ns
730.286 200.952 ns
nsend
D9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 174.857 72 TXC
(10) 0 174.857 43.2 TXC
(|) 0 277.714 72 TXC
(20) 0 277.714 43.2 TXC
(|) 0 380.571 72 TXC
(30) 0 380.571 43.2 TXC
(|) 0 483.429 72 TXC
(40) 0 483.429 43.2 TXC
(|) 0 586.286 72 TXC
(50) 0 586.286 43.2 TXC
(|) 0 689.143 72 TXC
(60) 0 689.143 43.2 TXC
(|) 0 792 72 TXC
(70) 0 792 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 115.2 TXC
(2) 0 60 108 TXR
(|) -90 72 158.4 TXC
(4) 0 60 151.2 TXR
(|) -90 72 201.6 TXC
(6) 0 60 194.4 TXR
(|) -90 72 244.8 TXC
(8) 0 60 237.6 TXR
(|) -90 72 288 TXC
(10) 0 60 280.8 TXR
(|) 180 72 288 TXC
(|) 180 174.857 288 TXC
(|) 180 277.714 288 TXC
(|) 180 380.571 288 TXC
(|) 180 483.429 288 TXC
(|) 180 586.286 288 TXC
(|) 180 689.143 288 TXC
(|) 180 792 288 TXC
(|) 90 792 72 TXC
(|) 90 792 115.2 TXC
(|) 90 792 158.4 TXC
(|) 90 792 201.6 TXC
(|) 90 792 244.8 TXC
(|) 90 792 288 TXC
() 0 432 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 792 72 
L9
0 setlinecap
72 72 72 288 
L9
72 288 792 288 
L9
792 72 792 288 
L9
(                        session size) 0 792 12 TXR
(                        delay ratio) 90 -1.2 288 TXR
30 /Times-Bold SetTxt
( (c)) 0 432 18 TXC
() 0 432 -13.5 TXC
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
12 SetSym
<0d> 154.286 162.288 SY
<0d> 236.571 153.648 SY
<0d> 401.143 151.272 SY
<0d> 730.286 155.16 SY
<0a> 154.286 155.376 SY
<0a> 236.571 137.232 SY
<0a> 401.143 126.216 SY
<0a> 730.286 123.408 SY
<08> 154.286 163.584 SY
<08> 236.571 158.4 SY
<08> 401.143 166.608 SY
<08> 730.286 192.528 SY
<02> 154.286 165.528 SY
<02> 236.571 164.016 SY
<02> 401.143 167.256 SY
<02> 730.286 206.136 SY
<04> 154.286 166.176 SY
<04> 236.571 169.2 SY
<04> 401.143 175.896 SY
<04> 730.286 200.952 SY
initclip 
showpage
end
%%EndDocument
 @endspecial -60 x @beginspecial 60 @hoffset 30 @voffset
40 @hscale 40 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/idx1.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
54 621 90 621 2 L
3 H
2 Z
3 X
0 K
N
54 657 90 657 2 L
N
54 639 90 639 2 L
N
54 711 90 711 2 L
0 X
N
54 693 90 693 2 L
N
54 675 90 675 2 L
N
0 20 Q
(global error recovery) 125.22 742.37 T
(hop-scoped error recovery) 125.22 724.86 T
(group-scoped error recovery :) 125.22 707.73 T
1 F
(x=33%,) 368.32 707.73 T
2 F
(d) 437.33 707.73 T
1 F
(=0%, m=10, k=3, f=6) 447.2 707.73 T
0 F
(group-scoped error recovery :) 125.22 689.98 T
1 F
(x=50%,) 368.32 689.98 T
2 F
(d) 437.33 689.98 T
1 F
(=0%, m=10, k=3, f=6) 447.2 689.98 T
0 F
(group-scoped error recovery :) 125.22 672.22 T
1 F
(x=100%,) 368.32 672.22 T
2 F
(d) 447.32 672.22 T
1 F
(=0%, m=10, k=3, f=6) 457.2 672.22 T
0 F
(Estimated lower bound for) 125.22 652.69 T
1 F
( x=33%) 338.96 652.69 T
0 F
(Estimated lower bound for) 125.22 634.92 T
1 F
(x=50%) 343.96 634.92 T
0 F
(Estimated lower bound for) 125.22 617.15 T
1 F
(x=100%) 343.96 617.15 T
0.5 H
90 450 4.5 4.5 103.5 729 A
99 751.5 108 742.5 2 L
N
108 751.5 99 742.5 2 L
N
103.5 751.5 103.5 742.5 2 L
N
99 747 108 747 2 L
N
101.25 706.51 105.75 715.5 R
N
103.5 697.5 99 688.51 108 688.51 3 Y
N
103.5 679.51 99 675.01 103.5 670.5 108 675.01 4 Y
N
101.25 652.51 105.75 661.51 R
N
103.5 643.51 99 634.51 108 634.51 3 Y
N
103.5 625.51 99 621.01 103.5 616.48 108 621.01 4 Y
N
99 612 108 756 R
90 450 4.5 4.5 40.5 729 A
36 751.5 45 742.5 2 L
N
45 751.5 36 742.5 2 L
N
40.5 751.5 40.5 742.5 2 L
N
36 747 45 747 2 L
N
38.25 706.51 42.75 715.5 R
N
40.5 697.5 36 688.51 45 688.51 3 Y
N
40.5 679.51 36 675.01 40.5 670.5 45 675.01 4 Y
N
38.25 652.51 42.75 661.51 R
N
40.5 643.51 36 634.51 45 634.51 3 Y
N
40.5 625.51 36 621.01 40.5 616.48 45 621.01 4 Y
N
36 612 45 756 R
82.62 747 90 747 2 L
3 H
N
54 747 61.38 747 2 L
N
68.22 747 75.6 747 2 L
N
82.62 729 90 729 2 L
N
54 729 61.38 729 2 L
N
68.22 729 75.6 729 2 L
N
FMENDPAGE
%%EndDocument
 @endspecial 476 x Fn(Figure)25 b(5:)39 b(Sim)m(ulation)24
b(results)g(in)h(string)f(top)s(ology)i(:)39 b(all)24
b(links)g(with)h(uniformly-distributed)300 3206 y(error)30
b(rate)300 3464 y(to)38 b(all)e(do)m(wnstream)h(mem)m(b)s(ers,)i(so)e
(request)h(tra\016c)f(go)s(es)h(up)e(with)g(the)i(session)e(size)h
(\(Fig-)300 3577 y(ure)e(5.a\).)57 b(In)34 b(terms)h(of)h(reply)e
(tra\016c,)j(hop-scop)s(ed)e(error)g(reco)m(v)m(ery)i(p)s(erforms)c(w)m
(orse)j(than)300 3689 y(group-scop)s(ed)k(error)f(reco)m(v)m(ery)j(b)s
(ecause)e(hop-scop)s(ed)g(error)g(reco)m(v)m(ery)h(do)s(es)f(not)h
(regulate)300 3802 y(the)g(direction)e(in)h(whic)m(h)f(the)i(reply)e
(messages)j(propagate)g(\(Figure)e(5.b\).)72 b(Since)40
b(request)300 3915 y(messages)34 b(only)f(reac)m(h)h(a)g(small)e(n)m
(um)m(b)s(er)g(of)i(mem)m(b)s(ers)e(in)g(hop-scop)s(ed)h(error)g(reco)m
(v)m(ery)-8 b(,)37 b(the)300 4028 y(estimated)f(session)e(size)i(is)e
(m)m(uc)m(h)i(smaller.)54 b(As)36 b(a)g(consequence,)i(mem)m(b)s(ers)c
(send)h(requests)300 4141 y(more)d(aggressiv)m(ely)f(and)g(the)h(reco)m
(v)m(ery)h(dela)m(y)f(is)e(reduced.)43 b(On)31 b(the)g(other)h(hand,)f
(in)f(group-)300 4254 y(scop)s(ed)g(error)f(reco)m(v)m(ery)-8
b(,)33 b(there)d(is)f(only)g(a)i(small)d(n)m(um)m(b)s(er)h(of)h(help)s
(ers)e(in)h(a)h(lo)s(cal)g(group,)g(and)300 4367 y(hence,)c(the)f(reco)
m(v)m(ery)h(dela)m(y)e(in)f(group-scop)s(ed)h(error)g(reco)m(v)m(ery)i
(is)e(greater)h(than)g(the)f(reco)m(v)m(ery)300 4480
y(dela)m(y)30 b(in)f(global)h(error)g(reco)m(v)m(ery)i(\(Figure)e
(5.c\).)441 4593 y(The)21 b(tree)h(top)s(ology)g(is)f(a)g(mixture)g(of)
g(the)h(star)g(and)f(string)f(top)s(ologies.)38 b(The)21
b(p)s(erformance)300 4706 y(of)i(hop-scop)s(ed)e(error)h(reco)m(v)m
(ery)i(is)e(similar)e(to)j(group-scop)s(ed)f(error)g(reco)m(v)m(ery)i
(with)d Fk(x)k Fn(=)g(100\045)300 4819 y(in)40 b(terms)i(of)g(request)g
(tra\016c,)j(and)c(it)h(is)f(similar)e(to)j(group-scop)s(ed)f(error)h
(reco)m(v)m(ery)h(with)300 4931 y Fk(x)25 b Fn(=)g(33\045)j(in)d(terms)
i(of)g(reply)e(tra\016c.)40 b(Note)29 b(that)e(b)s(oth)f(request)h(and)
f(reply)g(tra\016c)h(decreases)300 5044 y(with)i(the)i(session)e(size)h
(in)f(group-scop)s(ed)h(error)g(reco)m(v)m(ery)-8 b(.)441
5157 y(The)40 b(n)m(um)m(b)s(er)f(of)i(lo)s(cal)e(groups)h(in)f
(group-scop)s(ed)h(error)g(reco)m(v)m(ery)i(in)d(the)h(string)g(and)
1905 5506 y(15)p eop
%%Page: 16 16
16 15 bop 300 1177 a @beginspecial 70 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/treex1.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
154.286 166.018 ms
[] 2.600000 SL
236.571 124.979 ns
401.143 103.021 ns
730.286 89.3502 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 147.429 ms
236.571 117.491 ns
401.143 98.6418 ns
730.286 87.2694 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 133.151 ms
236.571 110.034 ns
401.143 94.8294 ns
730.286 85.3416 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 262.8 ms
[6 6] 2.600000 SL
236.571 265.734 ns
401.143 267.246 ns
730.286 266.796 ns
nsend
D9
154.286 165.204 ms
236.571 136.17 ns
401.143 109.404 ns
730.286 94.122 ns
nsend
D9
154.286 186.138 ms
[] 2.600000 SL
236.571 182.916 ns
401.143 164.664 ns
730.286 131.364 ns
nsend
D9
154.286 169.866 ms
236.571 153.072 ns
401.143 139.014 ns
730.286 127.116 ns
nsend
D9
154.286 149.724 ms
236.571 123.318 ns
401.143 105.984 ns
730.286 93.564 ns
nsend
D9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 174.857 72 TXC
(10) 0 174.857 43.2 TXC
(|) 0 277.714 72 TXC
(20) 0 277.714 43.2 TXC
(|) 0 380.571 72 TXC
(30) 0 380.571 43.2 TXC
(|) 0 483.429 72 TXC
(40) 0 483.429 43.2 TXC
(|) 0 586.286 72 TXC
(50) 0 586.286 43.2 TXC
(|) 0 689.143 72 TXC
(60) 0 689.143 43.2 TXC
(|) 0 792 72 TXC
(70) 0 792 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 108 TXC
(20) 0 60 100.8 TXR
(|) -90 72 144 TXC
(40) 0 60 136.8 TXR
(|) -90 72 180 TXC
(60) 0 60 172.8 TXR
(|) -90 72 216 TXC
(80) 0 60 208.8 TXR
(|) -90 72 252 TXC
(100) 0 60 244.8 TXR
(|) -90 72 288 TXC
(120) 0 60 280.8 TXR
(|) 180 72 288 TXC
(|) 180 174.857 288 TXC
(|) 180 277.714 288 TXC
(|) 180 380.571 288 TXC
(|) 180 483.429 288 TXC
(|) 180 586.286 288 TXC
(|) 180 689.143 288 TXC
(|) 180 792 288 TXC
(|) 90 792 72 TXC
(|) 90 792 108 TXC
(|) 90 792 144 TXC
(|) 90 792 180 TXC
(|) 90 792 216 TXC
(|) 90 792 252 TXC
(|) 90 792 288 TXC
() 0 432 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 792 72 
L9
0 setlinecap
72 72 72 288 
L9
72 288 792 288 
L9
792 72 792 288 
L9
() 0 792 12 TXR
(                        request traffic %) 90 -1.2 288 TXR
30 /Times-Bold SetTxt
( (a)) 0 432 18 TXC
() 0 432 -13.5 TXC
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
12 SetSym
<08> 154.286 166.018 SY
<08> 236.571 124.979 SY
<08> 401.143 103.021 SY
<08> 730.286 89.3502 SY
<02> 154.286 147.429 SY
<02> 236.571 117.491 SY
<02> 401.143 98.6418 SY
<02> 730.286 87.2694 SY
<04> 154.286 133.151 SY
<04> 236.571 110.034 SY
<04> 401.143 94.8294 SY
<04> 730.286 85.3416 SY
<0d> 154.286 262.8 SY
<0d> 236.571 265.734 SY
<0d> 401.143 267.246 SY
<0d> 730.286 266.796 SY
<0a> 154.286 165.204 SY
<0a> 236.571 136.17 SY
<0a> 401.143 109.404 SY
<0a> 730.286 94.122 SY
<08> 154.286 186.138 SY
<08> 236.571 182.916 SY
<08> 401.143 164.664 SY
<08> 730.286 131.364 SY
<02> 154.286 169.866 SY
<02> 236.571 153.072 SY
<02> 401.143 139.014 SY
<02> 730.286 127.116 SY
<04> 154.286 149.724 SY
<04> 236.571 123.318 SY
<04> 401.143 105.984 SY
<04> 730.286 93.564 SY
initclip 
showpage
end
%%EndDocument
 @endspecial 750 x @beginspecial 70 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/treex2.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
154.286 166.018 ms
[] 2.600000 SL
236.571 124.979 ns
401.143 103.021 ns
730.286 89.3502 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 147.429 ms
236.571 117.491 ns
401.143 98.6418 ns
730.286 87.2694 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 133.151 ms
236.571 110.034 ns
401.143 94.8294 ns
730.286 85.3416 ns
nsend
0.600000 G9 D9 0.0 G9
154.286 248.76 ms
[6 6] 2.600000 SL
236.571 248.416 ns
401.143 249.813 ns
730.286 251.64 ns
nsend
D9
154.286 206.347 ms
236.571 182.115 ns
401.143 159.995 ns
730.286 131.785 ns
nsend
D9
154.286 179.23 ms
[] 2.600000 SL
236.571 176.99 ns
401.143 164.106 ns
730.286 128.736 ns
nsend
D9
154.286 165.805 ms
236.571 147.708 ns
401.143 136.55 ns
730.286 124.686 ns
nsend
D9
154.286 145.305 ms
236.571 119.297 ns
401.143 102.316 ns
730.286 90.8586 ns
nsend
D9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 174.857 72 TXC
(10) 0 174.857 43.2 TXC
(|) 0 277.714 72 TXC
(20) 0 277.714 43.2 TXC
(|) 0 380.571 72 TXC
(30) 0 380.571 43.2 TXC
(|) 0 483.429 72 TXC
(40) 0 483.429 43.2 TXC
(|) 0 586.286 72 TXC
(50) 0 586.286 43.2 TXC
(|) 0 689.143 72 TXC
(60) 0 689.143 43.2 TXC
(|) 0 792 72 TXC
(70) 0 792 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 108 TXC
(20) 0 60 100.8 TXR
(|) -90 72 144 TXC
(40) 0 60 136.8 TXR
(|) -90 72 180 TXC
(60) 0 60 172.8 TXR
(|) -90 72 216 TXC
(80) 0 60 208.8 TXR
(|) -90 72 252 TXC
(100) 0 60 244.8 TXR
(|) -90 72 288 TXC
(120) 0 60 280.8 TXR
(|) 180 72 288 TXC
(|) 180 174.857 288 TXC
(|) 180 277.714 288 TXC
(|) 180 380.571 288 TXC
(|) 180 483.429 288 TXC
(|) 180 586.286 288 TXC
(|) 180 689.143 288 TXC
(|) 180 792 288 TXC
(|) 90 792 72 TXC
(|) 90 792 108 TXC
(|) 90 792 144 TXC
(|) 90 792 180 TXC
(|) 90 792 216 TXC
(|) 90 792 252 TXC
(|) 90 792 288 TXC
() 0 432 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 792 72 
L9
0 setlinecap
72 72 72 288 
L9
72 288 792 288 
L9
792 72 792 288 
L9
() 0 792 12 TXR
(                        reply traffic %) 90 -1.2 288 TXR
30 /Times-Bold SetTxt
( (b)) 0 432 18 TXC
() 0 432 -13.5 TXC
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
12 SetSym
<08> 154.286 166.018 SY
<08> 236.571 124.979 SY
<08> 401.143 103.021 SY
<08> 730.286 89.3502 SY
<02> 154.286 147.429 SY
<02> 236.571 117.491 SY
<02> 401.143 98.6418 SY
<02> 730.286 87.2694 SY
<04> 154.286 133.151 SY
<04> 236.571 110.034 SY
<04> 401.143 94.8294 SY
<04> 730.286 85.3416 SY
<0d> 154.286 248.76 SY
<0d> 236.571 248.416 SY
<0d> 401.143 249.813 SY
<0d> 730.286 251.64 SY
<0a> 154.286 206.347 SY
<0a> 236.571 182.115 SY
<0a> 401.143 159.995 SY
<0a> 730.286 131.785 SY
<08> 154.286 179.23 SY
<08> 236.571 176.99 SY
<08> 401.143 164.106 SY
<08> 730.286 128.736 SY
<02> 154.286 165.805 SY
<02> 236.571 147.708 SY
<02> 401.143 136.55 SY
<02> 730.286 124.686 SY
<04> 154.286 145.305 SY
<04> 236.571 119.297 SY
<04> 401.143 102.316 SY
<04> 730.286 90.8586 SY
initclip 
showpage
end
%%EndDocument
 @endspecial 750 x @beginspecial 70 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/treex3.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
154.286 174.6 ms
[6 6] 2.600000 SL
236.571 168.12 ns
401.143 166.392 ns
730.286 173.304 ns
nsend
D9
154.286 173.736 ms
236.571 163.8 ns
401.143 158.4 ns
730.286 159.912 ns
nsend
D9
154.286 176.112 ms
[] 2.600000 SL
236.571 173.736 ns
401.143 173.736 ns
730.286 179.352 ns
nsend
D9
154.286 175.896 ms
236.571 172.224 ns
401.143 173.736 ns
730.286 182.16 ns
nsend
D9
154.286 175.032 ms
236.571 167.904 ns
401.143 166.392 ns
730.286 171.36 ns
nsend
D9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 174.857 72 TXC
(10) 0 174.857 43.2 TXC
(|) 0 277.714 72 TXC
(20) 0 277.714 43.2 TXC
(|) 0 380.571 72 TXC
(30) 0 380.571 43.2 TXC
(|) 0 483.429 72 TXC
(40) 0 483.429 43.2 TXC
(|) 0 586.286 72 TXC
(50) 0 586.286 43.2 TXC
(|) 0 689.143 72 TXC
(60) 0 689.143 43.2 TXC
(|) 0 792 72 TXC
(70) 0 792 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 115.2 TXC
(2) 0 60 108 TXR
(|) -90 72 158.4 TXC
(4) 0 60 151.2 TXR
(|) -90 72 201.6 TXC
(6) 0 60 194.4 TXR
(|) -90 72 244.8 TXC
(8) 0 60 237.6 TXR
(|) -90 72 288 TXC
(10) 0 60 280.8 TXR
(|) 180 72 288 TXC
(|) 180 174.857 288 TXC
(|) 180 277.714 288 TXC
(|) 180 380.571 288 TXC
(|) 180 483.429 288 TXC
(|) 180 586.286 288 TXC
(|) 180 689.143 288 TXC
(|) 180 792 288 TXC
(|) 90 792 72 TXC
(|) 90 792 115.2 TXC
(|) 90 792 158.4 TXC
(|) 90 792 201.6 TXC
(|) 90 792 244.8 TXC
(|) 90 792 288 TXC
() 0 432 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 792 72 
L9
0 setlinecap
72 72 72 288 
L9
72 288 792 288 
L9
792 72 792 288 
L9
(                        session size) 0 792 12 TXR
(                        delay ratio) 90 -1.2 288 TXR
30 /Times-Bold SetTxt
( (c)) 0 432 18 TXC
() 0 432 -13.5 TXC
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 792.000000 72.000000 792.000000 288.000000 72.000000 
288.000000 newpath moveto lineto lineto lineto closepath clip
12 SetSym
<0d> 154.286 174.6 SY
<0d> 236.571 168.12 SY
<0d> 401.143 166.392 SY
<0d> 730.286 173.304 SY
<0a> 154.286 173.736 SY
<0a> 236.571 163.8 SY
<0a> 401.143 158.4 SY
<0a> 730.286 159.912 SY
<08> 154.286 176.112 SY
<08> 236.571 173.736 SY
<08> 401.143 173.736 SY
<08> 730.286 179.352 SY
<02> 154.286 175.896 SY
<02> 236.571 172.224 SY
<02> 401.143 173.736 SY
<02> 730.286 182.16 SY
<04> 154.286 175.032 SY
<04> 236.571 167.904 SY
<04> 401.143 166.392 SY
<04> 730.286 171.36 SY
initclip 
showpage
end
%%EndDocument
 @endspecial -60 x @beginspecial 60 @hoffset 30 @voffset
40 @hscale 40 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/idx1.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
54 621 90 621 2 L
3 H
2 Z
3 X
0 K
N
54 657 90 657 2 L
N
54 639 90 639 2 L
N
54 711 90 711 2 L
0 X
N
54 693 90 693 2 L
N
54 675 90 675 2 L
N
0 20 Q
(global error recovery) 125.22 742.37 T
(hop-scoped error recovery) 125.22 724.86 T
(group-scoped error recovery :) 125.22 707.73 T
1 F
(x=33%,) 368.32 707.73 T
2 F
(d) 437.33 707.73 T
1 F
(=0%, m=10, k=3, f=6) 447.2 707.73 T
0 F
(group-scoped error recovery :) 125.22 689.98 T
1 F
(x=50%,) 368.32 689.98 T
2 F
(d) 437.33 689.98 T
1 F
(=0%, m=10, k=3, f=6) 447.2 689.98 T
0 F
(group-scoped error recovery :) 125.22 672.22 T
1 F
(x=100%,) 368.32 672.22 T
2 F
(d) 447.32 672.22 T
1 F
(=0%, m=10, k=3, f=6) 457.2 672.22 T
0 F
(Estimated lower bound for) 125.22 652.69 T
1 F
( x=33%) 338.96 652.69 T
0 F
(Estimated lower bound for) 125.22 634.92 T
1 F
(x=50%) 343.96 634.92 T
0 F
(Estimated lower bound for) 125.22 617.15 T
1 F
(x=100%) 343.96 617.15 T
0.5 H
90 450 4.5 4.5 103.5 729 A
99 751.5 108 742.5 2 L
N
108 751.5 99 742.5 2 L
N
103.5 751.5 103.5 742.5 2 L
N
99 747 108 747 2 L
N
101.25 706.51 105.75 715.5 R
N
103.5 697.5 99 688.51 108 688.51 3 Y
N
103.5 679.51 99 675.01 103.5 670.5 108 675.01 4 Y
N
101.25 652.51 105.75 661.51 R
N
103.5 643.51 99 634.51 108 634.51 3 Y
N
103.5 625.51 99 621.01 103.5 616.48 108 621.01 4 Y
N
99 612 108 756 R
90 450 4.5 4.5 40.5 729 A
36 751.5 45 742.5 2 L
N
45 751.5 36 742.5 2 L
N
40.5 751.5 40.5 742.5 2 L
N
36 747 45 747 2 L
N
38.25 706.51 42.75 715.5 R
N
40.5 697.5 36 688.51 45 688.51 3 Y
N
40.5 679.51 36 675.01 40.5 670.5 45 675.01 4 Y
N
38.25 652.51 42.75 661.51 R
N
40.5 643.51 36 634.51 45 634.51 3 Y
N
40.5 625.51 36 621.01 40.5 616.48 45 621.01 4 Y
N
36 612 45 756 R
82.62 747 90 747 2 L
3 H
N
54 747 61.38 747 2 L
N
68.22 747 75.6 747 2 L
N
82.62 729 90 729 2 L
N
54 729 61.38 729 2 L
N
68.22 729 75.6 729 2 L
N
FMENDPAGE
%%EndDocument
 @endspecial 476 x Fn(Figure)32 b(6:)46 b(Sim)m(ulation)30
b(results)i(in)f(tree)j(top)s(ology)f(:)45 b(all)32 b(links)e(with)i
(uniformly-distributed)300 3206 y(error)e(rate)300 3457
y(tree)j(top)s(ologies)g(is)e(prop)s(ortional)g(to)i
Fk(x)p Fn(.)47 b(F)-8 b(or)33 b(example,)g(if)f Fk(x)c
Fn(=)h(100\045,)34 b(eac)m(h)g(lo)s(cal)e(group)g(is)300
3570 y(resp)s(onsible)24 b(for)i(the)h(error)f(reco)m(v)m(ery)j(of)e(a)
g(single)e(lossy)h(links.)37 b(The)26 b(n)m(um)m(b)s(er)g(of)h(lo)s
(cal)f(groups)300 3683 y(is)36 b(equal)g(to)i(the)e(n)m(um)m(b)s(er)g
(of)h(lossy)f(links)e(in)i(the)h(session.)59 b(If)36
b Fk(x)g Fn(=)f(50\045,)40 b(a)d(lo)s(cal)f(group)g(is)300
3795 y(resp)s(onsible)27 b(for)j(the)g(error)g(reco)m(v)m(ery)i(of)e(t)
m(w)m(o)i(lossy)d(links)f(and)i(the)g(n)m(um)m(b)s(er)f(of)h(lo)s(cal)g
(groups)300 3908 y(is)h(equal)h(to)g(half)f(of)h(the)h(n)m(um)m(b)s(er)
d(of)j(lossy)e(links.)43 b(In)32 b(general,)g(for)g(a)g(session)g(of)g
(size)g Fk(n)p Fn(,)g(the)300 4021 y(n)m(um)m(b)s(er)g(of)h(lo)s(cal)f
(groups)g(is)g Fk(x)21 b Fj(\001)h Fk(n)p Fn(,)34 b(the)f(n)m(um)m(b)s
(er)e(of)i(lossy)f(links)f(co)m(v)m(ered)j(b)m(y)f(a)g(lo)s(cal)f
(group)300 4134 y(is)406 4098 y Fl(1)p 403 4113 40 4
v 403 4166 a Fg(x)453 4134 y Fn(,)h(and)f(the)g(p)s(ercen)m(tage)i(of)e
(losses)g(reco)m(v)m(ered)i(b)m(y)e(a)h(lo)s(cal)e(group)h(is)2884
4098 y Fl(1)p 2850 4113 103 4 v 2850 4166 a Fg(x)p Ff(\001)p
Fg(n)2963 4134 y Fn(.)46 b(Therefore,)33 b(the)300 4268
y(estimated)28 b(error)f(reco)m(v)m(ery)i(tra\016c,)g
Fk(T)13 b Fn(,)28 b(can)g(b)s(e)f(calculated)h(as)g Fk(T)13
b Fn(\045)24 b(=)2820 4232 y Fl(1)p 2786 4247 V 2786
4299 a Fg(x)p Ff(\001)p Fg(n)2913 4268 y Fj(\001)2953
4204 y Fc(P)3041 4230 y Fg(x)p Ff(\001)p Fg(n)3041 4291
y(i)p Fl(=1)3184 4224 y Fg(f)7 b Fl(\()p Fg(i)p Fl(\))p
3184 4247 121 4 v 3223 4299 a Fg(n)3314 4268 y Fn(,)28
b(where)300 4381 y Fk(f)10 b Fn(\()p Fk(i)p Fn(\))29
b(is)f(the)h(size)g(of)g(the)g Fk(i)p 1194 4381 28 4
v 33 w Fn(th)f(lo)s(cal)g(group.)40 b(F)-8 b(or)30 b(string)d(top)s
(ology)-8 b(,)30 b Fk(f)10 b Fn(\()p Fk(i)p Fn(\))26
b(=)f Fk(n)17 b Fj(\000)3097 4345 y Fg(i)p Ff(\000)p
Fl(1)p 3097 4360 115 4 v 3135 4412 a Fg(x)3222 4381 y
Fn(.)40 b(F)-8 b(or)29 b(tree)300 4518 y(top)s(ology)-8
b(,)33 b Fk(f)10 b Fn(\()p Fk(i)p Fn(\))27 b Fj(')g Fn(2)1019
4482 y Fl(\(log)1138 4499 y Fi(2)1184 4482 y Fg(n)p Ff(\000)p
Fl(log)1373 4499 y Fi(2)1408 4482 y Fl(\()1445 4454 y
Fb(i)p Fa(\000)p Fi(1)p 1445 4468 101 4 v 1478 4508 a
Fb(x)1556 4482 y Fl(+1\)\)\))1732 4518 y Fn(.)44 b(Therefore,)32
b(the)g(estimated)f(lo)m(w)m(er)h(b)s(ounds)d(of)j(the)300
4631 y(error)e(reco)m(v)m(ery)i(tra\016c)f(in)e(string)g(and)h(tree)h
(top)s(ologies)f(are,)786 4882 y Fk(T)839 4896 y Fg(str)r(ing)1038
4882 y Fn(\045)25 b(=)1245 4821 y Fk(x)20 b Fj(\001)h
Fk(n)e Fn(+)h(1)p 1245 4861 329 4 v 1268 4944 a(2)g Fj(\001)h
Fk(x)f Fj(\001)g Fk(n)2038 4882 y(T)2091 4896 y Fg(tr)r(ee)2220
4882 y Fn(\045)25 b(=)2426 4776 y Fg(x)p Ff(\001)p Fg(n)2417
4801 y Fc(X)2420 4984 y Fg(i)p Fl(=1)2810 4821 y Fn(1)p
2562 4861 542 4 v 2562 4944 a(\()p Fk(x)c Fn(+)f Fk(i)g
Fj(\000)g Fn(1\))h Fj(\001)g Fk(n)300 5144 y Fn(The)30
b(estimated)h(v)-5 b(alues)29 b(are)i(sho)m(wn)f(as)g(gra)m(y)i(curv)m
(es)e(in)f(Figures)h(5)h(and)e(6.)441 5257 y(In)42 b(the)h(second)f
(set)h(of)g(sim)m(ulations,)g(a)g(randomly)e(selected)i(12)p
Fk(:)p Fn(5\045)h(of)f(the)f(links)f(are)1905 5506 y(16)p
eop
%%Page: 17 17
17 16 bop 300 1987 a @beginspecial 40 @hoffset 230 @voffset
40 @hscale 40 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/tbl.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 9 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /Helvetica-Narrow-Bold FMFONTDEFINE
2 0 /Times-Roman FMFONTDEFINE
3 0 /Times-Bold FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
5 1 /Symbol FMFONTDEFINE
6 0 /Helvetica-Narrow FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
36 360 108 756 R
6 X
0 K
V
36 702 756 756 R
V
2 H
2 Z
N
540 540 756 567 R
5 X
V
378 540 432 567 R
V
36 360 756 756 R
4 H
0 X
N
0 24 Q
(star) 195.99 735.12 T
(string) 401.67 735.12 T
(tree) 627.76 735.12 T
1 18 Q
(request traf\336c) 0 -270 61.07 593.72 TF
(reply traf\336c) 0 -270 61.07 488.54 TF
(delay ratio) 0 -270 61.07 378.92 TF
0 24 Q
(8) 125.33 706.83 T
(16) 172.67 706.83 T
(32) 226.67 706.83 T
(64) 280.67 706.83 T
(A) 81.68 678.03 T
(B) 81.68 658.06 T
(C) 81.68 638.1 T
(D) 81.68 618.13 T
(E) 82.34 598.17 T
2 18 Q
(100.0) 117 681.6 T
(100.0) 117 660.09 T
(31.2) 121.5 638.58 T
(31.2) 121.5 617.07 T
(31.2) 121.5 595.55 T
(99.3) 175.52 681.63 T
(99.3) 175.52 660.22 T
(24.6) 175.52 638.82 T
(20.3) 175.52 617.41 T
(20.3) 175.52 596 T
(99.1) 229.52 681.63 T
(99.1) 229.52 660.2 T
(14.5) 229.52 638.77 T
(14.9) 229.52 617.34 T
(15.5) 229.52 595.91 T
(98.9) 283.52 681.63 T
(98.9) 283.52 660.2 T
(9.7) 288.02 638.77 T
(12.6) 283.52 617.34 T
(12.6) 283.52 595.91 T
702 727.71 702 360 2 L
0.5 H
N
648 727.71 648 360 2 L
N
594 727.71 594 360 2 L
N
540 756 540 360 2 L
2 H
N
486 727.71 486 360 2 L
0.5 H
N
432 727.71 432 360 2 L
N
378 727.71 378 360 2 L
N
324 756 324 360 2 L
2 H
N
270 727.71 270 360 2 L
0.5 H
N
216 727.71 216 360 2 L
N
162 727.71 162 360 2 L
N
108 756 108 360 2 L
3 H
N
36 473.15 756 473.15 2 L
2 H
N
36 586.29 756 586.29 2 L
N
36 699.43 756 699.43 2 L
3 H
N
0 24 Q
(8) 557.33 706.83 T
(16) 604.67 706.83 T
(32) 658.67 706.83 T
(64) 712.67 706.83 T
(8) 341.33 706.83 T
(16) 388.67 706.83 T
(32) 442.67 706.83 T
(64) 496.67 706.83 T
(A) 81 450.27 T
(B) 81 430.3 T
(C) 81 410.33 T
(D) 81 390.36 T
(E) 81.66 370.39 T
(A) 81 564.85 T
(B) 81 544.55 T
(C) 81 524.24 T
(D) 81 503.94 T
(E) 81.66 483.63 T
2 18 Q
(265.5) 117 568.3 T
(265.5) 117 546.87 T
(46.9) 121.5 525.44 T
(46.9) 121.5 504.01 T
(46.9) 121.5 482.58 T
(31) 171 568.41 T
(1.9) 188.32 568.41 T
(31) 171 546.97 T
(1.9) 188.32 546.97 T
(52.6) 175.16 525.54 T
(41.1) 175.16 504.1 T
(41.5) 175.16 482.66 T
(349.2) 225 568.49 T
(349.2) 225 547.06 T
(35.7) 229.5 525.63 T
(39.4) 229.5 504.2 T
(42.9) 229.5 482.77 T
(381.6) 279 568.3 T
(381.6) 279 546.87 T
(26.6) 283.5 525.44 T
(38.4) 283.5 504.01 T
(38.4) 283.5 482.58 T
(6.40) 121.52 455.42 T
(6.40) 121.52 434.26 T
(6.45) 121.52 413.1 T
(6.45) 121.52 391.94 T
(6.45) 121.52 370.77 T
(6.56) 229.52 455.41 T
(6.56) 229.52 434.01 T
(6.50) 229.52 412.61 T
(6.49) 229.52 391.21 T
(6.50) 229.52 369.82 T
(6.48) 175.52 455.42 T
(6.48) 175.52 434.02 T
(6.45) 175.52 412.62 T
(6.48) 175.52 391.23 T
(6.48) 175.52 369.83 T
(6.59) 283.52 455.41 T
(6.59) 283.52 433.83 T
(6.48) 283.52 412.24 T
(6.48) 283.52 390.65 T
(6.48) 283.52 369.06 T
63 729 756 727.71 2 L
2 H
N
72 699.43 72 360 2 L
N
(100.0) 333 681.7 T
(25.0) 337.5 660.84 T
(25.7) 337.5 639.98 T
(25.7) 337.5 619.13 T
(25.7) 337.5 598.27 T
(106.0) 387 681.64 T
(49.6) 391.5 660.35 T
(67.71) 387 639.06 T
(63.07) 387 617.77 T
(62.88) 387 596.48 T
(104.3) 441 681.64 T
(25.9) 445.5 660.35 T
(82.34) 441 639.06 T
(78.88) 441 617.77 T
(69.88) 441 596.48 T
(107.0) 495 681.82 T
(19.9) 499.5 661.12 T
(90.5) 499.5 640.41 T
(77.9) 499.5 619.71 T
(66.5) 499.5 599.01 T
(100.1) 333 568.49 T
(37.5) 337.5 547.06 T
(25.7) 337.5 525.63 T
(25.7) 337.5 504.2 T
(25.7) 337.5 482.77 T
(100.4) 387 568.49 T
3 F
(99.9) 391.5 547.08 T
2 F
(64.0) 391.5 525.67 T
(58.5) 391.5 504.27 T
(58.4) 391.5 482.86 T
(100.3) 441 568.49 T
(76.4) 445.5 547.06 T
(78.3) 445.5 525.63 T
(73.9) 445.5 504.2 T
(63.9) 445.5 482.77 T
(101.2) 495 568.49 T
(79.7) 499.5 547.06 T
(84.4) 499.5 525.63 T
(71.7) 499.5 504.2 T
(58.0) 499.5 482.77 T
(3.69) 337.5 455.3 T
(3.70) 337.5 433.92 T
(3.70) 337.5 412.55 T
(3.70) 337.5 391.18 T
(3.70) 337.5 369.8 T
(3.01) 391.5 455.09 T
(3.08) 391.5 433.68 T
(3.02) 391.5 412.26 T
(3.10) 391.5 390.85 T
(3.10) 391.5 369.44 T
(2.54) 445.5 455.08 T
(2.28) 445.5 433.67 T
(2.58) 445.5 412.26 T
(2.71) 445.5 390.85 T
(3.02) 445.5 369.44 T
(2.90) 499.52 454.84 T
(1.94) 499.52 433.74 T
(3.09) 499.52 412.64 T
(3.20) 499.52 391.54 T
(3.85) 499.52 370.44 T
(4.28) 553.52 455.35 T
(4.28) 553.52 433.94 T
(4.28) 553.52 412.53 T
(4.28) 553.52 391.12 T
(4.28) 553.52 369.71 T
(3.88) 607.52 455.17 T
(3.86) 607.52 433.81 T
(4.33) 607.52 412.45 T
(3.87) 607.52 391.09 T
(3.86) 607.52 369.73 T
(3.59) 661.52 455.35 T
(3.51) 661.52 433.92 T
(3.62) 661.52 412.49 T
(3.61) 661.52 391.06 T
(3.58) 661.52 369.63 T
(3.41) 711 455.16 T
(3.27) 711 433.73 T
(3.79) 711 412.3 T
(3.57) 711 390.87 T
(3.38) 711 369.44 T
(100.0) 549.02 681.16 T
(31.3) 553.52 659.76 T
(25.7) 553.52 638.35 T
(25.7) 553.52 616.94 T
(25.7) 553.52 595.53 T
(99.3) 607.52 680.08 T
(21.8) 607.52 659.01 T
(40.0) 607.52 637.94 T
(23.1) 607.52 616.87 T
(23.1) 607.52 595.79 T
(99.0) 661.52 681.64 T
(16.7) 661.52 660.19 T
(22.4) 661.52 638.74 T
(18.2) 661.52 617.29 T
(17.3) 661.52 595.85 T
(100.1) 706.52 681.64 T
(9.3) 715.52 660.2 T
(23.5) 711.02 638.76 T
(17.0) 711.02 617.33 T
(12.9) 711.02 595.89 T
(98.5) 607.52 568.46 T
(63.7) 607.52 546.95 T
(39.6) 607.52 525.44 T
(23.1) 607.52 503.93 T
(23.1) 607.52 482.41 T
(100.0) 549 568.3 T
(56.3) 553.5 546.87 T
(25.7) 553.5 525.44 T
(25.7) 553.5 504.01 T
(25.7) 553.5 482.58 T
(97.6) 661.52 568.23 T
(49.5) 661.52 546.82 T
(22.2) 661.52 525.41 T
(18.1) 661.52 503.99 T
(17.3) 661.52 482.58 T
(97.6) 711 568.21 T
(34.4) 711 546.8 T
(23.9) 711 525.4 T
(16.9) 711 503.99 T
(12.8) 711 482.58 T
0 24 Q
(A) 72 320.97 T
(B) 72 296.97 T
2 F
(global error recovery) 108 320.68 T
0 F
(C) 72 272.97 T
(D) 72 248.97 T
(E) 72 224.97 T
2 F
(hop-scoped error recovery) 108 296.68 T
(group-scoped error recovery :) 108 272.68 T
4 F
(x=33%,) 399.73 272.68 T
5 F
(d) 482.53 272.68 T
4 F
(=0%, m=10, k=3, f=6) 494.38 272.68 T
2 F
(group-scoped error recovery :) 108 248.33 T
4 F
(x=50%,) 399.73 248.33 T
5 F
(d) 482.53 248.33 T
4 F
(=0%, m=10, k=3, f=6) 494.38 248.33 T
2 F
(group-scoped error recovery :) 108 223.99 T
4 F
(x=100%,) 399.73 223.99 T
5 F
(d) 494.52 223.99 T
4 F
(=0%, m=10, k=3, f=6) 506.37 223.99 T
3 F
(%) 45 707.04 T
36 756 90 702 2 L
N
2 18 Q
-1.08 (t) 51.82 741.9 S
6 F
(opology) 55.74 741.9 T
(size) 79.71 714.9 T
FMENDPAGE
%%EndDocument
 @endspecial 370 2138 a Fn(T)-8 b(able)30 b(2:)41 b(Sim)m(ulation)28
b(results)h(of)i(12)p Fk(:)p Fn(5\045)g(links)e(with)g
(uniformly-distributed)24 b(error)30 b(rate)300 3186
y @beginspecial 85 @hoffset 120 @voffset 40 @hscale 35
@vscale 270 @angle @setspecial
%%BeginDocument: Figure/top.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 3 FMDOCUMENT
0 0 /Helvetica-Narrow-BoldOblique FMFONTDEFINE
1 0 /Times-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
171 675 144 648 2 L
2 H
2 Z
0 X
0 K
N
54 612 108 612 2 L
N
171 549 144 576 2 L
N
117 549 144 576 2 L
N
90 450 9 9 171 549 G
1 H
90 450 9 9 171 549 A
144 576 108 612 2 L
4 H
3 X
N
108 612 144 648 2 L
N
162 612 108 612 2 L
N
0 X
90 450 9 9 171 675 G
0.5 H
90 450 9 9 171 675 A
7 H
90 450 9 9 54 612 A
90 450 9 9 117 549 G
1 H
90 450 9 9 117 549 A
5 X
90 450 9 9 144 576 G
2 H
0 X
90 450 9 9 144 576 A
5 X
90 450 9 9 144 648 G
0 X
90 450 9 9 144 648 A
5 X
90 450 9 9 108 612 G
0 X
90 450 9 9 108 612 A
0 24 Q
(source) 36 635.25 T
90 450 9 9 54 612 G
3 H
7 X
90 450 9 9 54 612 A
0 X
90 450 9 9 54 612 G
261 504 288 477 2 L
2 H
N
504 576 531 603 2 L
N
504 576 531 549 2 L
N
414 612 360 612 2 L
4 H
3 X
N
450 576 423 549 2 L
2 H
0 X
N
468 612 504 576 2 L
4 H
3 X
N
468 612 414 612 2 L
N
468 612 504 648 2 L
N
5 X
90 450 9 9 504 576 G
2 H
0 X
90 450 9 9 504 576 A
90 450 9 9 531 675 G
1 H
90 450 9 9 531 675 A
5 X
90 450 9 9 468 612 G
2 H
0 X
90 450 9 9 468 612 A
450 648 477 675 2 L
N
504 648 531 675 2 L
N
450 576 477 549 2 L
N
387 639 414 612 2 L
N
414 612 450 576 2 L
4 H
3 X
N
450 648 414 612 2 L
N
0 X
90 450 9 9 477 549 G
1 H
90 450 9 9 477 549 A
90 450 9 9 387 639 G
90 450 9 9 387 639 A
5 X
90 450 9 9 414 612 G
2 H
0 X
90 450 9 9 414 612 A
5 X
90 450 9 9 504 648 G
0 X
90 450 9 9 504 648 A
5 X
90 450 9 9 450 648 G
0 X
90 450 9 9 450 648 A
5 X
90 450 9 9 450 576 G
0 X
90 450 9 9 450 576 A
90 450 9 9 423 549 G
1 H
90 450 9 9 423 549 A
90 450 9 9 531 549 G
90 450 9 9 531 549 A
90 450 9 9 531 603 G
90 450 9 9 531 603 A
90 450 9 9 477 675 G
90 450 9 9 477 675 A
333 720 387 720 2 L
4 H
3 X
N
333 720 297 684 2 L
N
495 720 522 747 2 L
2 H
0 X
N
297 684 360 612 2 L
6 H
N
234 477 261 504 2 L
2 H
N
261 504 225 540 2 L
4 H
3 X
N
261 504 288 531 2 L
2 H
0 X
N
90 450 9 9 288 531 G
1 H
90 450 9 9 288 531 A
90 450 9 9 288 477 G
90 450 9 9 288 477 A
5 X
90 450 9 9 261 504 G
2 H
0 X
90 450 9 9 261 504 A
441 720 468 747 2 L
N
90 450 9 9 468 747 G
1 H
90 450 9 9 468 747 A
387 720 441 720 2 L
4 H
3 X
N
441 720 495 720 2 L
N
225 540 360 612 2 L
6 H
0 X
N
162 612 297 576 2 L
N
162 612 297 684 2 L
N
225 648 360 612 2 L
N
162 612 225 540 2 L
N
90 450 9 9 522 747 G
0.5 H
90 450 9 9 522 747 A
5 X
90 450 9 9 387 720 G
2 H
0 X
90 450 9 9 387 720 A
5 X
90 450 9 9 162 612 G
0 X
90 450 9 9 162 612 A
5 X
90 450 9 9 297 576 G
0 X
90 450 9 9 297 576 A
5 X
90 450 9 9 297 684 G
0 X
90 450 9 9 297 684 A
5 X
90 450 9 9 225 648 G
0 X
90 450 9 9 225 648 A
5 X
90 450 9 9 495 720 G
0 X
90 450 9 9 495 720 A
5 X
90 450 9 9 441 720 G
0 X
90 450 9 9 441 720 A
5 X
90 450 9 9 360 612 G
0 X
90 450 9 9 360 612 A
5 X
90 450 9 9 225 540 G
0 X
90 450 9 9 225 540 A
5 X
90 450 9 9 333 720 G
0 X
90 450 9 9 333 720 A
90 450 9 9 234 477 G
1 H
90 450 9 9 234 477 A
1 F
(s) 63 589.89 T
1 14 Q
(1) 72.33 589.89 T
1 24 Q
(s) 180.68 684.51 T
1 14 Q
(2) 190.01 684.51 T
1 24 Q
(s) 117 522.51 T
1 14 Q
(3) 126.33 522.51 T
1 24 Q
(p) 305.6 477.51 T
1 14 Q
(3) 317.6 477.51 T
1 24 Q
(r) 504 671.25 T
1 14 Q
(3) 513.33 671.25 T
1 24 Q
(s) 171.68 522.51 T
1 14 Q
(4) 181.01 522.51 T
1 24 Q
(p) 305.6 531.51 T
1 14 Q
(2) 317.6 531.51 T
1 24 Q
(p) 215.6 491.25 T
1 14 Q
(1) 227.6 491.25 T
1 24 Q
(q) 486 738.51 T
1 14 Q
(2) 497.99 738.51 T
1 24 Q
(q) 431.6 738.51 T
1 14 Q
(1) 443.6 738.51 T
1 24 Q
(r) 390.97 648.51 T
1 14 Q
(1) 400.3 648.51 T
1 24 Q
(r) 507.97 531.51 T
1 14 Q
(7) 517.3 531.51 T
1 24 Q
(r) 507.97 603.51 T
1 14 Q
(6) 517.3 603.51 T
1 24 Q
(r) 453.97 531.51 T
1 14 Q
(5) 463.3 531.51 T
1 24 Q
(r) 396 531.51 T
1 14 Q
(4) 405.33 531.51 T
1 24 Q
(r) 450 671.25 T
1 14 Q
(2) 459.33 671.25 T
FMENDPAGE
%%EndDocument
 @endspecial 868 3332 a(Figure)f(7:)42 b(Mb)s(one-lik)m(e)29
b(top)s(ology)i(used)f(in)f(our)g(sim)m(ulations)300
3607 y(with)40 b(uniformly-distributed)c(error)41 b(rates)h(and)f
(their)g(error)g(rates)h(are)g(\014xed)e(throughout)300
3720 y(the)h(sim)m(ulation.)69 b(The)40 b(results)f(are)i(sho)m(wn)f
(in)f(T)-8 b(able)40 b(2.)71 b(Both)41 b(hop-scop)s(ed)f(and)g(group-)
300 3833 y(scop)s(ed)28 b(error)h(reco)m(v)m(eries)h(outp)s(erform)e
(the)h(global)f(error)g(reco)m(v)m(ery)j(in)c(terms)i(of)g(the)g
(request)300 3946 y(and)j(reply)g(tra\016c,)i(except)g(for)f(hop-scop)s
(ed)f(error)h(reco)m(v)m(ery)h(in)e(the)h(star)g(top)s(ology)-8
b(.)50 b(In)32 b(the)300 4059 y(string)41 b(top)s(ology)i(of)f(size)g
(16,)k(the)d(reply)e(tra\016c)h(in)f(hop-scop)s(ed)h(error)f(reco)m(v)m
(ery)j(is)e(close)300 4171 y(to)37 b(100\045)g(b)s(ecause)e(the)h
(randomly-selected)g(lossy)f(links)f(are)i(in)e(the)i(middle)e(of)i
(the)g(string)300 4284 y(top)s(ology)-8 b(.)40 b(Since)23
b(hop-scop)s(ed)h(error)g(reco)m(v)m(ery)i(do)s(es)f(not)f(regulate)h
(the)g(tra\016c)g(direction,)g(the)300 4397 y(reply)g(tra\016c)i
(propagates)g(to)g(the)g(en)m(tire)f(session)f(mem)m(b)s(ership.)37
b(The)26 b(same)h(scenario)f(can)h(b)s(e)300 4510 y(applied)20
b(to)j(the)f(reply)e(tra\016c)j(in)e(the)h(tree)g(top)s(ology)-8
b(.)39 b(In)21 b(general,)j(hop-scop)s(ed)e(error)f(reco)m(v)m(ery)300
4623 y(p)s(erforms)29 b(w)m(orse)h(than)h(group-scop)s(ed)e(error)h
(reco)m(v)m(ery)i(in)d(terms)i(of)f(the)h(reply)e(tra\016c)h(if)g(the)
300 4736 y(lossy)g(links)e(are)j(sparsely)e(distributed.)441
4849 y(The)f(lo)s(cal)g(error)g(reco)m(v)m(ery)j(mec)m(hanisms)d(w)m
(ere)h(also)f(sim)m(ulated)g(in)f(a)i(Mb)s(one-lik)m(e)f(top)s(ol-)300
4962 y(ogy)41 b(sho)m(wn)f(in)f(Figure)h(7.)71 b(No)s(des)40
b(connected)h(with)e(thic)m(k)i(lines)d(sym)m(b)s(olize)h(the)i(Mb)s
(one.)300 5075 y(Other)g(no)s(des)f(represen)m(t)h(lo)s(cal)g(area)h
(net)m(w)m(orks.)74 b(Session)40 b(mem)m(b)s(ers)g(are)i(represen)m
(ted)f(b)m(y)300 5188 y(blac)m(k)30 b(no)s(des)g(and)g(one)h(of)f
(them,)h Fk(s)1541 5202 y Fl(1)1580 5188 y Fn(,)g(is)e(selected)i(as)g
(the)f(data)i(source.)41 b(The)30 b(lossy)f(links)g(are)1905
5506 y(17)p eop
%%Page: 18 18
18 17 bop 300 1357 a @beginspecial 20 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/randomx1.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
158.4 72 S9
[] 2.600000 SL
158.4 72 M9
158.4 316.8 M9
169.2 316.8 M9
169.2 316.8 M9
169.2 316.8 M9
169.2 72 M9
212.4 72 M9
212.4 72 M9
212.4 72 M9
212.4 316.8 M9
223.2 316.8 M9
223.2 316.8 M9
223.2 316.8 M9
223.2 72 M9
266.4 72 M9
266.4 72 M9
266.4 72 M9
266.4 316.8 M9
277.2 316.8 M9
277.2 316.8 M9
277.2 316.8 M9
277.2 72 M9
320.4 72 M9
320.4 72 M9
320.4 72 M9
320.4 324 M9
331.2 324 M9
331.2 324 M9
331.2 324 M9
331.2 72 M9
374.4 72 M9
374.4 72 M9
374.4 72 M9
374.4 324 M9
385.2 324 M9
385.2 324 M9
385.2 324 M9
385.2 72 M9
428.4 72 M9
428.4 72 M9
428.4 72 M9
428.4 324 M9
439.2 324 M9
439.2 324 M9
439.2 324 M9
439.2 72 M9
482.4 72 M9
482.4 72 M9
482.4 72 M9
482.4 316.8 M9
493.2 316.8 M9
493.2 316.8 M9
493.2 316.8 M9
493.2 72 M9
536.4 72 M9
536.4 72 M9
536.4 72 M9
536.4 316.8 M9
547.2 316.8 M9
547.2 316.8 M9
547.2 316.8 M9
547.2 72 M9
590.4 72 M9
590.4 72 M9
590.4 72 M9
590.4 324 M9
601.2 324 M9
601.2 324 M9
601.2 324 M9
601.2 72 M9
644.4 72 M9
644.4 72 M9
644.4 72 M9
644.4 324 M9
655.2 324 M9
655.2 324 M9
655.2 324 M9
655.2 72 M9
698.4 72 M9
698.4 72 M9
698.4 72 M9
698.4 324 M9
709.2 324 M9
709.2 324 M9
709.2 324 M9
709.2 72 M9
752.4 72 M9
752.4 72 M9
752.4 72 M9
752.4 324 M9
763.2 324 M9
763.2 324 M9
763.2 324 M9
763.2 72 M9
806.4 72 M9
806.4 72 M9
806.4 72 M9
806.4 324 M9
817.2 324 M9
817.2 324 M9
817.2 324 M9
817.2 72 M9
860.4 72 M9
860.4 72 M9
860.4 72 M9
860.4 324 M9
871.2 324 M9
871.2 324 M9
871.2 324 M9
871.2 72 M9
914.4 72 M9
914.4 72 M9
914.4 72 M9
914.4 324 M9
925.2 324 M9
925.2 324 M9
925.2 324 M9
925.2 72 M9
1022.4 72 M9
1022.4 72 M9
1022.4 72 M9
1022.4 321.07 M9
1044 321.07 M9
1044 321.07 M9
1044 321.07 M9
1044 72 M9
1044 72 M9
158.4 72 M9
30.000000 45.000000 {pop} SS9 0.900000 G9 E9 0.000000 G9
166.5 72 S9
[] 2.600000 SL
166.5 72 M9
166.5 108.695 M9
177.3 108.695 M9
177.3 108.695 M9
177.3 108.695 M9
177.3 72 M9
220.5 72 M9
220.5 72 M9
220.5 72 M9
220.5 115.2 M9
231.3 115.2 M9
231.3 115.2 M9
231.3 115.2 M9
231.3 72 M9
274.5 72 M9
274.5 72 M9
274.5 72 M9
274.5 116.203 M9
285.3 116.203 M9
285.3 116.203 M9
285.3 116.203 M9
285.3 72 M9
328.5 72 M9
328.5 72 M9
328.5 72 M9
328.5 173.3 M9
339.3 173.3 M9
339.3 173.3 M9
339.3 173.3 M9
339.3 72 M9
382.5 72 M9
382.5 72 M9
382.5 72 M9
382.5 173.789 M9
393.3 173.789 M9
393.3 173.789 M9
393.3 173.789 M9
393.3 72 M9
436.5 72 M9
436.5 72 M9
436.5 72 M9
436.5 174.261 M9
447.3 174.261 M9
447.3 174.261 M9
447.3 174.261 M9
447.3 72 M9
490.5 72 M9
490.5 72 M9
490.5 72 M9
490.5 188.226 M9
501.3 188.226 M9
501.3 188.226 M9
501.3 188.226 M9
501.3 72 M9
544.5 72 M9
544.5 72 M9
544.5 72 M9
544.5 105.02 M9
555.3 105.02 M9
555.3 105.02 M9
555.3 105.02 M9
555.3 72 M9
598.5 72 M9
598.5 72 M9
598.5 72 M9
598.5 281.02 M9
609.3 281.02 M9
609.3 281.02 M9
609.3 281.02 M9
609.3 72 M9
652.5 72 M9
652.5 72 M9
652.5 72 M9
652.5 118.326 M9
663.3 118.326 M9
663.3 118.326 M9
663.3 118.326 M9
663.3 72 M9
706.5 72 M9
706.5 72 M9
706.5 72 M9
706.5 146.743 M9
717.3 146.743 M9
717.3 146.743 M9
717.3 146.743 M9
717.3 72 M9
760.5 72 M9
760.5 72 M9
760.5 72 M9
760.5 127.295 M9
771.3 127.295 M9
771.3 127.295 M9
771.3 127.295 M9
771.3 72 M9
814.5 72 M9
814.5 72 M9
814.5 72 M9
814.5 125.939 M9
825.3 125.939 M9
825.3 125.939 M9
825.3 125.939 M9
825.3 72 M9
868.5 72 M9
868.5 72 M9
868.5 72 M9
868.5 145.423 M9
879.3 145.423 M9
879.3 145.423 M9
879.3 145.423 M9
879.3 72 M9
922.5 72 M9
922.5 72 M9
922.5 72 M9
922.5 145.135 M9
933.3 145.135 M9
933.3 145.135 M9
933.3 145.135 M9
933.3 72 M9
1038.6 72 M9
1038.6 72 M9
1038.6 72 M9
1038.6 165.305 M9
1060.2 165.305 M9
1060.2 165.305 M9
1060.2 165.305 M9
1060.2 72 M9
1060.2 72 M9
166.5 72 M9
30.000000 90.000000 {pop} SS9 0.700000 G9 E9 0.000000 G9
174.6 72 S9
[] 2.600000 SL
174.6 72 M9
174.6 223.402 M9
185.4 223.402 M9
185.4 223.402 M9
185.4 223.402 M9
185.4 72 M9
228.6 72 M9
228.6 72 M9
228.6 72 M9
228.6 240.052 M9
239.4 240.052 M9
239.4 240.052 M9
239.4 240.052 M9
239.4 72 M9
282.6 72 M9
282.6 72 M9
282.6 72 M9
282.6 233.991 M9
293.4 233.991 M9
293.4 233.991 M9
293.4 233.991 M9
293.4 72 M9
336.6 72 M9
336.6 72 M9
336.6 72 M9
336.6 287.969 M9
347.4 287.969 M9
347.4 287.969 M9
347.4 287.969 M9
347.4 72 M9
390.6 72 M9
390.6 72 M9
390.6 72 M9
390.6 283.41 M9
401.4 283.41 M9
401.4 283.41 M9
401.4 283.41 M9
401.4 72 M9
444.6 72 M9
444.6 72 M9
444.6 72 M9
444.6 285.288 M9
455.4 285.288 M9
455.4 285.288 M9
455.4 285.288 M9
455.4 72 M9
498.6 72 M9
498.6 72 M9
498.6 72 M9
498.6 171.64 M9
509.4 171.64 M9
509.4 171.64 M9
509.4 171.64 M9
509.4 72 M9
552.6 72 M9
552.6 72 M9
552.6 72 M9
552.6 174.524 M9
563.4 174.524 M9
563.4 174.524 M9
563.4 174.524 M9
563.4 72 M9
606.6 72 M9
606.6 72 M9
606.6 72 M9
606.6 279.279 M9
617.4 279.279 M9
617.4 279.279 M9
617.4 279.279 M9
617.4 72 M9
660.6 72 M9
660.6 72 M9
660.6 72 M9
660.6 240.106 M9
671.4 240.106 M9
671.4 240.106 M9
671.4 240.106 M9
671.4 72 M9
714.6 72 M9
714.6 72 M9
714.6 72 M9
714.6 175.146 M9
725.4 175.146 M9
725.4 175.146 M9
725.4 175.146 M9
725.4 72 M9
768.6 72 M9
768.6 72 M9
768.6 72 M9
768.6 230.666 M9
779.4 230.666 M9
779.4 230.666 M9
779.4 230.666 M9
779.4 72 M9
822.6 72 M9
822.6 72 M9
822.6 72 M9
822.6 226.729 M9
833.4 226.729 M9
833.4 226.729 M9
833.4 226.729 M9
833.4 72 M9
876.6 72 M9
876.6 72 M9
876.6 72 M9
876.6 172.232 M9
887.4 172.232 M9
887.4 172.232 M9
887.4 172.232 M9
887.4 72 M9
930.6 72 M9
930.6 72 M9
930.6 72 M9
930.6 173.554 M9
941.4 173.554 M9
941.4 173.554 M9
941.4 173.554 M9
941.4 72 M9
1054.8 72 M9
1054.8 72 M9
1054.8 72 M9
1054.8 215.777 M9
1076.4 215.777 M9
1076.4 215.777 M9
1076.4 215.777 M9
1076.4 72 M9
1076.4 72 M9
174.6 72 M9
30.000000 135.000000 {pop} SS9 0.500000 G9 E9 0.000000 G9
182.7 72 S9
[] 2.600000 SL
182.7 72 M9
182.7 200.474 M9
193.5 200.474 M9
193.5 200.474 M9
193.5 200.474 M9
193.5 72 M9
236.7 72 M9
236.7 72 M9
236.7 72 M9
236.7 207.314 M9
247.5 207.314 M9
247.5 207.314 M9
247.5 207.314 M9
247.5 72 M9
290.7 72 M9
290.7 72 M9
290.7 72 M9
290.7 194.084 M9
301.5 194.084 M9
301.5 194.084 M9
301.5 194.084 M9
301.5 72 M9
344.7 72 M9
344.7 72 M9
344.7 72 M9
344.7 255.374 M9
355.5 255.374 M9
355.5 255.374 M9
355.5 255.374 M9
355.5 72 M9
398.7 72 M9
398.7 72 M9
398.7 72 M9
398.7 245.63 M9
409.5 245.63 M9
409.5 245.63 M9
409.5 245.63 M9
409.5 72 M9
452.7 72 M9
452.7 72 M9
452.7 72 M9
452.7 232.008 M9
463.5 232.008 M9
463.5 232.008 M9
463.5 232.008 M9
463.5 72 M9
506.7 72 M9
506.7 72 M9
506.7 72 M9
506.7 171.408 M9
517.5 171.408 M9
517.5 171.408 M9
517.5 171.408 M9
517.5 72 M9
560.7 72 M9
560.7 72 M9
560.7 72 M9
560.7 166.738 M9
571.5 166.738 M9
571.5 166.738 M9
571.5 166.738 M9
571.5 72 M9
614.7 72 M9
614.7 72 M9
614.7 72 M9
614.7 262.316 M9
625.5 262.316 M9
625.5 262.316 M9
625.5 262.316 M9
625.5 72 M9
668.7 72 M9
668.7 72 M9
668.7 72 M9
668.7 219.516 M9
679.5 219.516 M9
679.5 219.516 M9
679.5 219.516 M9
679.5 72 M9
722.7 72 M9
722.7 72 M9
722.7 72 M9
722.7 152.284 M9
733.5 152.284 M9
733.5 152.284 M9
733.5 152.284 M9
733.5 72 M9
776.7 72 M9
776.7 72 M9
776.7 72 M9
776.7 183.167 M9
787.5 183.167 M9
787.5 183.167 M9
787.5 183.167 M9
787.5 72 M9
830.7 72 M9
830.7 72 M9
830.7 72 M9
830.7 187.533 M9
841.5 187.533 M9
841.5 187.533 M9
841.5 187.533 M9
841.5 72 M9
884.7 72 M9
884.7 72 M9
884.7 72 M9
884.7 152.896 M9
895.5 152.896 M9
895.5 152.896 M9
895.5 152.896 M9
895.5 72 M9
938.7 72 M9
938.7 72 M9
938.7 72 M9
938.7 153.617 M9
949.5 153.617 M9
949.5 153.617 M9
949.5 153.617 M9
949.5 72 M9
1071 72 M9
1071 72 M9
1071 72 M9
1071 195.235 M9
1092.6 195.235 M9
1092.6 195.235 M9
1092.6 195.235 M9
1092.6 72 M9
1092.6 72 M9
182.7 72 M9
30.000000 180.000000 {pop} SS9 0.300000 G9 E9 0.000000 G9
190.8 72 S9
[] 2.600000 SL
190.8 72 M9
190.8 122.055 M9
201.6 122.055 M9
201.6 122.055 M9
201.6 122.055 M9
201.6 72 M9
244.8 72 M9
244.8 72 M9
244.8 72 M9
244.8 124.464 M9
255.6 124.464 M9
255.6 124.464 M9
255.6 124.464 M9
255.6 72 M9
298.8 72 M9
298.8 72 M9
298.8 72 M9
298.8 131.624 M9
309.6 131.624 M9
309.6 131.624 M9
309.6 131.624 M9
309.6 72 M9
352.8 72 M9
352.8 72 M9
352.8 72 M9
352.8 187.505 M9
363.6 187.505 M9
363.6 187.505 M9
363.6 187.505 M9
363.6 72 M9
406.8 72 M9
406.8 72 M9
406.8 72 M9
406.8 174.161 M9
417.6 174.161 M9
417.6 174.161 M9
417.6 174.161 M9
417.6 72 M9
460.8 72 M9
460.8 72 M9
460.8 72 M9
460.8 173.068 M9
471.6 173.068 M9
471.6 173.068 M9
471.6 173.068 M9
471.6 72 M9
514.8 72 M9
514.8 72 M9
514.8 72 M9
514.8 156.076 M9
525.6 156.076 M9
525.6 156.076 M9
525.6 156.076 M9
525.6 72 M9
568.8 72 M9
568.8 72 M9
568.8 72 M9
568.8 101.789 M9
579.6 101.789 M9
579.6 101.789 M9
579.6 101.789 M9
579.6 72 M9
622.8 72 M9
622.8 72 M9
622.8 72 M9
622.8 249.864 M9
633.6 249.864 M9
633.6 249.864 M9
633.6 249.864 M9
633.6 72 M9
676.8 72 M9
676.8 72 M9
676.8 72 M9
676.8 108.332 M9
687.6 108.332 M9
687.6 108.332 M9
687.6 108.332 M9
687.6 72 M9
730.8 72 M9
730.8 72 M9
730.8 72 M9
730.8 123.453 M9
741.6 123.453 M9
741.6 123.453 M9
741.6 123.453 M9
741.6 72 M9
784.8 72 M9
784.8 72 M9
784.8 72 M9
784.8 112.559 M9
795.6 112.559 M9
795.6 112.559 M9
795.6 112.559 M9
795.6 72 M9
838.8 72 M9
838.8 72 M9
838.8 72 M9
838.8 115.063 M9
849.6 115.063 M9
849.6 115.063 M9
849.6 115.063 M9
849.6 72 M9
892.8 72 M9
892.8 72 M9
892.8 72 M9
892.8 124.716 M9
903.6 124.716 M9
903.6 124.716 M9
903.6 124.716 M9
903.6 72 M9
946.8 72 M9
946.8 72 M9
946.8 72 M9
946.8 124.366 M9
957.6 124.366 M9
957.6 124.366 M9
957.6 124.366 M9
957.6 72 M9
1087.2 72 M9
1087.2 72 M9
1087.2 72 M9
1087.2 150.79 M9
1108.8 150.79 M9
1108.8 150.79 M9
1108.8 150.79 M9
1108.8 72 M9
1108.8 72 M9
190.8 72 M9
30.000000 45.000000 {cross} SS9 0.100000 G9 E9 0.000000 G9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(|) 0 1152 72 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 108 TXC
(5) 0 60 100.8 TXR
(|) -90 72 144 TXC
(10) 0 60 136.8 TXR
(|) -90 72 180 TXC
(15) 0 60 172.8 TXR
(|) -90 72 216 TXC
(20) 0 60 208.8 TXR
(|) -90 72 252 TXC
(25) 0 60 244.8 TXR
(|) -90 72 288 TXC
(30) 0 60 280.8 TXR
(|) -90 72 324 TXC
(35) 0 60 316.8 TXR
(|) -90 72 360 TXC
(40) 0 60 352.8 TXR
(|) 180 72 360 TXC
(|) 180 1152 360 TXC
(|) 90 1152 72 TXC
(|) 90 1152 108 TXC
(|) 90 1152 144 TXC
(|) 90 1152 180 TXC
(|) 90 1152 216 TXC
(|) 90 1152 252 TXC
(|) 90 1152 288 TXC
(|) 90 1152 324 TXC
(|) 90 1152 360 TXC
() 0 612 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 1152 72 
L9
0 setlinecap
72 72 72 360 
L9
72 360 1152 360 
L9
1152 72 1152 360 
L9
() 0 1152 12 TXR
(                        request scope ) 90 -1.2 360 TXR
24 /Helvetica-BoldOblique SetTxt
( average) 0 1071 43.2 TXC
30 /Times-Bold SetTxt
( (a)) 0 612 0 TXC
24 /Helvetica-BoldOblique SetTxt
( s) 0 120 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(1) 0 120 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 120 43.2 TXREL
() 0 126 18 TXC
( s) 0 174 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(2) 0 174 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 174 43.2 TXREL
() 0 180 18 TXC
( s) 0 228 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(3) 0 228 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 228 43.2 TXREL
() 0 234 18 TXC
( s) 0 282 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(4) 0 282 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 282 43.2 TXREL
() 0 288 18 TXC
( p) 0 336 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(1) 0 336 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 336 43.2 TXREL
() 0 342 18 TXC
( p) 0 390 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(2) 0 390 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 390 43.2 TXREL
() 0 396 18 TXC
( p) 0 444 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(3) 0 444 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 444 43.2 TXREL
() 0 450 18 TXC
( q) 0 498 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(1) 0 498 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 498 43.2 TXREL
() 0 504 18 TXC
( q) 0 552 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(2) 0 552 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 552 43.2 TXREL
() 0 558 18 TXC
( r) 0 606 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(1) 0 606 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 606 43.2 TXREL
() 0 612 18 TXC
( r) 0 660 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(2) 0 660 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 660 43.2 TXREL
() 0 666 18 TXC
( r) 0 714 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(3) 0 714 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 714 43.2 TXREL
() 0 720 18 TXC
( r) 0 768 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(4) 0 768 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 768 43.2 TXREL
() 0 774 18 TXC
( r) 0 822 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(5) 0 822 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 822 43.2 TXREL
() 0 828 18 TXC
( r) 0 876 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(6) 0 876 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 876 43.2 TXREL
() 0 882 18 TXC
( r) 0 930 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(7) 0 930 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 930 43.2 TXREL
() 0 936 18 TXC
() 0 1071 18 TXC
30 /Times-Bold SetTxt
() 0 612 -31.5 TXC
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
14 SetSym
initclip 
showpage
end
%%EndDocument
 @endspecial 960 x @beginspecial 20 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/randomx2.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
104.4 72 S9
[] 2.600000 SL
104.4 72 M9
104.4 316.8 M9
115.2 316.8 M9
115.2 316.8 M9
115.2 316.8 M9
115.2 72 M9
158.4 72 M9
158.4 72 M9
158.4 72 M9
158.4 316.8 M9
169.2 316.8 M9
169.2 316.8 M9
169.2 316.8 M9
169.2 72 M9
212.4 72 M9
212.4 72 M9
212.4 72 M9
212.4 316.8 M9
223.2 316.8 M9
223.2 316.8 M9
223.2 316.8 M9
223.2 72 M9
266.4 72 M9
266.4 72 M9
266.4 72 M9
266.4 316.8 M9
277.2 316.8 M9
277.2 316.8 M9
277.2 316.8 M9
277.2 72 M9
320.4 72 M9
320.4 72 M9
320.4 72 M9
320.4 324 M9
331.2 324 M9
331.2 324 M9
331.2 324 M9
331.2 72 M9
374.4 72 M9
374.4 72 M9
374.4 72 M9
374.4 324 M9
385.2 324 M9
385.2 324 M9
385.2 324 M9
385.2 72 M9
428.4 72 M9
428.4 72 M9
428.4 72 M9
428.4 324 M9
439.2 324 M9
439.2 324 M9
439.2 324 M9
439.2 72 M9
482.4 72 M9
482.4 72 M9
482.4 72 M9
482.4 316.8 M9
493.2 316.8 M9
493.2 316.8 M9
493.2 316.8 M9
493.2 72 M9
536.4 72 M9
536.4 72 M9
536.4 72 M9
536.4 316.8 M9
547.2 316.8 M9
547.2 316.8 M9
547.2 316.8 M9
547.2 72 M9
590.4 72 M9
590.4 72 M9
590.4 72 M9
590.4 323.999 M9
601.2 323.999 M9
601.2 323.999 M9
601.2 323.999 M9
601.2 72 M9
644.4 72 M9
644.4 72 M9
644.4 72 M9
644.4 324 M9
655.2 324 M9
655.2 324 M9
655.2 324 M9
655.2 72 M9
698.4 72 M9
698.4 72 M9
698.4 72 M9
698.4 324 M9
709.2 324 M9
709.2 324 M9
709.2 324 M9
709.2 72 M9
752.4 72 M9
752.4 72 M9
752.4 72 M9
752.4 324 M9
763.2 324 M9
763.2 324 M9
763.2 324 M9
763.2 72 M9
806.4 72 M9
806.4 72 M9
806.4 72 M9
806.4 324 M9
817.2 324 M9
817.2 324 M9
817.2 324 M9
817.2 72 M9
860.4 72 M9
860.4 72 M9
860.4 72 M9
860.4 324 M9
871.2 324 M9
871.2 324 M9
871.2 324 M9
871.2 72 M9
914.4 72 M9
914.4 72 M9
914.4 72 M9
914.4 324 M9
925.2 324 M9
925.2 324 M9
925.2 324 M9
925.2 72 M9
1022.4 72 M9
1022.4 72 M9
1022.4 72 M9
1022.4 321.185 M9
1044 321.185 M9
1044 321.185 M9
1044 321.185 M9
1044 72 M9
1044 72 M9
104.4 72 M9
30.000000 45.000000 {pop} SS9 0.900000 G9 E9 0.000000 G9
112.5 72 S9
[] 2.600000 SL
112.5 72 M9
112.5 257.905 M9
123.3 257.905 M9
123.3 257.905 M9
123.3 257.905 M9
123.3 72 M9
166.5 72 M9
166.5 72 M9
166.5 72 M9
166.5 316.8 M9
177.3 316.8 M9
177.3 316.8 M9
177.3 316.8 M9
177.3 72 M9
220.5 72 M9
220.5 72 M9
220.5 72 M9
220.5 316.8 M9
231.3 316.8 M9
231.3 316.8 M9
231.3 316.8 M9
231.3 72 M9
274.5 72 M9
274.5 72 M9
274.5 72 M9
274.5 316.8 M9
285.3 316.8 M9
285.3 316.8 M9
285.3 316.8 M9
285.3 72 M9
328.5 72 M9
328.5 72 M9
328.5 72 M9
328.5 324 M9
339.3 324 M9
339.3 324 M9
339.3 324 M9
339.3 72 M9
382.5 72 M9
382.5 72 M9
382.5 72 M9
382.5 324 M9
393.3 324 M9
393.3 324 M9
393.3 324 M9
393.3 72 M9
436.5 72 M9
436.5 72 M9
436.5 72 M9
436.5 324 M9
447.3 324 M9
447.3 324 M9
447.3 324 M9
447.3 72 M9
490.5 72 M9
490.5 72 M9
490.5 72 M9
490.5 122.887 M9
501.3 122.887 M9
501.3 122.887 M9
501.3 122.887 M9
501.3 72 M9
598.5 72 M9
598.5 72 M9
598.5 72 M9
598.5 293.63 M9
609.3 293.63 M9
609.3 293.63 M9
609.3 293.63 M9
609.3 72 M9
652.5 72 M9
652.5 72 M9
652.5 72 M9
652.5 324 M9
663.3 324 M9
663.3 324 M9
663.3 324 M9
663.3 72 M9
706.5 72 M9
706.5 72 M9
706.5 72 M9
706.5 282.895 M9
717.3 282.895 M9
717.3 282.895 M9
717.3 282.895 M9
717.3 72 M9
760.5 72 M9
760.5 72 M9
760.5 72 M9
760.5 324 M9
771.3 324 M9
771.3 324 M9
771.3 324 M9
771.3 72 M9
814.5 72 M9
814.5 72 M9
814.5 72 M9
814.5 324 M9
825.3 324 M9
825.3 324 M9
825.3 324 M9
825.3 72 M9
868.5 72 M9
868.5 72 M9
868.5 72 M9
868.5 283.612 M9
879.3 283.612 M9
879.3 283.612 M9
879.3 283.612 M9
879.3 72 M9
922.5 72 M9
922.5 72 M9
922.5 72 M9
922.5 283.594 M9
933.3 283.594 M9
933.3 283.594 M9
933.3 283.594 M9
933.3 72 M9
1038.6 72 M9
1038.6 72 M9
1038.6 72 M9
1038.6 273.226 M9
1060.2 273.226 M9
1060.2 273.226 M9
1060.2 273.226 M9
1060.2 72 M9
1060.2 72 M9
112.5 72 M9
30.000000 90.000000 {pop} SS9 0.700000 G9 E9 0.000000 G9
120.6 72 S9
[] 2.600000 SL
120.6 72 M9
120.6 256.944 M9
131.4 256.944 M9
131.4 256.944 M9
131.4 256.944 M9
131.4 72 M9
174.6 72 M9
174.6 72 M9
174.6 72 M9
174.6 229.977 M9
185.4 229.977 M9
185.4 229.977 M9
185.4 229.977 M9
185.4 72 M9
228.6 72 M9
228.6 72 M9
228.6 72 M9
228.6 316.8 M9
239.4 316.8 M9
239.4 316.8 M9
239.4 316.8 M9
239.4 72 M9
282.6 72 M9
282.6 72 M9
282.6 72 M9
282.6 305.28 M9
293.4 305.28 M9
293.4 305.28 M9
293.4 305.28 M9
293.4 72 M9
336.6 72 M9
336.6 72 M9
336.6 72 M9
336.6 282.252 M9
347.4 282.252 M9
347.4 282.252 M9
347.4 282.252 M9
347.4 72 M9
390.6 72 M9
390.6 72 M9
390.6 72 M9
390.6 284.4 M9
401.4 284.4 M9
401.4 284.4 M9
401.4 284.4 M9
401.4 72 M9
444.6 72 M9
444.6 72 M9
444.6 72 M9
444.6 283.854 M9
455.4 283.854 M9
455.4 283.854 M9
455.4 283.854 M9
455.4 72 M9
498.6 72 M9
498.6 72 M9
498.6 72 M9
498.6 198.217 M9
509.4 198.217 M9
509.4 198.217 M9
509.4 198.217 M9
509.4 72 M9
552.6 72 M9
552.6 72 M9
552.6 72 M9
552.6 222.3 M9
563.4 222.3 M9
563.4 222.3 M9
563.4 222.3 M9
563.4 72 M9
606.6 72 M9
606.6 72 M9
606.6 72 M9
606.6 192.317 M9
617.4 192.317 M9
617.4 192.317 M9
617.4 192.317 M9
617.4 72 M9
660.6 72 M9
660.6 72 M9
660.6 72 M9
660.6 255.066 M9
671.4 255.066 M9
671.4 255.066 M9
671.4 255.066 M9
671.4 72 M9
714.6 72 M9
714.6 72 M9
714.6 72 M9
714.6 176.769 M9
725.4 176.769 M9
725.4 176.769 M9
725.4 176.769 M9
725.4 72 M9
768.6 72 M9
768.6 72 M9
768.6 72 M9
768.6 257.12 M9
779.4 257.12 M9
779.4 257.12 M9
779.4 257.12 M9
779.4 72 M9
822.6 72 M9
822.6 72 M9
822.6 72 M9
822.6 213.777 M9
833.4 213.777 M9
833.4 213.777 M9
833.4 213.777 M9
833.4 72 M9
876.6 72 M9
876.6 72 M9
876.6 72 M9
876.6 177.983 M9
887.4 177.983 M9
887.4 177.983 M9
887.4 177.983 M9
887.4 72 M9
930.6 72 M9
930.6 72 M9
930.6 72 M9
930.6 197.253 M9
941.4 197.253 M9
941.4 197.253 M9
941.4 197.253 M9
941.4 72 M9
1054.8 72 M9
1054.8 72 M9
1054.8 72 M9
1054.8 216.173 M9
1076.4 216.173 M9
1076.4 216.173 M9
1076.4 216.173 M9
1076.4 72 M9
1076.4 72 M9
120.6 72 M9
30.000000 135.000000 {pop} SS9 0.500000 G9 E9 0.000000 G9
128.7 72 S9
[] 2.600000 SL
128.7 72 M9
128.7 230.311 M9
139.5 230.311 M9
139.5 230.311 M9
139.5 230.311 M9
139.5 72 M9
182.7 72 M9
182.7 72 M9
182.7 72 M9
182.7 273.9 M9
193.5 273.9 M9
193.5 273.9 M9
193.5 273.9 M9
193.5 72 M9
236.7 72 M9
236.7 72 M9
236.7 72 M9
236.7 267.2 M9
247.5 267.2 M9
247.5 267.2 M9
247.5 267.2 M9
247.5 72 M9
290.7 72 M9
290.7 72 M9
290.7 72 M9
290.7 281.853 M9
301.5 281.853 M9
301.5 281.853 M9
301.5 281.853 M9
301.5 72 M9
344.7 72 M9
344.7 72 M9
344.7 72 M9
344.7 249.07 M9
355.5 249.07 M9
355.5 249.07 M9
355.5 249.07 M9
355.5 72 M9
398.7 72 M9
398.7 72 M9
398.7 72 M9
398.7 265.2 M9
409.5 265.2 M9
409.5 265.2 M9
409.5 265.2 M9
409.5 72 M9
452.7 72 M9
452.7 72 M9
452.7 72 M9
452.7 268.701 M9
463.5 268.701 M9
463.5 268.701 M9
463.5 268.701 M9
463.5 72 M9
506.7 72 M9
506.7 72 M9
506.7 72 M9
506.7 187.887 M9
517.5 187.887 M9
517.5 187.887 M9
517.5 187.887 M9
517.5 72 M9
560.7 72 M9
560.7 72 M9
560.7 72 M9
560.7 253.362 M9
571.5 253.362 M9
571.5 253.362 M9
571.5 253.362 M9
571.5 72 M9
614.7 72 M9
614.7 72 M9
614.7 72 M9
614.7 172.453 M9
625.5 172.453 M9
625.5 172.453 M9
625.5 172.453 M9
625.5 72 M9
668.7 72 M9
668.7 72 M9
668.7 72 M9
668.7 209.97 M9
679.5 209.97 M9
679.5 209.97 M9
679.5 209.97 M9
679.5 72 M9
722.7 72 M9
722.7 72 M9
722.7 72 M9
722.7 160.262 M9
733.5 160.262 M9
733.5 160.262 M9
733.5 160.262 M9
733.5 72 M9
776.7 72 M9
776.7 72 M9
776.7 72 M9
776.7 239.273 M9
787.5 239.273 M9
787.5 239.273 M9
787.5 239.273 M9
787.5 72 M9
830.7 72 M9
830.7 72 M9
830.7 72 M9
830.7 237.086 M9
841.5 237.086 M9
841.5 237.086 M9
841.5 237.086 M9
841.5 72 M9
884.7 72 M9
884.7 72 M9
884.7 72 M9
884.7 153.267 M9
895.5 153.267 M9
895.5 153.267 M9
895.5 153.267 M9
895.5 72 M9
938.7 72 M9
938.7 72 M9
938.7 72 M9
938.7 177.93 M9
949.5 177.93 M9
949.5 177.93 M9
949.5 177.93 M9
949.5 72 M9
1071 72 M9
1071 72 M9
1071 72 M9
1071 197.669 M9
1092.6 197.669 M9
1092.6 197.669 M9
1092.6 197.669 M9
1092.6 72 M9
1092.6 72 M9
128.7 72 M9
30.000000 180.000000 {pop} SS9 0.300000 G9 E9 0.000000 G9
136.8 72 S9
[] 2.600000 SL
136.8 72 M9
136.8 178.995 M9
147.6 178.995 M9
147.6 178.995 M9
147.6 178.995 M9
147.6 72 M9
190.8 72 M9
190.8 72 M9
190.8 72 M9
190.8 286.854 M9
201.6 286.854 M9
201.6 286.854 M9
201.6 286.854 M9
201.6 72 M9
244.8 72 M9
244.8 72 M9
244.8 72 M9
244.8 312.6 M9
255.6 312.6 M9
255.6 312.6 M9
255.6 312.6 M9
255.6 72 M9
298.8 72 M9
298.8 72 M9
298.8 72 M9
298.8 303.793 M9
309.6 303.793 M9
309.6 303.793 M9
309.6 303.793 M9
309.6 72 M9
352.8 72 M9
352.8 72 M9
352.8 72 M9
352.8 278.839 M9
363.6 278.839 M9
363.6 278.839 M9
363.6 278.839 M9
363.6 72 M9
406.8 72 M9
406.8 72 M9
406.8 72 M9
406.8 261.442 M9
417.6 261.442 M9
417.6 261.442 M9
417.6 261.442 M9
417.6 72 M9
460.8 72 M9
460.8 72 M9
460.8 72 M9
460.8 291.497 M9
471.6 291.497 M9
471.6 291.497 M9
471.6 291.497 M9
471.6 72 M9
514.8 72 M9
514.8 72 M9
514.8 72 M9
514.8 113.965 M9
525.6 113.965 M9
525.6 113.965 M9
525.6 113.965 M9
525.6 72 M9
568.8 72 M9
568.8 72 M9
568.8 72 M9
568.8 226.146 M9
579.6 226.146 M9
579.6 226.146 M9
579.6 226.146 M9
579.6 72 M9
622.8 72 M9
622.8 72 M9
622.8 72 M9
622.8 134.491 M9
633.6 134.491 M9
633.6 134.491 M9
633.6 134.491 M9
633.6 72 M9
676.8 72 M9
676.8 72 M9
676.8 72 M9
676.8 169.2 M9
687.6 169.2 M9
687.6 169.2 M9
687.6 169.2 M9
687.6 72 M9
730.8 72 M9
730.8 72 M9
730.8 72 M9
730.8 174.717 M9
741.6 174.717 M9
741.6 174.717 M9
741.6 174.717 M9
741.6 72 M9
784.8 72 M9
784.8 72 M9
784.8 72 M9
784.8 276.96 M9
795.6 276.96 M9
795.6 276.96 M9
795.6 276.96 M9
795.6 72 M9
838.8 72 M9
838.8 72 M9
838.8 72 M9
838.8 269.55 M9
849.6 269.55 M9
849.6 269.55 M9
849.6 269.55 M9
849.6 72 M9
892.8 72 M9
892.8 72 M9
892.8 72 M9
892.8 136.874 M9
903.6 136.874 M9
903.6 136.874 M9
903.6 136.874 M9
903.6 72 M9
946.8 72 M9
946.8 72 M9
946.8 72 M9
946.8 124.067 M9
957.6 124.067 M9
957.6 124.067 M9
957.6 124.067 M9
957.6 72 M9
1087.2 72 M9
1087.2 72 M9
1087.2 72 M9
1087.2 158.378 M9
1108.8 158.378 M9
1108.8 158.378 M9
1108.8 158.378 M9
1108.8 72 M9
1108.8 72 M9
136.8 72 M9
30.000000 45.000000 {cross} SS9 0.100000 G9 E9 0.000000 G9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(|) 0 1152 72 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 108 TXC
(5) 0 60 100.8 TXR
(|) -90 72 144 TXC
(10) 0 60 136.8 TXR
(|) -90 72 180 TXC
(15) 0 60 172.8 TXR
(|) -90 72 216 TXC
(20) 0 60 208.8 TXR
(|) -90 72 252 TXC
(25) 0 60 244.8 TXR
(|) -90 72 288 TXC
(30) 0 60 280.8 TXR
(|) -90 72 324 TXC
(35) 0 60 316.8 TXR
(|) -90 72 360 TXC
(40) 0 60 352.8 TXR
(|) 180 72 360 TXC
(|) 180 1152 360 TXC
(|) 90 1152 72 TXC
(|) 90 1152 108 TXC
(|) 90 1152 144 TXC
(|) 90 1152 180 TXC
(|) 90 1152 216 TXC
(|) 90 1152 252 TXC
(|) 90 1152 288 TXC
(|) 90 1152 324 TXC
(|) 90 1152 360 TXC
() 0 612 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 1152 72 
L9
0 setlinecap
72 72 72 360 
L9
72 360 1152 360 
L9
1152 72 1152 360 
L9
(                        session member) 0 1152 12 TXR
(                        reply scope ) 90 -1.2 360 TXR
24 /Helvetica-BoldOblique SetTxt
( average) 0 1071 43.2 TXC
30 /Times-Bold SetTxt
( (b)) 0 612 0 TXC
24 /Helvetica-BoldOblique SetTxt
( s) 0 120 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(1) 0 120 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 120 43.2 TXREL
() 0 126 18 TXC
( s) 0 174 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(2) 0 174 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 174 43.2 TXREL
() 0 180 18 TXC
( s) 0 228 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(3) 0 228 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 228 43.2 TXREL
() 0 234 18 TXC
( s) 0 282 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(4) 0 282 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 282 43.2 TXREL
() 0 288 18 TXC
( p) 0 336 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(1) 0 336 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 336 43.2 TXREL
() 0 342 18 TXC
( p) 0 390 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(2) 0 390 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 390 43.2 TXREL
() 0 396 18 TXC
( p) 0 444 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(3) 0 444 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 444 43.2 TXREL
() 0 450 18 TXC
( q) 0 498 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(1) 0 498 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 498 43.2 TXREL
() 0 504 18 TXC
( q) 0 552 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(2) 0 552 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 552 43.2 TXREL
() 0 558 18 TXC
( r) 0 606 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(1) 0 606 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 606 43.2 TXREL
() 0 612 18 TXC
( r) 0 660 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(2) 0 660 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 660 43.2 TXREL
() 0 666 18 TXC
( r) 0 714 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(3) 0 714 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 714 43.2 TXREL
() 0 720 18 TXC
( r) 0 768 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(4) 0 768 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 768 43.2 TXREL
() 0 774 18 TXC
( r) 0 822 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(5) 0 822 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 822 43.2 TXREL
() 0 828 18 TXC
( r) 0 876 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(6) 0 876 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 876 43.2 TXREL
() 0 882 18 TXC
( r) 0 930 43.2 TXC
20 /Helvetica-BoldOblique SetTxt
20 /Helvetica-BoldOblique SetTxt
(7) 0 930 43.2 /psy psy -6 add def TXREL
/psy psy -6 sub def
24 /Helvetica-BoldOblique SetTxt
24 /Helvetica-BoldOblique SetTxt
() 0 930 43.2 TXREL
() 0 936 18 TXC
() 0 1071 18 TXC
30 /Times-Bold SetTxt
() 0 612 -31.5 TXC
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
14 SetSym
initclip 
showpage
end
%%EndDocument
 @endspecial -60 x @beginspecial 55 @hoffset 30 @voffset
40 @hscale 40 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/idx2.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
0 24 Q
0 X
0 K
(global error recovery) 72 739.64 T
(hop-scoped error recovery) 72 715.64 T
(group-scoped error recovery :) 72 691.64 T
1 F
(x=33%,) 363.73 691.64 T
2 F
(d) 446.53 691.64 T
1 F
(=0%, m=10, k=3, f=6) 458.38 691.64 T
0 F
(group-scoped error recovery :) 72 667.29 T
1 F
(x=50%,) 363.73 667.29 T
2 F
(d) 446.53 667.29 T
1 F
(=0%, m=10, k=3, f=6) 458.38 667.29 T
0 F
(group-scoped error recovery :) 72 642.95 T
1 F
(x=100%,) 363.73 642.95 T
2 F
(d) 458.52 642.95 T
1 F
(=0%, m=10, k=3, f=6) 470.37 642.95 T
36 739.29 54 756 R
5 X
V
0.5 H
2 Z
0 X
N
36 714.22 54 730.93 R
4 X
V
0 X
N
36 689.15 54 705.86 R
3 X
V
0 X
N
36 664.08 54 680.79 R
2 X
V
0 X
N
36 639 54 655.72 R
1 X
V
0 X
N
FMENDPAGE
%%EndDocument
 @endspecial 631 2703 a Fn(Figure)30 b(8:)41 b(Av)m(erage)32
b(request)e(and)g(reply)f(scop)s(es)i(of)f(individual)c(mem)m(b)s(ers)
300 2978 y(represen)m(ted)k(b)m(y)f(gra)m(y)i(lines.)39
b(W)-8 b(e)30 b(assume)g(most)g(of)g(the)g(losses)f(are)h(at)g(lo)s
(cal)f(area)i(net)m(w)m(orks.)441 3091 y(Figure)39 b(8.a)h(and)f(8.b)g
(sho)m(w)g(the)h(measured)e(request)i(and)e(reply)g(scop)s(es)h(of)h
(individual)300 3204 y(mem)m(b)s(ers)h(as)h(w)m(ell)f(as)h(the)h(a)m(v)
m(erage)h(request)e(and)f(reply)g(scop)s(es)h(during)e(the)i(sim)m
(ulation.)300 3317 y(The)d(scop)s(e)g(is)g(measured)f(in)g(terms)i(of)f
(the)h(n)m(um)m(b)s(er)e(of)h(hops)g(that)h(requests)f(and)g(replies)
300 3430 y(tra)m(v)m(el.)59 b(The)35 b(a)m(v)m(erage)k(request)d(and)g
(reply)f(scop)s(es)h(are)g(consisten)m(t)g(with)f(the)i(results)d(from)
300 3543 y(the)e(star,)h(string)e(and)g(tree)i(top)s(ologies.)45
b(The)31 b(p)s(erformance)g(of)h(hop-scop)s(ed)g(error)f(reco)m(v)m
(ery)300 3656 y(is)e(v)m(ery)i(comp)s(etitiv)m(e)f(with)f(group-scop)s
(ed)g(error)h(reco)m(v)m(ery)i(in)d(terms)h(of)g(the)g(request)h(scop)s
(e.)300 3769 y(Ho)m(w)m(ev)m(er,)i(the)d(reduction)g(of)g(reply)f(scop)
s(e)i(is)e(limited)f(in)h(hop-scop)s(ed)h(error)g(reco)m(v)m(ery)-8
b(.)441 3882 y(In)31 b(Figure)h(8.a,)i(the)e(request)g(scop)s(e)h(in)d
(group-scop)s(ed)i(error)g(reco)m(v)m(ery)h(go)s(es)g(do)m(wn)f(as)g
Fk(x)300 3995 y Fn(go)s(es)k(up.)54 b(A)35 b(large)g
Fk(x)g Fn(means)g(higher)f(loss)g(sharing,)h(therefore,)j(there)d(are)g
(few)m(er)h(mem)m(b)s(ers)300 4107 y(in)d(a)i(lo)s(cal)f(group)g(and)f
(they)i(ha)m(v)m(e)h(a)f(higher)e(degree)i(of)f(loss)g(sharing.)52
b(As)34 b(a)h(consequence,)300 4220 y(the)h(requests)f(and)g(replies)f
(in)g(the)i(group)f(are)h(required)e(b)m(y)i(more)g(mem)m(b)s(ers)e(in)
h(the)g(group)300 4333 y(and)e(less)h(bandwidth)d(is)i(w)m(asted.)52
b(Most)35 b(mem)m(b)s(ers)e(ha)m(v)m(e)i(relativ)m(ely)f(small)e
(request)i(scop)s(es)300 4446 y(in)26 b(b)s(oth)h(hop-scop)s(ed)g(and)h
(group-scop)s(ed)f(error)g(reco)m(v)m(eries.)41 b(This)26
b(means)i(that)g(most)g(of)g(the)300 4559 y(requests)34
b(are)g(sen)m(t)g(only)f(within)e(the)j(lo)s(cal)f(area)i(net)m(w)m
(orks.)51 b(Note)35 b(that)g(mem)m(b)s(er)e Fk(r)3316
4573 y Fl(1)3389 4559 y Fn(has)h(a)300 4672 y(relativ)m(ely)29
b(large)g(request)h(scop)s(e)f(in)f(b)s(oth)h(hop-scop)s(ed)f(and)h
(group-scop)s(ed)g(error)g(reco)m(v)m(eries)300 4785
y(b)s(ecause)h(its)g(requests)g(has)h(to)g(propagate)g(across)g(the)g
(Mb)s(one)f(to)h(reac)m(h)g(a)g(help)s(er.)441 4898 y(The)i(reply)f
(scop)s(e,)i(sho)m(wn)e(in)g(Figure)h(8.b,)h(dep)s(ends)e(on)h(where)f
(the)i(request)f(is)f(coming)300 5011 y(from.)55 b(A)35
b(small)f(reply)g(scop)s(e)h(means)g(the)h(reply)e(is)g(within)f(lo)s
(cal)h(area)i(net)m(w)m(orks.)56 b(F)-8 b(or)36 b(ex-)300
5124 y(ample,)i Fk(r)642 5138 y Fl(1)681 5124 y Fn('s)f(reply)e(scop)s
(e)h(in)f(group-scop)s(ed)h(error)g(reco)m(v)m(ery)j(is)c(small)g(b)s
(ecause)h Fk(r)3257 5138 y Fl(1)3333 5124 y Fn(is)g(only)300
5237 y(resp)s(onsible)c(to)k(reco)m(v)m(er)h(losses)e(of)h(its)e(do)m
(wnstream)i(mem)m(b)s(ers)e(within)f(its)i(lo)s(cal)f(area)i(net-)1905
5506 y(18)p eop
%%Page: 19 19
19 18 bop 300 1357 a @beginspecial 20 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/randomx3.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
95.4 324 ms
[] 2.600000 SL
131.4 319.621 ns
167.4 321.915 ns
203.4 323.811 ns
239.4 321.975 ns
275.4 321.375 ns
311.4 320.975 ns
347.4 321.466 ns
383.4 322.591 ns
419.4 323.86 ns
455.4 321.952 ns
491.4 325.388 ns
527.4 321.079 ns
563.4 322.962 ns
599.4 321.429 ns
635.4 321.014 ns
671.4 319.09 ns
707.4 323.72 ns
743.4 319.449 ns
779.4 323.456 ns
815.4 319.462 ns
851.4 323.369 ns
887.4 321.962 ns
923.4 320.602 ns
959.4 323.848 ns
995.4 319.28 ns
1031.4 320.806 ns
1067.4 322.597 ns
1103.4 326.584 ns
1139.4 321.165 ns
nsend
0.900000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
131.4 208.937 ns
167.4 164.369 ns
203.4 164.325 ns
239.4 169.963 ns
275.4 161.227 ns
311.4 161.023 ns
347.4 165.291 ns
383.4 161.793 ns
419.4 163.488 ns
455.4 159.738 ns
491.4 162.678 ns
527.4 157.985 ns
563.4 162.276 ns
599.4 164.272 ns
635.4 165.565 ns
671.4 166.029 ns
707.4 160.423 ns
743.4 159.816 ns
779.4 162.287 ns
815.4 161.222 ns
851.4 166.301 ns
887.4 164.947 ns
923.4 162.974 ns
959.4 162.711 ns
995.4 168.149 ns
1031.4 164.071 ns
1067.4 163.214 ns
1103.4 164.511 ns
1139.4 165.324 ns
nsend
0.700000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
131.4 255.997 ns
167.4 226.147 ns
203.4 200.932 ns
239.4 213.54 ns
275.4 207.058 ns
311.4 207.803 ns
347.4 209.249 ns
383.4 242.571 ns
419.4 235.191 ns
455.4 214.253 ns
491.4 218.643 ns
527.4 218.517 ns
563.4 204.445 ns
599.4 201.529 ns
635.4 215.64 ns
671.4 204.537 ns
707.4 213.468 ns
743.4 214.154 ns
779.4 213.737 ns
815.4 217.226 ns
851.4 232.788 ns
887.4 216.171 ns
923.4 210.116 ns
959.4 219.21 ns
995.4 206.418 ns
1031.4 223.216 ns
1067.4 218.359 ns
1103.4 210.419 ns
1139.4 209.484 ns
nsend
0.500000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
131.4 245.924 ns
167.4 214.494 ns
203.4 230.463 ns
239.4 216.47 ns
275.4 205.883 ns
311.4 189.468 ns
347.4 187.97 ns
383.4 184.134 ns
419.4 196.294 ns
455.4 185.995 ns
491.4 190.056 ns
527.4 173.285 ns
563.4 194.537 ns
599.4 195.78 ns
635.4 214.489 ns
671.4 203.37 ns
707.4 189.814 ns
743.4 189.691 ns
779.4 170.261 ns
815.4 192.581 ns
851.4 192.503 ns
887.4 195.497 ns
923.4 201.534 ns
959.4 200.418 ns
995.4 190.777 ns
1031.4 187.371 ns
1067.4 177.904 ns
1103.4 171.446 ns
1139.4 180.386 ns
nsend
0.300000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
131.4 211.812 ns
167.4 152.394 ns
203.4 154.351 ns
239.4 155.614 ns
275.4 149.301 ns
311.4 155.348 ns
347.4 152.178 ns
383.4 146.761 ns
419.4 170.865 ns
455.4 141.426 ns
491.4 149.684 ns
527.4 144.027 ns
563.4 145.68 ns
599.4 153.472 ns
635.4 148.405 ns
671.4 148.292 ns
707.4 144.186 ns
743.4 138.424 ns
779.4 138.487 ns
815.4 144.657 ns
851.4 149.028 ns
887.4 145.573 ns
923.4 147.294 ns
959.4 146.743 ns
995.4 153.981 ns
1031.4 158.838 ns
1067.4 147.895 ns
1103.4 145.54 ns
1139.4 146.85 ns
nsend
0.100000 G9 D9 0.0 G9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 252 72 TXC
(100) 0 252 43.2 TXC
(|) 0 432 72 TXC
(200) 0 432 43.2 TXC
(|) 0 612 72 TXC
(300) 0 612 43.2 TXC
(|) 0 792 72 TXC
(400) 0 792 43.2 TXC
(|) 0 972 72 TXC
(500) 0 972 43.2 TXC
(|) 0 1152 72 TXC
(600) 0 1152 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 108 TXC
(5) 0 60 100.8 TXR
(|) -90 72 144 TXC
(10) 0 60 136.8 TXR
(|) -90 72 180 TXC
(15) 0 60 172.8 TXR
(|) -90 72 216 TXC
(20) 0 60 208.8 TXR
(|) -90 72 252 TXC
(25) 0 60 244.8 TXR
(|) -90 72 288 TXC
(30) 0 60 280.8 TXR
(|) -90 72 324 TXC
(35) 0 60 316.8 TXR
(|) -90 72 360 TXC
(40) 0 60 352.8 TXR
(|) 180 72 360 TXC
(|) 180 252 360 TXC
(|) 180 432 360 TXC
(|) 180 612 360 TXC
(|) 180 792 360 TXC
(|) 180 972 360 TXC
(|) 180 1152 360 TXC
(|) 90 1152 72 TXC
(|) 90 1152 108 TXC
(|) 90 1152 144 TXC
(|) 90 1152 180 TXC
(|) 90 1152 216 TXC
(|) 90 1152 252 TXC
(|) 90 1152 288 TXC
(|) 90 1152 324 TXC
(|) 90 1152 360 TXC
() 0 612 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 1152 72 
L9
0 setlinecap
72 72 72 360 
L9
72 360 1152 360 
L9
1152 72 1152 360 
L9
() 0 1152 12 TXR
(                        request traffic ) 90 -1.2 360 TXR
30 /Times-Bold SetTxt
( (a)) 0 612 0 TXC
() 0 612 -31.5 TXC
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
14 SetSym
initclip 
showpage
end
%%EndDocument
 @endspecial 960 x @beginspecial 20 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/randomx4.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
95.4 324 ms
[] 2.600000 SL
131.4 319.556 ns
167.4 320.606 ns
203.4 323.186 ns
239.4 322.242 ns
275.4 319.802 ns
311.4 321.918 ns
347.4 324.251 ns
383.4 317.1 ns
419.4 326.262 ns
455.4 320.783 ns
491.4 324.756 ns
527.4 317.985 ns
563.4 323.827 ns
599.4 320.641 ns
635.4 320.379 ns
671.4 321.517 ns
707.4 324.256 ns
743.4 322.831 ns
779.4 324.159 ns
815.4 320.924 ns
851.4 323.298 ns
887.4 321.67 ns
923.4 321.633 ns
959.4 323.312 ns
995.4 319.203 ns
1031.4 322.296 ns
1067.4 321.282 ns
1103.4 322.255 ns
1139.4 319.144 ns
nsend
0.900000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
131.4 319.708 ns
167.4 301.759 ns
203.4 272.156 ns
239.4 272.357 ns
275.4 262.365 ns
311.4 271.702 ns
347.4 273.857 ns
383.4 268.85 ns
419.4 271.018 ns
455.4 268.882 ns
491.4 265.181 ns
527.4 263.68 ns
563.4 271.566 ns
599.4 274.941 ns
635.4 265.991 ns
671.4 275.715 ns
707.4 273.658 ns
743.4 262.503 ns
779.4 276.528 ns
815.4 264.928 ns
851.4 270.672 ns
887.4 272.4 ns
923.4 262.659 ns
959.4 271.314 ns
995.4 281.737 ns
1031.4 265.441 ns
1067.4 277.493 ns
1103.4 266.949 ns
1139.4 268.168 ns
nsend
0.700000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
131.4 261.395 ns
167.4 227.772 ns
203.4 204.05 ns
239.4 213.767 ns
275.4 206.524 ns
311.4 207.872 ns
347.4 207.255 ns
383.4 238.805 ns
419.4 232.963 ns
455.4 212.571 ns
491.4 220.008 ns
527.4 217.886 ns
563.4 213.33 ns
599.4 201.774 ns
635.4 211.236 ns
671.4 204.89 ns
707.4 210.432 ns
743.4 211.957 ns
779.4 210.409 ns
815.4 216.082 ns
851.4 231.268 ns
887.4 212.118 ns
923.4 203.645 ns
959.4 216.455 ns
995.4 206.092 ns
1031.4 224.098 ns
1067.4 216.885 ns
1103.4 209.313 ns
1139.4 205.598 ns
nsend
0.500000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
131.4 250.869 ns
167.4 213.684 ns
203.4 233.119 ns
239.4 222.515 ns
275.4 207.208 ns
311.4 194.036 ns
347.4 187.375 ns
383.4 185.651 ns
419.4 199.282 ns
455.4 188.485 ns
491.4 191.711 ns
527.4 176.028 ns
563.4 196.011 ns
599.4 196.937 ns
635.4 212.633 ns
671.4 204.593 ns
707.4 192.422 ns
743.4 189.678 ns
779.4 172.297 ns
815.4 193.413 ns
851.4 195.763 ns
887.4 197.355 ns
923.4 206.605 ns
959.4 202.183 ns
995.4 193.321 ns
1031.4 185.835 ns
1067.4 178.882 ns
1103.4 174.203 ns
1139.4 177.083 ns
nsend
0.300000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
131.4 224.703 ns
167.4 161.646 ns
203.4 162.924 ns
239.4 165.626 ns
275.4 154.95 ns
311.4 162.119 ns
347.4 157.082 ns
383.4 151.876 ns
419.4 177.18 ns
455.4 144.641 ns
491.4 152.986 ns
527.4 147.728 ns
563.4 152.145 ns
599.4 165.18 ns
635.4 154.316 ns
671.4 155.716 ns
707.4 147.586 ns
743.4 143.68 ns
779.4 141.802 ns
815.4 149.478 ns
851.4 156.612 ns
887.4 150.461 ns
923.4 153.48 ns
959.4 153.621 ns
995.4 160.037 ns
1031.4 161.214 ns
1067.4 153.597 ns
1103.4 146.924 ns
1139.4 151.65 ns
nsend
0.100000 G9 D9 0.0 G9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 252 72 TXC
(100) 0 252 43.2 TXC
(|) 0 432 72 TXC
(200) 0 432 43.2 TXC
(|) 0 612 72 TXC
(300) 0 612 43.2 TXC
(|) 0 792 72 TXC
(400) 0 792 43.2 TXC
(|) 0 972 72 TXC
(500) 0 972 43.2 TXC
(|) 0 1152 72 TXC
(600) 0 1152 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 108 TXC
(5) 0 60 100.8 TXR
(|) -90 72 144 TXC
(10) 0 60 136.8 TXR
(|) -90 72 180 TXC
(15) 0 60 172.8 TXR
(|) -90 72 216 TXC
(20) 0 60 208.8 TXR
(|) -90 72 252 TXC
(25) 0 60 244.8 TXR
(|) -90 72 288 TXC
(30) 0 60 280.8 TXR
(|) -90 72 324 TXC
(35) 0 60 316.8 TXR
(|) -90 72 360 TXC
(40) 0 60 352.8 TXR
(|) 180 72 360 TXC
(|) 180 252 360 TXC
(|) 180 432 360 TXC
(|) 180 612 360 TXC
(|) 180 792 360 TXC
(|) 180 972 360 TXC
(|) 180 1152 360 TXC
(|) 90 1152 72 TXC
(|) 90 1152 108 TXC
(|) 90 1152 144 TXC
(|) 90 1152 180 TXC
(|) 90 1152 216 TXC
(|) 90 1152 252 TXC
(|) 90 1152 288 TXC
(|) 90 1152 324 TXC
(|) 90 1152 360 TXC
() 0 612 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 1152 72 
L9
0 setlinecap
72 72 72 360 
L9
72 360 1152 360 
L9
1152 72 1152 360 
L9
(                        seconds) 0 1152 12 TXR
(                        reply traffic ) 90 -1.2 360 TXR
30 /Times-Bold SetTxt
( (b)) 0 612 0 TXC
() 0 612 -31.5 TXC
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
14 SetSym
initclip 
showpage
end
%%EndDocument
 @endspecial -60 x @beginspecial 55 @hoffset 30 @voffset
40 @hscale 40 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/idx3.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
0 24 Q
0 X
0 K
(global error recovery) 108 739.64 T
(hop-scoped error recovery) 108 715.64 T
(group-scoped error recovery :) 108 691.64 T
1 F
(x=33%,) 399.73 691.64 T
2 F
(d) 482.53 691.64 T
1 F
(=0%, m=10, k=3, f=6) 494.38 691.64 T
0 F
(group-scoped error recovery :) 108 667.29 T
1 F
(x=50%,) 399.73 667.29 T
2 F
(d) 482.53 667.29 T
1 F
(=0%, m=10, k=3, f=6) 494.38 667.29 T
0 F
(group-scoped error recovery :) 108 642.95 T
1 F
(x=100%,) 399.73 642.95 T
2 F
(d) 494.52 642.95 T
1 F
(=0%, m=10, k=3, f=6) 506.37 642.95 T
36 747 81 747 2 L
6 H
2 Z
5 X
N
36 722.25 81 722.25 2 L
4 X
N
36 697.5 81 697.5 2 L
3 X
N
36 672.75 81 672.75 2 L
2 X
N
36 648 81 648 2 L
1 X
N
FMENDPAGE
%%EndDocument
 @endspecial 1132 2703 a Fn(Figure)30 b(9:)41 b(Error)29
b(reco)m(v)m(ery)j(tra\016c)f(dynamics)300 2978 y(w)m(ork.)69
b(Ho)m(w)m(ev)m(er,)44 b Fk(r)1030 2992 y Fl(1)1070 2978
y Fn('s)39 b(reply)g(scop)s(e)g(in)g(hop-scop)s(ed)g(error)g(reco)m(v)m
(ery)j(almost)d(doubles)g(its)300 3091 y(reply)31 b(scop)s(e)h(in)f
(group-scop)s(ed)g(error)h(reco)m(v)m(ery)h(b)s(ecause)f(hop-scop)s(ed)
g(error)f(reco)m(v)m(ery)j(do)s(es)300 3204 y(not)i(regulate)f(the)h
(direction)e(of)h(reply)f(tra\016c.)56 b(On)35 b(the)g(other)h(hand,)g
(a)f(large)h(reply)e(scop)s(e)300 3317 y(means)28 b(the)f(reply)g(is)g
(m)m(ulticast)g(across)h(the)g(Mb)s(one.)40 b(F)-8 b(or)28
b(example,)g(mem)m(b)s(er)f Fk(s)3126 3331 y Fl(2)3165
3317 y Fn(,)i Fk(s)3262 3331 y Fl(3)3301 3317 y Fn(,)f
Fk(s)3397 3331 y Fl(4)3436 3317 y Fn(,)h Fk(p)3536 3331
y Fl(1)3575 3317 y Fn(,)300 3430 y Fk(p)346 3444 y Fl(2)420
3430 y Fn(and)35 b Fk(p)648 3444 y Fl(3)722 3430 y Fn(ha)m(v)m(e)i
(relativ)m(ely)d(large)i(reply)e(scop)s(es)h(in)f(b)s(oth)g(hop-scop)s
(ed)h(and)g(group-scop)s(ed)300 3543 y(error)23 b(reco)m(v)m(eries,)j
(whic)m(h)c(means)h(their)f(replies)f(resp)s(ond)h(to)i(requests)f
(from)g(remote)h(mem)m(b)s(ers)300 3656 y(across)30 b(the)f(Mb)s(one.)
40 b(Ho)m(w)m(ev)m(er,)32 b(resp)s(onse)c(to)i(remote)g(requesters)f
(happ)s(ens)e(rarely)-8 b(.)40 b(As)29 b(seen)300 3769
y(in)34 b(Figure)g(8.b,)i(the)g(a)m(v)m(erage)h(reply)d(scop)s(e)h(in)e
(b)s(oth)h(hop-scop)s(ed)h(and)f(group-scop)s(ed)g(error)300
3882 y(reco)m(v)m(eries)e(are)e(still)f(smaller)g(than)h(the)g(reply)f
(scop)s(e)i(in)e(global)g(error)h(reco)m(v)m(ery)-8 b(.)441
3995 y(Figure)26 b(9.a)h(and)f(9.b)h(sho)m(w)f(the)g(measured)g
(request)g(tra\016c)h(and)f(reply)f(tra\016c)i(during)d(the)300
4107 y(sim)m(ulation.)37 b(The)23 b(request)h(and)g(reply)f(tra\016c)h
(is)g(measured)f(in)g(terms)h(of)g(the)h(n)m(um)m(b)s(er)d(of)j(hops)
300 4220 y(that)e(requests)g(and)f(replies)f(tra)m(v)m(el.)39
b(The)22 b(con)m(v)m(ergence)j(p)s(erio)s(ds)c(of)i(request)f(and)h
(reply)e(scop)s(es)300 4333 y(are)j(short)g(in)e(b)s(oth)h(hop-scop)s
(ed)g(and)h(group-scop)s(ed)f(error)g(reco)m(v)m(eries.)40
b(Generally)23 b(sp)s(eaking,)300 4446 y(the)j(con)m(v)m(ergence)i
(time)d(of)h(request)f(scop)s(e)h(in)e(hop-scop)s(ed)h(error)h(reco)m
(v)m(ery)h(is)e(appro)m(ximately)300 4559 y(one)e(session)f(cycle)i
(time.)38 b(The)22 b(measuremen)m(t)i(of)f(reply)e(scop)s(e)j(in)d
(hop-scop)s(ed)i(error)f(reco)m(v)m(ery)300 4672 y(relies)42
b(on)g(the)i(results)d(from)i(other)g(mem)m(b)s(ers,)i(so)f(the)f(con)m
(v)m(ergence)i(could)d(tak)m(e)j(sev)m(eral)300 4785
y(session)26 b(cycles.)40 b(The)26 b(con)m(v)m(ergence)j(time)d(in)g
(group-scop)s(ed)g(error)g(reco)m(v)m(ery)i(dep)s(ends)d(on)i(the)300
4898 y(n)m(um)m(b)s(er)33 b(of)h(nested)g(lo)s(cal)f(groups)g(and)h
(their)f(order)g(of)h(creation.)52 b(If)34 b(the)g(innermost)e(group)
300 5011 y(is)f(created)j(\014rst,)e(the)h(con)m(v)m(ergence)i(p)s
(erio)s(d)30 b(is)h(shorter.)47 b(On)31 b(the)i(other)f(hand,)h(if)e
(the)h(group)300 5124 y(with)26 b(the)h(largest)g(scop)s(e)g(is)f
(created)i(\014rst,)f(this)f(group)g(has)h(to)g(b)s(e)g(shrunk)d(b)s
(efore)j(the)g(second)300 5237 y(nested)39 b(group)f(can)h(b)s(e)g
(created.)67 b(Therefore,)41 b(it)d(tak)m(es)j(a)e(longer)g(time)f(to)i
(con)m(v)m(erge.)68 b(F)-8 b(or)1905 5506 y(19)p eop
%%Page: 20 20
20 19 bop 300 1357 a @beginspecial 20 @hoffset 30 @voffset
30 @hscale 30 @vscale @setspecial
%%BeginDocument: Figure/randomx5.ps
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

/SS9 { pop pop pop } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def



% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
95.4 324 ms
[] 2.600000 SL
147.6 324 ns
183.6 324 ns
257.4 324 ns
313.2 324 ns
367.2 324 ns
421.2 324 ns
475.2 324 ns
532.8 324 ns
588.6 324 ns
610.2 324 ns
612 324 ns
664.2 324 ns
720 324 ns
774 324 ns
826.2 324 ns
882 324 ns
936 324 ns
990 324 ns
1044 324 ns
1098 324 ns
1150.2 324 ns
nsend
0.900000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
147.6 201.046 ns
201.6 144 ns
257.4 144 ns
315 144 ns
374.4 144 ns
448.2 144 ns
509.4 144 ns
563.4 144 ns
608.4 144 ns
612 324 ns
664.2 199.714 ns
720 144 ns
774 144 ns
826.2 144 ns
878.4 144 ns
927 144 ns
990 144 ns
1044 144 ns
1098 144 ns
1150.2 144 ns
nsend
0.700000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
147.6 256.275 ns
201.6 193.886 ns
248.4 144 ns
324 172.421 ns
376.2 183.857 ns
432 183.325 ns
480.6 204.923 ns
538.2 201.411 ns
594 153.771 ns
610.2 122.4 ns
612 324 ns
664.2 228.6 ns
720 172.582 ns
772.2 184.267 ns
826.2 181.107 ns
882 179.775 ns
936 203.4 ns
997.2 153.771 ns
1054.8 179.025 ns
1108.8 178.539 ns
1150.2 187.884 ns
nsend
0.500000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
147.6 227.36 ns
201.6 183.6 ns
264.6 151.2 ns
318.6 138.96 ns
367.2 138.857 ns
430.2 158.88 ns
482.4 141 ns
543.6 138.462 ns
603 142.5 ns
612 324 ns
658.8 245.01 ns
720 127.84 ns
774 137.571 ns
826.2 190.232 ns
882 153.675 ns
925.2 138 ns
990 134.229 ns
1042.2 141.408 ns
1098 161.958 ns
1150.2 184.543 ns
nsend
0.300000 G9 D9 0.0 G9
95.4 324 ms
[] 2.600000 SL
147.6 149.322 ns
203.4 117.864 ns
257.4 126.4 ns
311.4 123.685 ns
363.6 120.96 ns
421.2 127.8 ns
475.2 122.4 ns
534.6 128.753 ns
590.4 173.1 ns
603 120.6 ns
612 223.2 ns
644.4 149.4 ns
711 124.8 ns
772.2 113.294 ns
826.2 108 ns
882 159.222 ns
936 133.171 ns
990 133.718 ns
1042.2 126.144 ns
1098 146.2 ns
1150.2 133.584 ns
nsend
0.100000 G9 D9 0.0 G9
initclip 
24 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(0) 0 72 43.2 TXC
(|) 0 252 72 TXC
(100) 0 252 43.2 TXC
(|) 0 432 72 TXC
(200) 0 432 43.2 TXC
(|) 0 612 72 TXC
(300) 0 612 43.2 TXC
(|) 0 792 72 TXC
(400) 0 792 43.2 TXC
(|) 0 972 72 TXC
(500) 0 972 43.2 TXC
(|) 0 1152 72 TXC
(600) 0 1152 43.2 TXC
(|) -90 72 72 TXC
(0) 0 60 64.8 TXR
(|) -90 72 108 TXC
(5) 0 60 100.8 TXR
(|) -90 72 144 TXC
(10) 0 60 136.8 TXR
(|) -90 72 180 TXC
(15) 0 60 172.8 TXR
(|) -90 72 216 TXC
(20) 0 60 208.8 TXR
(|) -90 72 252 TXC
(25) 0 60 244.8 TXR
(|) -90 72 288 TXC
(30) 0 60 280.8 TXR
(|) -90 72 324 TXC
(35) 0 60 316.8 TXR
(|) -90 72 360 TXC
(40) 0 60 352.8 TXR
(|) 180 72 360 TXC
(|) 180 252 360 TXC
(|) 180 432 360 TXC
(|) 180 612 360 TXC
(|) 180 792 360 TXC
(|) 180 972 360 TXC
(|) 180 1152 360 TXC
(|) 90 1152 72 TXC
(|) 90 1152 108 TXC
(|) 90 1152 144 TXC
(|) 90 1152 180 TXC
(|) 90 1152 216 TXC
(|) 90 1152 252 TXC
(|) 90 1152 288 TXC
(|) 90 1152 324 TXC
(|) 90 1152 360 TXC
() 0 612 -33.6 TXC
[] 6.800000 SL
2 setlinecap
72 72 1152 72 
L9
0 setlinecap
72 72 72 360 
L9
72 360 1152 360 
L9
1152 72 1152 360 
L9
(                        seconds) 0 1152 12 TXR
(                        request traffic ) 90 -1.2 360 TXR
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 1152.000000 72.000000 1152.000000 360.000000 72.000000 
360.000000 newpath moveto lineto lineto lineto closepath clip
14 SetSym
initclip 
showpage
end
%%EndDocument
 @endspecial -120 x @beginspecial 55 @hoffset 30 @voffset
40 @hscale 40 @vscale 270 @angle @setspecial
%%BeginDocument: Figure/idx3.ps
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
(3.0) FMVERSION
1 1  2 2  0 1 3 FMDOCUMENT
0 0 /Times-Roman FMFONTDEFINE
1 0 /Times-Italic FMFONTDEFINE
2 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
0 24 Q
0 X
0 K
(global error recovery) 108 739.64 T
(hop-scoped error recovery) 108 715.64 T
(group-scoped error recovery :) 108 691.64 T
1 F
(x=33%,) 399.73 691.64 T
2 F
(d) 482.53 691.64 T
1 F
(=0%, m=10, k=3, f=6) 494.38 691.64 T
0 F
(group-scoped error recovery :) 108 667.29 T
1 F
(x=50%,) 399.73 667.29 T
2 F
(d) 482.53 667.29 T
1 F
(=0%, m=10, k=3, f=6) 494.38 667.29 T
0 F
(group-scoped error recovery :) 108 642.95 T
1 F
(x=100%,) 399.73 642.95 T
2 F
(d) 494.52 642.95 T
1 F
(=0%, m=10, k=3, f=6) 506.37 642.95 T
36 747 81 747 2 L
6 H
2 Z
5 X
N
36 722.25 81 722.25 2 L
4 X
N
36 697.5 81 697.5 2 L
3 X
N
36 672.75 81 672.75 2 L
2 X
N
36 648 81 648 2 L
1 X
N
FMENDPAGE
%%EndDocument
 @endspecial 326 1658 a Fn(Figure)30 b(10:)41 b(Request)31
b(tra\016c)g(dynamics)e(of)h(mem)m(b)s(er)g Fk(r)2275
1672 y Fl(7)2345 1658 y Fn(\()p Fk(r)2421 1672 y Fl(7)2461
1658 y Fn('s)g(state)i(is)d(reset)i(at)g(time)f(300\))300
1938 y(example,)e(if)e(there)i(are)g Fk(n)f Fn(nested)g(groups.)40
b(The)27 b(a)m(v)m(erage)j(w)m(aiting)c(time)i(to)g(prop)s(ose)f(a)g
(group)300 2051 y(creation)d(is)e Fk(t)759 2065 y Fl(1)822
2051 y Fn(and)h(the)g(a)m(v)m(erage)j(shrinking)21 b(time)i(is)f
Fk(t)2168 2065 y Fl(2)2207 2051 y Fn(.)39 b(In)22 b(the)i(w)m(orst)g
(case,)i(the)e(con)m(v)m(ergence)300 2164 y(time)k(is)g(appro)m
(ximately)f Fk(n)16 b Fj(\001)h Fn(\()p Fk(t)1372 2178
y Fl(1)1427 2164 y Fn(+)f Fk(t)1547 2178 y Fl(2)1587
2164 y Fn(\).)40 b(The)28 b(shrinking)d(time)j(is)g(a)g(function)g(of)g
(the)h(p)s(erio)s(d)d(of)300 2277 y(a)31 b(loss)e(sharing)g(measuremen)
m(t.)441 2390 y(T)-8 b(o)32 b(further)d(understand)h(the)h(b)s(eha)m
(vior)f(of)h(con)m(v)m(ergence)i(time)e(of)g(a)h(new)e(mem)m(b)s(er)h
(join-)300 2503 y(ing)i(an)h(ongoing)g(session,)g(w)m(e)h(man)m(ually)e
(reset)h(the)g(state)i(of)e(mem)m(b)s(er)f Fk(r)2900
2517 y Fl(7)2974 2503 y Fn(during)f(the)i(next)300 2616
y(sim)m(ulation.)62 b(The)37 b(measured)h(request)g(tra\016c)g(of)g
Fk(r)2154 2630 y Fl(7)2232 2616 y Fn(during)e(the)i(sim)m(ulation)e(is)
h(sho)m(wn)g(in)300 2729 y(Figure)32 b(10.)49 b Fk(r)794
2743 y Fl(7)866 2729 y Fn(starts)33 b(with)f(global)g(error)g(reco)m(v)
m(ery)j(after)e(its)f(state)i(is)e(reset)h(at)h(sim)m(ulation)300
2842 y(time)39 b(300)h(seconds.)67 b(Ho)m(w)m(ev)m(er,)44
b Fk(r)1526 2856 y Fl(7)1604 2842 y Fn(will)37 b(calculate)i(its)g
(request)g(hop)f(coun)m(t)i(based)f(on)g(the)300 2955
y(incoming)24 b(session)h(messages)i(in)e(hop-scop)s(ed)g(error)g(reco)
m(v)m(ery)j(or)e(learn)f(of)h(the)g(existing)f(lo)s(cal)300
3068 y(groups)h(in)f(group-scop)s(ed)h(error)g(reco)m(v)m(ery)i(to)f
(restore)g(its)f(state,)j(therefore,)f(its)e(request)h(traf-)300
3180 y(\014c)g(is)f(reduced.)39 b(Note)29 b(that)f(the)f(request)g
(tra\016c)h(in)e(group-scop)s(ed)h(error)g(reco)m(v)m(ery)h(oscillates)
300 3293 y(b)s(ecause)k(the)g(request)h(scop)s(e,)g(the)f(scop)s(e)g
(of)g(the)h(lo)s(cal)e(group)h(to)h(whic)m(h)e(requests)h(are)g(sen)m
(t,)300 3406 y(is)j(dynamically)g(adjusted)g(based)h(on)h(observ)m(ed)f
(loss)g(patterns.)59 b(On)35 b(the)i(other)g(hand,)g(the)300
3519 y(request)d(tra\016c)h(in)d(hop-scop)s(ed)i(error)f(reco)m(v)m
(ery)j(is)d(fairly)f(stable)i(as)g(long)g(as)g(the)h(top)s(ology)300
3632 y(remains)29 b(unc)m(hanged.)441 3745 y(F)-8 b(rom)23
b(the)f(sim)m(ulations,)g(w)m(e)g(found)f(that)i(group-scop)s(ed)e
(error)h(reco)m(v)m(ery)h(p)s(erforms)e(b)s(etter)300
3858 y(than)34 b(hop-scop)s(ed)g(error)f(reco)m(v)m(ery)j(in)d(terms)h
(of)h(the)f(reply)f(tra\016c.)53 b(Ho)m(w)m(ev)m(er,)38
b(hop-scop)s(ed)300 3971 y(error)k(reco)m(v)m(ery)i(p)s(erforms)c(b)s
(etter)j(than)f(group-scop)s(ed)f(error)h(reco)m(v)m(ery)i(in)d(terms)h
(of)h(the)300 4084 y(request)36 b(tra\016c,)i(except)f(in)e(the)h(star)
g(top)s(ology)-8 b(.)58 b(Since)35 b(the)h(size)g(of)g(a)h(request)f
(message)h(is)300 4197 y(m)m(uc)m(h)d(smaller)e(than)i(the)g(size)g(of)
g(a)g(reply)f(message,)j(it)d(is)g(more)h(imp)s(ortan)m(t)f(to)i
(reduce)f(the)300 4310 y(reply)k(tra\016c)i(than)f(to)h(reduce)f(the)g
(request)g(tra\016c.)68 b(Therefore,)42 b(in)37 b(terms)j(of)f(the)g
(tra\016c)300 4422 y(reduction,)i(group-scop)s(ed)f(error)f(reco)m(v)m
(ery)j(app)s(ears)d(to)i(pro)m(vide)e(a)h(b)s(etter)g(solution.)68
b(On)300 4535 y(the)37 b(other)h(hand,)g(if)e(w)m(e)h(consider)f(other)
i(sources)f(of)g(o)m(v)m(erhead)h(in)m(tro)s(duced)e(b)m(y)h(these)h(t)
m(w)m(o)300 4648 y(approac)m(hes,)31 b(it)f(app)s(ears)g(that)g
(group-scop)s(ed)g(error)g(reco)m(v)m(ery)i(imp)s(oses)d(more)i(o)m(v)m
(erhead)g(on)300 4761 y(session)e(mem)m(b)s(ers)984 4728
y Fl(13)1089 4761 y Fn(as)i(w)m(ell)e(as)i(the)f(underlying)e(m)m
(ulticast)i(routing.)p 300 4840 1320 4 v 373 4894 a Fi(13)438
4926 y Fh(Group-scop)r(ed)d(error)h(reco)n(v)n(ery)e(requires)h(the)g
(host)g(to)g(send)f(p)r(erio)r(dic)i(IGMP)g(messages)g(to)f(refresh)g
(the)300 5017 y(m)n(ulticast)e(deliv)n(ery)h(path)f(for)h(eac)n(h)g(lo)
r(cal)h(group.)1905 5506 y Fn(20)p eop
%%Page: 21 21
21 20 bop 300 249 a Fo(6)135 b(Related)46 b(W)-11 b(orks)300
451 y Fn(There)20 b(ha)m(v)m(e)i(b)s(een)d(sev)m(eral)i(other)g
(treatmen)m(t)h(of)f(error)f(reco)m(v)m(ery)i(for)e(reliable)f(m)m
(ulticast)h(trans-)300 564 y(p)s(ort.)42 b(In)30 b(con)m(trast)j(to)e
(our)g(prop)s(osal)e(whic)m(h)h(assumes)h(session)f(mem)m(b)s(ers)g
(are)h(autonomous,)300 677 y(these)41 b(previous)f(w)m(orks)h(require)e
(v)-5 b(arious)40 b(degree)i(of)f(static)h(con\014guration)e(or)h(cen)m
(tralized)300 790 y(co)s(ordination.)441 903 y(Hofmann)c([6,)h(7])f
(prop)s(osed)f(a)h(\\lo)s(cal)g(group)f(concept".)62
b(A)38 b(session)e(is)g(split)f(in)m(to)i(sub-)300 1016
y(groups)44 b(and)f(eac)m(h)j(subgroup)c(com)m(bines)i(mem)m(b)s(ers)g
(in)f(a)h(lo)s(cal)g(region.)82 b(A)44 b(subgroup)f(is)300
1129 y(represen)m(ted)f(b)m(y)g(a)h(lo)s(cal)e(group)g(con)m(troller)h
(whic)m(h)f(supp)s(orts)f(lo)s(cal)i(loss)f(retransmission.)300
1242 y(The)29 b(establishmen)m(t)f(of)h(lo)s(cal)g(groups)f(is)h(supp)s
(orted)e(b)m(y)i(a)h(comm)m(unication)f(service,)g(named)300
1355 y Fm(Gr)-5 b(oup)40 b(Distanc)-5 b(e)39 b(Servic)-5
b(e)p Fn(.)59 b(A)36 b(mem)m(b)s(er)g(searc)m(hes)i(and)e(joins)f(the)i
(closest)g(lo)s(cal)f(group.)58 b(If)300 1468 y(no)33
b(suitable)e(group)i(exists,)g(the)g(mem)m(b)s(er)g(will)d(establish)h
(a)j(new)e(lo)s(cal)g(group)h(and)f(app)s(oin)m(t)300
1581 y(itself)d(as)i(the)f(con)m(troller.)441 1693 y(Kasera)44
b Fm(et)h(al.)80 b Fn([8)q(])44 b(examined)f(the)g(approac)m(h)h(of)g
(using)e(separate)i(m)m(ulticast)g(groups)300 1806 y(to)37
b(reco)m(v)m(er)g(individual)31 b(losses)36 b(in)e(reliable)g(m)m
(ulticast)h(comm)m(unication.)57 b(Lost)36 b(pac)m(k)m(ets)i(are)300
1919 y(categorized)27 b(in)m(to)f(groups,)h(the)f(retransmission)d(of)j
(a)g(lost)g(pac)m(k)m(et)i(is)d(m)m(ulticast)g(to)h(the)g(group)300
2032 y(it)32 b(b)s(elongs)g(to.)49 b(Receiv)m(ers)34
b(dynamically)d(join)g(and)i(lea)m(v)m(e)h(those)f(groups)g(to)g(reco)m
(v)m(er)i(pac)m(k)m(et)300 2145 y(losses.)441 2258 y(TMTP)i([9)q(])h
(groups)e(session)h(mem)m(b)s(ers)g(in)m(to)g(domains)f(and)h
(organizes)h(these)g(domains)300 2371 y(in)m(to)31 b(a)h(hierarc)m(hic)
f(con)m(trol)h(tree)g(to)g(impro)m(v)m(e)f(the)h(scalabilit)m(y)e(of)i
(error)f(reco)m(v)m(ery)-8 b(.)46 b(Mem)m(b)s(ers)300
2484 y(in)36 b(a)i(domain)e(request)i(the)f(domain)g(manager)h(for)f
(retransmission.)60 b(A)37 b(domain)f(manager)300 2597
y(is)i(also)h(resp)s(onsible)d(for)i(error)h(reco)m(v)m(ery)h(of)f(its)
f(c)m(hildren)f(managers)i(in)f(the)h(con)m(trol)g(tree.)300
2710 y(The)33 b(scop)s(e)h(of)g(retransmission)d(is)i(restricted)g(b)m
(y)g(using)f(the)i(TTL)f(\014eld.)49 b(The)33 b(con)m(trol)h(tree)300
2823 y(is)28 b(self-organized,)h(and)f(it)h(is)f(built)e(dynamically)h
(as)i(domain)f(managers)h(join)f(and)g(lea)m(v)m(e)j(the)300
2935 y(session.)441 3048 y(Holbro)s(ok)38 b Fm(et)j(al.)66
b Fn([10)q(])39 b(suggested)h(a)f(hierarc)m(hic)f(logging)g(serv)m(er)h
(structure)g(to)g(reduce)300 3161 y(error)21 b(reco)m(v)m(ery)i
(tra\016c)f(in)e(a)i(m)m(ulticast)f(session.)37 b(The)21
b(distribution)d(and)j(hierarc)m(h)m(y)g(of)g(logging)300
3274 y(serv)m(ers)38 b(is)f(statically)h(con\014gured.)64
b(Receiv)m(ers)38 b(con)m(tact)j(their)c(lo)s(cal)g(secondary)i(serv)m
(er)f(for)300 3387 y(retransmission)28 b(instead)i(of)h(the)g(remote)h
(primary)d(serv)m(ers)i(to)g(a)m(v)m(oid)g(NAK)g(implosion,)e(and)300
3500 y(to)g(minimize)c(reco)m(v)m(ery)30 b(latency)e(and)g(bandwidth.)
37 b(A)28 b(serv)m(er)g(either)f(unicasts)h(or)f(m)m(ulticasts)300
3613 y(a)k(retransmission)d(based)i(on)g(the)h(n)m(um)m(b)s(er)e(of)h
(requests)h(it)e(receiv)m(es.)441 3726 y(RMTP)d([11)q(,)g(12)q(])g
(adopts)h(a)f(similar)d(hierarc)m(hic)i(structure)h(to)h(a)m(v)m(oid)f
(message)h(implosion.)300 3839 y(A)d(set)g(of)f(designated)g(receiv)m
(ers)h(\(DR\))h(is)d(selected)i(statically)f(in)f(a)i(session.)38
b(DRs)23 b(are)h(capable)300 3952 y(of)34 b(retransmitting)e(lost)i
(data.)52 b(Ho)m(w)m(ev)m(er,)37 b(the)d(hierarc)m(h)m(y)f(of)h(DRs)g
(is)f(constructed)h(dynam-)300 4065 y(ically)-8 b(.)74
b(Eac)m(h)42 b(receiv)m(er)g(selects)g(its)f(least)h(upstream)f(DR)h
(as)g(the)g(A)m(CK)g(pro)s(cessor)f(\(AP\),)300 4177
y(and)34 b(p)s(erio)s(dically)d(sends)i(its)h(receiving)g(state)i(to)f
(the)g(AP)f(to)i(request)e(retransmissions.)51 b(A)300
4290 y(retransmission)28 b(is)h(either)h(unicast)g(or)g(m)m(ulticast)g
(based)g(on)h(the)f(n)m(um)m(b)s(er)f(of)i(requests.)300
4577 y Fo(7)135 b(Conclusion)300 4780 y Fn(W)-8 b(e)37
b(prop)s(osed)e(t)m(w)m(o)i(di\013eren)m(t)f(approac)m(hes)g(to)h
(reduce)f(error)g(reco)m(v)m(ery)h(tra\016c)g(in)e(SRM.)h(In)300
4893 y(hop-scop)s(ed)c(error)g(reco)m(v)m(ery)-8 b(,)36
b(mem)m(b)s(ers)c(calculate)h(the)g(required)d(hop)i(coun)m(ts)i(for)e
(their)g(re-)300 5006 y(quests)41 b(and)g(replies)f(based)h(on)h
(distance)f(information)f(exc)m(hanged)j(in)d(session)h(messages.)300
5118 y(Since)c(the)h(information)e(is)h(piggybac)m(k)m(ed)h(on)g(their)
f(session)g(messages,)k(the)d(o)m(v)m(erhead)h(im-)300
5231 y(p)s(osed)33 b(b)m(y)h(hop-scop)s(ed)g(error)f(reco)m(v)m(ery)j
(is)d(relativ)m(ely)g(small.)51 b(Ho)m(w)m(ev)m(er,)37
b(hop-scop)s(ed)c(error)1905 5506 y(21)p eop
%%Page: 22 22
22 21 bop 300 249 a Fn(reco)m(v)m(ery)44 b(do)s(es)d(not)i(regulate)f
(tra\016c)g(direction.)75 b(If)41 b(the)h(top)s(ology)h(of)f(a)g
(session)f(is)g(star-)300 361 y(shap)s(ed,)31 b(hop-scop)s(ed)h(error)f
(reco)m(v)m(ery)j(do)s(es)e(not)g(p)s(erform)e(m)m(uc)m(h)i(b)s(etter)g
(than)g(global)f(error)300 474 y(reco)m(v)m(ery)-8 b(.)441
587 y(Group-scop)s(ed)30 b(error)f(reco)m(v)m(ery)j(b)s(ounds)c(the)i
(scop)s(e)g(of)g(error)g(reco)m(v)m(ery)i(tra\016c)e(b)m(y)g(using)300
700 y(separate)35 b(m)m(ulticast)f(groups.)53 b(Mem)m(b)s(ers)34
b(that)h(share)f(the)h(same)g(losses)f(join)f(a)i(lo)s(cal)e(group)300
813 y(for)c(error)f(reco)m(v)m(ery)-8 b(,)31 b(th)m(us)e(the)g(error)f
(reco)m(v)m(ery)j(tra\016c)e(is)f(only)g(distributed)d(within)i(the)i
(lo)s(cal)300 926 y(group.)46 b(Group-scop)s(ed)31 b(error)h(reco)m(v)m
(ery)i(requires)d(individual)c(mem)m(b)s(ers)32 b(to)h(main)m(tain)e(m)
m(ul-)300 1039 y(tiple)h(lo)s(cal)g(groups.)48 b(Therefore,)34
b(more)f(o)m(v)m(erhead)h(is)e(imp)s(osed)f(on)i(mem)m(b)s(ers)g(as)g
(w)m(ell)f(as)h(on)300 1152 y(the)e(underlying)c(m)m(ulticast)j
(routing.)441 1265 y(There)k(remain)g(sev)m(eral)g(op)s(en)g(issues.)52
b(In)34 b(hop-scop)s(ed)g(error)g(reco)m(v)m(ery)-8 b(,)38
b(main)m(taining)33 b(a)300 1378 y(pair)24 b(of)h(request)g(and)g
(reply)f(hop)g(coun)m(ts)i(for)f(individual)20 b(sources)25
b(do)s(es)g(not)h(in)m(tro)s(duce)e(signif-)300 1491
y(ican)m(t)35 b(o)m(v)m(erhead.)55 b(Ho)m(w)m(ev)m(er,)39
b(main)m(taining)32 b(m)m(ultiple)h(lo)s(cal)h(groups)g(for)h
(individual)30 b(sources)300 1603 y(in)25 b(group-scop)s(ed)h(error)g
(reco)m(v)m(ery)i(ma)m(y)f(not)g(b)s(e)e(acceptable.)41
b(F)-8 b(urther)26 b(researc)m(h)h(should)d(lo)s(ok)300
1716 y(in)m(to)k(group)g(aggregation)h(across)g(sources.)40
b(A)28 b(lo)s(cal)f(group)h(is)f(asso)s(ciated)i(with)d(one)j(or)f
(more)300 1829 y(lossy)c(links.)37 b(Sources)24 b(who)g(share)g(the)h
(same)g(deliv)m(ery)e(path)i(and)f(the)h(same)g(lossy)f(links)e(along)
300 1942 y(the)29 b(path)h(should)d(b)s(e)h(considered)h(the)g(same)h
(in)e(terms)h(of)g(error)g(reco)m(v)m(ery)-8 b(.)43 b(Therefore,)29
b(error)300 2055 y(reco)m(v)m(ery)j(of)f(losses)f(from)g(these)g
(sources)h(should)d(b)s(e)i(handled)e(b)m(y)j(a)f(single)f(lo)s(cal)h
(group.)441 2168 y(Another)k(scenario)f(that)h(w)m(e)g(ha)m(v)m(e)h
(not)f(fully)d(understo)s(o)s(d)g(is)i(the)h(con)m(v)m(ergence)i(time)d
(of)300 2281 y(group-scop)s(ed)20 b(error)h(reco)m(v)m(ery)i(in)d(the)h
(presence)g(of)g(net)m(w)m(ork)h(dynamics.)36 b(F)-8
b(or)22 b(example,)h(if)d(the)300 2394 y(net)m(w)m(ork)35
b(top)s(ology)f(c)m(hanges,)h(mem)m(b)s(ers)e(in)g(a)h(lo)s(cal)f
(group)g(do)g(not)h(share)g(losses)f(an)m(ymore.)300
2507 y(Therefore,)43 b(mem)m(b)s(ers)c(ha)m(v)m(e)j(to)f(readjust)e
(themselv)m(es)i(so)f(that)h(the)g(new)e(mem)m(b)s(ership)f(in)300
2620 y(the)g(lo)s(cal)f(group)g(represen)m(ts)h(a)g(set)h(of)f(mem)m(b)
s(ers)f(who)g(share)h(the)g(same)g(losses.)63 b(Another)300
2733 y(example)37 b(of)g(net)m(w)m(ork)g(dynamics)f(is)g(tra\016c)h
(congestion.)61 b(Data)39 b(losses)d(due)h(to)g(congestion)300
2845 y(c)m(hanges)42 b(the)f(error)f(rates)i(and)e(the)h(lo)s(cations)g
(of)g(lossy)f(links)f(in)g(a)i(session.)72 b(Since)40
b(lo)s(cal)300 2958 y(groups)31 b(are)g(asso)s(ciated)h(with)e(lossy)h
(links,)e(c)m(hanges)k(in)d(error)h(rates)h(and)e(lo)s(cations)h(of)h
(lossy)300 3071 y(links)22 b(a\013ect)27 b(the)e(loss)f(sharing)f(b)s
(eha)m(vior)h(within)e(lo)s(cal)i(groups.)38 b(The)24
b(mem)m(b)s(ership)e(in)i(a)h(lo)s(cal)300 3184 y(group)36
b(has)h(to)g(b)s(e)f(readjusted)g(in)f(order)i(to)g(adapt)g(to)g(these)
g(c)m(hanges.)61 b(The)36 b(study)g(of)h(the)300 3297
y(con)m(v)m(ergence)29 b(time)e(of)g(mem)m(b)s(ership)d(readjustmen)m
(t)j(can)g(help)e(us)h(to)i(b)s(etter)f(understand)e(the)300
3410 y(tolerance)31 b(to)g(net)m(w)m(ork)g(dynamics)e(of)i(group-scop)s
(ed)f(error)g(reco)m(v)m(ery)-8 b(.)441 3523 y(Finally)g(,)43
b(one)f(migh)m(t)f(consider)f(com)m(bining)g(these)i(t)m(w)m(o)h
(approac)m(hes)f(b)m(y)f(using)f(a)i(hop-)300 3636 y(scop)s(e)32
b(on)f(the)h(request)f(messages)i(sen)m(t)f(to)g(lo)s(cal)f(groups)f
(since)h(hop-scop)s(ed)g(error)g(reco)m(v)m(ery)300 3749
y(pro)s(duces)g(b)s(etter)i(tra\016c)f(reduction)g(in)f(terms)h(of)h
(the)f(request)h(tra\016c.)47 b(In)32 b(our)g(hop-scop)s(ed)300
3862 y(sc)m(heme)e(requests)f(are)g(addressed)f(to)h(the)h(global)e
(session)g(group)g(with)g(a)h(sp)s(eci\014c)f(hop)g(coun)m(t)300
3975 y(and)36 b(that)i(hop)e(coun)m(t)h(is)f(determined)f(b)m(y)i(exc)m
(hanging)g(session)f(messages)i(and)e(measuring)300 4087
y(ho)m(w)d(far)f(is)g(the)h(closest)g(upstream)f(neigh)m(b)s(or.)46
b(Ho)m(w)m(ev)m(er,)35 b(if)d(a)h(hop-scop)s(ed)f(request)h(is)e(sen)m
(t)300 4200 y(to)25 b(a)g(lo)s(cal)f(group,)h(it)g(can)f(only)g(guaran)
m(tee)i(a)f(resp)s(onse)f(if)f(the)i(requester)f(kno)m(ws)h(b)s(oth)f
(ho)m(w)g(to)300 4313 y(set)33 b(the)f(hop)f(coun)m(t)i(and)e(ho)m(w)h
(to)h(c)m(ho)s(ose)g(the)f(appropriate)f(lo)s(cal)h(group.)45
b(Our)31 b(hop-scop)s(ed)300 4426 y(error)j(reco)m(v)m(ery)h(only)e
(pro)m(vides)g(the)i(former)e(information.)50 b(The)34
b(requester)g(w)m(ould)f(analyze)300 4539 y(session)23
b(messages,)j(determine)d(an)g(appropriate)g(hop)g(coun)m(t,)j(but)d
(then)g(the)h(target)i(upstream)300 4652 y(neigh)m(b)s(or)h(migh)m(t)i
(not)g(b)s(e)f(a)h(mem)m(b)s(er)f(of)h(that)g(lo)s(cal)g(group.)39
b(More)30 b(researc)m(h)f(has)g(to)g(b)s(e)f(done)300
4765 y(to)e(ensure)e(that)h(either)f(the)h(closest)g(upstream)g(neigh)m
(b)s(or)e(joins)h(the)g(same)i(lo)s(cal)e(group)g(or)h(the)300
4878 y(requester)31 b(only)e(considers)h(mem)m(b)s(ers)f(in)h(the)g
(same)h(lo)s(cal)f(group)g(in)f(computing)h(its)g(request)300
4991 y(hop)g(coun)m(t.)1905 5506 y(22)p eop
%%Page: 23 23
23 22 bop 300 249 a Fo(References)345 451 y Fn([1])47
b(Sally)25 b(Flo)m(yd,)k(V)-8 b(an)27 b(Jacobson,)i(Ching-Gung)c(Liu,)i
(Stev)m(e)h(McCanne)g(and)e(Lixia)g(Zhang.)487 564 y(\\A)50
b(Reliable)e(Multicast)h(F)-8 b(ramew)m(ork)50 b(for)g(Ligh)m(t)m(w)m
(eigh)m(t)g(Session)e(and)h(Application)487 677 y(La)m(y)m(er)31
b(F)-8 b(raming".)31 b Fm(IEEE/A)n(CM)g(T)-7 b(r)i(ansactions)35
b(on)e(Networking)p Fn(.)e(1996.)345 865 y([2])47 b(Sridhar)36
b(Pingali,)k(Don)g(T)-8 b(o)m(wsley)39 b(and)f(James)i(Kurose.)f(\\A)g
(Comparison)f(of)h(sender-)487 978 y(initiated)j(and)h(Receiv)m
(er-Initiated)g(Reliable)f(Multicast)h(Proto)s(cols.)h
Fm(Pr)-5 b(o)g(c)g(e)g(e)g(dings)47 b(of)487 1091 y(A)n(CM)31
b(SIGMETRICS)i('94,)g(Pages)g(221-230)p Fn(.)g(1994.)345
1278 y([3])47 b(D.)38 b(Clark)f(and)g(D.T)-8 b(ennenhouse.)38
b(\\Arc)m(hitectural)g(Considerations)e(for)h(a)h(New)g(Gen-)487
1391 y(eration)44 b(of)h(Proto)s(cols".)h Fm(Pr)-5 b(o)g(c)g(e)g(e)g
(dings)47 b(of)f(A)n(CM)f(SIGCOMM)f('90,)50 b(Pages)45
b(201-208)p Fn(.)487 1504 y(Septem)m(b)s(er)30 b(1990.)345
1692 y([4])47 b(D.)23 b(Clark,)g(M.)f(Lam)m(b)s(ert)g(and)g(L.)g
(Zhang.)g(\\NETBL)-8 b(T:)23 b(A)f(High)g(Throughput)e(T)-8
b(ransp)s(ort)487 1805 y(Proto)s(col".)31 b Fm(Pr)-5
b(o)g(c)g(e)g(e)g(dings)35 b(of)e(A)n(CM)e(SIGCOMM)h('87,)h(Pages)g
(353-359)p Fn(.)f(August)f(1987.)345 1992 y([5])47 b(Ching-Gung)25
b(Liu.)g(\\A)i(Scalable)e(Reliable)g(Multicast)h(Proto)s(col".)h
Fm(Ph.D.)i(Dissertation)487 2105 y(Pr)-5 b(op)g(osal,)35
b(University)e(of)g(Southern)g(California)p Fn(.)g(No)m(v)m(em)m(b)s
(er)e(1995.)345 2293 y([6])47 b(Markus)30 b(Hofmann.)f(\\A)i(Generic)f
(Concept)g(for)g(Large)h(Scale)f(Multicast")g Fm(Pr)-5
b(o)g(c)g(e)g(e)g(dings)487 2406 y(of)30 b(International)i(Zurich)d
(Seminar)i(on)f(Digital)f(Communic)-5 b(ation)32 b(\(IZS'96\),)f
(Springer)487 2519 y(V)-7 b(erlag)p Fn(.)31 b(F)-8 b(ebruary)30
b(1996.)345 2706 y([7])47 b(Markus)27 b(Hofmann.)g(\\Adding)e
(Scalabilit)m(y)h(to)h(T)-8 b(ransp)s(ort)26 b(Lev)m(el)i(Multicast".)f
Fm(Pr)-5 b(o)g(c)g(e)g(e)g(d-)487 2819 y(ings)46 b(of)g("Thir)-5
b(d)47 b(COST)f(237)h(Workshop)h(-)d(Multime)-5 b(dia)47
b(T)-7 b(ele)i(c)g(ommunic)g(ations)49 b(and)487 2932
y(Applic)-5 b(ations")34 b(\(Springer)g(V)-7 b(erlag\),)33
b(Bar)-5 b(c)g(elona,)34 b(Sp)-5 b(ain)p Fn(.)32 b(No)m(v)m(em)m(b)s
(er)g(1996.)345 3120 y([8])47 b(Sneha)21 b(Kasera,)i(Jim)d(Kurose)h
(and)g(Don)h(T)-8 b(o)m(wsley)g(.)22 b(\\Scalable)f(Reliable)f
(Multicast)h(Using)487 3233 y(Multiple)41 b(Multicast)i(Groups",)k
Fm(CMPSCI)d(T)-7 b(e)i(chnic)g(al)46 b(R)-5 b(ep)g(ort)47
b(TR)e(96-73)p Fn(.)g(Octob)s(er)487 3346 y(1996.)345
3533 y([9])i(R.)37 b(Y)-8 b(a)m(v)j(atk)g(ar,)40 b(J.)d(Gri\016o)s(en)e
(and)h(M.)h(Sudan.)f(\\A)h(Reliable)e(Dissemination)g(Proto)s(col)487
3646 y(for)41 b(In)m(teractiv)m(e)i(Collab)s(orativ)m(e)e
(Applications".)f Fm(Pr)-5 b(o)g(c)g(e)g(e)g(dings)45
b(of)e(A)n(CM)f(Multime)-5 b(dia)487 3759 y(95)p Fn(.)31
b(1995.)300 3947 y([10])47 b(Hugh)36 b(W.)g(Holbro)s(ok,)i(Sandeep)d
(K.)h(Singhal)e(and)h(Da)m(vid)i(R.)f(Cheriton.)f(\\Log-Based)487
4060 y(Receiv)m(er-Reliable)k(Multicast)h(for)g(Distributed)e(In)m
(teractiv)m(e)j(Sim)m(ulation".)d Fm(Pr)-5 b(o)g(c)g(e)g(e)g(d-)487
4172 y(ings)32 b(of)h(A)n(CM)f(SIGCOMM)f('95)p Fn(.)h(August)e(1995.)
300 4360 y([11])47 b(John)20 b(C.)h(Lin)e(and)i(Sanjo)m(y)g(P)m(aul.)f
(\\MTP:)i(A)f(Reliable)e(Multicast)i(T)-8 b(ransp)s(ort)20
b(Proto)s(col".)487 4473 y Fm(Pr)-5 b(o)g(c)g(e)g(e)g(dings)35
b(of)d(IEEE)g(INF)n(OCOM)f('96,)i(Pages)g(1414-1424)p
Fn(.)h(April)28 b(1996.)300 4661 y([12])47 b(S.)35 b(P)m(aul,)h(K.)g
(K.)f(Sabnani,)g(J.)g(C.)h(Lin)e(and)g(S.)i(Bhattac)m(haryy)m(a.)i
(\\Reliable)c(Multicast)487 4774 y(T)-8 b(ransp)s(ort)35
b(Proto)s(col)h(\(RMTP\)".)i Fm(T)-7 b(o)38 b(app)-5
b(e)g(ar)40 b(in)e(IEEE)f(Journal)i(on)f(Sele)-5 b(cte)g(d)39
b(A)n(r)-5 b(e)g(as)487 4886 y(in)33 b(Communic)-5 b(ations,)37
b(sp)-5 b(e)g(cial)35 b(issue)e(on)h(Network)h(Supp)-5
b(ort)35 b(for)g(Multip)-5 b(oint)34 b(Commu-)487 4999
y(nic)-5 b(ation)p Fn(.)1905 5506 y(23)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF


